From 0e4e186f814b86e3da86a540714aa76f5126a436 Mon Sep 17 00:00:00 2001
From: Ivan Lopes <lopesivan.ufrj@gmail.com>
Date: Sat, 9 Jul 2022 19:18:28 -0300
Subject: [PATCH] custom bash-it

---
 aliases/available/developer.aliases.bash      |  78 +++++
 aliases/available/mutt.aliases.bash           |  11 +
 aliases/available/redis.aliases.bash          |  23 ++
 aliases/available/wine.aliases.bash           |   6 +
 aliases/available/xclip.aliases.bash          |  44 +++
 completion/available/cht.completion.bash      |  49 ++++
 completion/available/iprj.completion.bash     |   9 +
 completion/available/tldr.completion.bash     |  43 +++
 .../available/tmuxinator.completion.bash      |  25 ++
 completion/available/ttjava.completion.bash   |   7 +
 completion/available/wd.completion.bash       | 163 +++++++++++
 completion/available/xp.completion.bash       |  34 +++
 plugins/available/android.plugin.bash         |  12 +
 plugins/available/arduino.plugin.bash         |  18 ++
 plugins/available/bangsh.plugin.bash          |   4 +
 plugins/available/brew.plugin.bash            |  27 ++
 plugins/available/cabal.plugin.bash           |  26 ++
 plugins/available/dart.plugin.bash            |   7 +
 plugins/available/ghcup.plugin.bash           |  10 +
 plugins/available/groovy.plugin.bash          |  10 +
 plugins/available/jbang.plugin.bash           |  10 +
 plugins/available/keycode.plugin.bash         |  52 ++++
 plugins/available/luaenv.plugin.bash          |  12 +
 plugins/available/ndenv.plugin.bash           |  12 +
 plugins/available/pandoc.plugin.bash          |  11 +
 plugins/available/perl5.plugin.bash           |  16 ++
 plugins/available/rakudobrew.plugin.bash      |   9 +
 plugins/available/roo.plugin.bash             |   9 +
 plugins/available/rustup.plugin.bash          |  18 ++
 themes/.nvimlog                               |   0
 themes/colors.theme.bash                      | 272 ++++++++++++++++++
 themes/command_duration.theme.bash            |  69 +++++
 32 files changed, 1096 insertions(+)
 create mode 100644 aliases/available/developer.aliases.bash
 create mode 100644 aliases/available/mutt.aliases.bash
 create mode 100644 aliases/available/redis.aliases.bash
 create mode 100644 aliases/available/wine.aliases.bash
 create mode 100644 aliases/available/xclip.aliases.bash
 create mode 100644 completion/available/cht.completion.bash
 create mode 100644 completion/available/iprj.completion.bash
 create mode 100644 completion/available/tldr.completion.bash
 create mode 100755 completion/available/tmuxinator.completion.bash
 create mode 100644 completion/available/ttjava.completion.bash
 create mode 100644 completion/available/wd.completion.bash
 create mode 100644 completion/available/xp.completion.bash
 create mode 100644 plugins/available/android.plugin.bash
 create mode 100644 plugins/available/arduino.plugin.bash
 create mode 100644 plugins/available/bangsh.plugin.bash
 create mode 100644 plugins/available/brew.plugin.bash
 create mode 100644 plugins/available/cabal.plugin.bash
 create mode 100644 plugins/available/dart.plugin.bash
 create mode 100644 plugins/available/ghcup.plugin.bash
 create mode 100644 plugins/available/groovy.plugin.bash
 create mode 100644 plugins/available/jbang.plugin.bash
 create mode 100644 plugins/available/keycode.plugin.bash
 create mode 100644 plugins/available/luaenv.plugin.bash
 create mode 100644 plugins/available/ndenv.plugin.bash
 create mode 100644 plugins/available/pandoc.plugin.bash
 create mode 100644 plugins/available/perl5.plugin.bash
 create mode 100644 plugins/available/rakudobrew.plugin.bash
 create mode 100644 plugins/available/roo.plugin.bash
 create mode 100644 plugins/available/rustup.plugin.bash
 create mode 100644 themes/.nvimlog
 create mode 100644 themes/colors.theme.bash
 create mode 100644 themes/command_duration.theme.bash

diff --git a/aliases/available/developer.aliases.bash b/aliases/available/developer.aliases.bash
new file mode 100644
index 00000000..a0624c2f
--- /dev/null
+++ b/aliases/available/developer.aliases.bash
@@ -0,0 +1,78 @@
+cite 'about-alias'
+about-alias 'developer aliases'
+
+alias matlab='/opt/R2020b/bin/matlab'
+alias manview='groff -Tascii -man'
+alias less='less -r'                                   # raw control characters
+alias whence='type -a'                                 # where, of a sort
+alias grep='grep --color'                              # show differences in colour
+#alias http-server='python -m SimpleHTTPServer 8000'
+#alias odoc='evince'
+alias odoc='zathura'
+alias oimg='sxiv'
+alias docs='DISPLAY=:0.0 zeal'
+# alias img='LD_LIBRARY_PATH=/usr/local/lib img2sixel'
+alias pst="env PS_ARGS=%cpu,%mem,lstart pst"
+alias calc='bc -l ~/.config/bc/*'
+alias brilho='PYENV_VERSION=system brightness-controller'
+
+alias workspace.restart='sudo systemctl restart workspace.service'
+alias sdcv='sdcv -c -2 $HOME/.config/nvim/dictionary/sdcv'
+alias pt-en='sdcv -u "Portuguese - English"'
+alias en-pt='sdcv -u "English-Portuguese"'
+alias ls-mem='ps axch -o cmd:15,%mem --sort=-%mem'
+alias ls-cpu='ps axch -o cmd:15,%cpu --sort=-%cpu'
+alias game='mednafen'
+alias git.nvim='/usr/bin/git --git-dir=$HOME/developer/dotfiles/.nvim --work-tree=$HOME/.config/nvim'
+
+# commands
+reload-keynav() { killall keynav ; keynav daemonize ;}
+ekeynav() { nvim ~/.keynavrc ;}
+ekeynav-macros() { nvim ~/.keynav_macros ;}
+egit() { nvim ~/.gitconfig ;}
+
+# Some shortcuts for different directory listings
+alias ls='ls -hF --color=tty'                          # classify files in colour
+alias dir='ls -d */'
+alias vdir='ls --color=auto --format=long'
+alias ll='ls -l'                                       # long list
+alias la='ls -A'                                       # all but . and ..
+alias l='ls -CF'                                       #
+alias lspermissions='stat -c "%a %n"'
+
+alias logout-gnome='gnome-session-quit --logout'
+alias desliga='systemctl enable poweroff.target'
+#                sudo service lightdm restart
+alias x.restart='sudo service lightdm restart'
+#alias asciiflow="google-chrome file:///${HOME}/developer/asciiflow2/index.html"
+
+alias slide='lookatme --no-ext-warn'
+# alias nf='iprj new file --list'
+
+alias rec='arecord -c 1 -r 48000 -f S16_LE -D "hw:CARD=Loopback,DEV=1,SUBDEV=0"'
+alias mic.server='sudo micclient-ubuntu-x86_64 -t wifi 192.168.2.104'
+alias ei3='vim ~/.config/i3/config'
+alias egit='vim ~/.gitconfig'
+alias xevkb="xev -event keyboard"
+alias ccat="highlight --out-format=ansi" # Color cat - print file with syntax highlighting.
+
+alias scanner='scangearmp'
+alias nw="i3-msg workspace $(wmctrl -d | rev | cut -c 1 | awk -v RS='\\s+' '{ a[$1] } END { for(i = 1; i in a; ++i); print i }')"
+#alias r='ranger --cmd "set show_hidden=true"'
+alias mvi='mpv -profile image'
+#xhost +
+#alias vp='xhost +; sudo su visualparadigm -c /opt/visualparadigm/Visual_Paradigm_14.2/bin/Visual_Paradigm'
+alias mux='tmuxinator'
+alias audio-hdmi='pacmd set-card-profile 0 "output:hdmi-stereo"'
+alias audio-analog='pacmd set-card-profile 0 "output:analog-stereo"'
+alias audio-lx3000='pacmd set-card-profile 1 "output:analog-stereo"'
+
+alias xopen='xdg-open'
+alias vp='/opt/Visual_Paradigm_16.2/bin/Visual_Paradigm'
+
+alias godarwin='GOOS=darwin GOARCH=amd64 go'
+alias golinux='GOOS=linux GOARCH=amd64 go'
+alias goraspbian='GOOS=linux GOARCH=arm GOARM=7 go'
+#alias terminal="rxvt -fn \"xft:InconsolataGo Nerd Font Mono:size=31:hinting=true:hintstyle=Regular:minspace=False\" -fb \"xft:InconsolataGo Nerd Font Mono:size=31:hinting=true:hintstyle=Bold\""
+alias terminal="rxvt -fn \"xft:DroidSansMono Nerd Font Mono:pixelsize=31:hinting=true:hintstyle=Book\""
+# vi:set nu nowrap:
diff --git a/aliases/available/mutt.aliases.bash b/aliases/available/mutt.aliases.bash
new file mode 100644
index 00000000..0e0cb818
--- /dev/null
+++ b/aliases/available/mutt.aliases.bash
@@ -0,0 +1,11 @@
+cite 'about-alias'
+about-alias 'mutt aliases'
+
+alias email='EMAILBOX=uff neomutt'
+alias email.ufrj='EMAILBOX=ufrj neomutt'
+alias email.del='EMAILBOX=del neomutt'
+alias email.poli='EMAILBOX=poli neomutt'
+alias email.hilda='EMAILBOX=hilda neomutt'
+alias email.uerj='EMAILBOX=uerj neomutt'
+
+# vi:set nu nowrap:
diff --git a/aliases/available/redis.aliases.bash b/aliases/available/redis.aliases.bash
new file mode 100644
index 00000000..2b1f0cbe
--- /dev/null
+++ b/aliases/available/redis.aliases.bash
@@ -0,0 +1,23 @@
+cite 'about-alias'
+about-alias 'redis aliases'
+
+_redis_list(){
+	redis-cli ZRANGE $1 0 -1
+}
+_redis_zram(){
+	db=$1
+	shift
+	redis-cli zadd $db 1 $1
+}
+
+alias redis.list='_redis_list'
+alias redis.keys='redis-cli KEYS \*'
+alias redis.get='redis-bash-cli get'
+alias redis.set='redis-bash-cli set'
+alias redis.del='redis-bash-cli del'
+alias redis.zadd='_redis_zram'
+
+alias last.list='redis-cli ZRANGE vimmru 0 -1'
+alias last.clean='redis-cli DEL vimmru'
+
+# vi:set nu nowrap:
diff --git a/aliases/available/wine.aliases.bash b/aliases/available/wine.aliases.bash
new file mode 100644
index 00000000..d46176ef
--- /dev/null
+++ b/aliases/available/wine.aliases.bash
@@ -0,0 +1,6 @@
+cite 'about-alias'
+about-alias 'Wine commands aliases'
+
+alias sketchup='wine64 "C://Program Files//SketchUp//SketchUp 2019//SketchUp.exe"'
+
+alias gk2='wine "C://GK2//SIERRA.EXE"'
diff --git a/aliases/available/xclip.aliases.bash b/aliases/available/xclip.aliases.bash
new file mode 100644
index 00000000..9ecd71ed
--- /dev/null
+++ b/aliases/available/xclip.aliases.bash
@@ -0,0 +1,44 @@
+cite 'about-alias'
+about-alias 'xclip and xpaste shortcuts to linux'
+
+case $OSTYPE in
+  linux*)
+    XCLIP=$(command -v xclip)
+    if [[ $XCLIP ]]; then
+      s=clipboard
+      alias xcopy="$XCLIP -selection $s" &&
+        alias xpaste="$XCLIP -selection $s -o"
+
+      s=primary
+      alias xcopy-p="$XCLIP -selection $s" &&
+        alias xpaste-p="$XCLIP -selection $s -o"
+
+      s=secondary
+      alias xcopy-s="$XCLIP -selection $s" &&
+        alias xpaste-s="$XCLIP -selection $s -o"
+
+      alias  xpwd='pwd|xclip -selection secondary'
+      alias  xcd='cd $(xclip -selection secondary -o)'
+
+      xcp()
+      {
+        if [[ $# -eq 0 ]]; then
+          echo 1>&2 'Sintaxe: xcp [files]'
+        else
+          echo cp $* $(xclip -selection secondary -o)
+        fi
+      }
+
+    fi
+    ;;
+esac
+
+#alias xcopy='xclip -sel clip'
+# to use it just install xclip on your distribution and it would work like:
+# $ echo "hello" | pbcopy
+# $ pbpaste
+# hello
+
+# very useful for things like:
+# cat ~/.ssh/id_rsa.pub | pbcopy
+# have fun!
diff --git a/completion/available/cht.completion.bash b/completion/available/cht.completion.bash
new file mode 100644
index 00000000..c8c8a534
--- /dev/null
+++ b/completion/available/cht.completion.bash
@@ -0,0 +1,49 @@
+#!/usr/bin/env bash
+#                      __ __       ___
+#                     /\ \\ \    /'___`\
+#                     \ \ \\ \  /\_\ /\ \
+#                      \ \ \\ \_\/_/// /__
+#                       \ \__ ,__\ // /_\ \
+#                        \/_/\_\_//\______/
+#                           \/_/  \/_____/
+#                                         Algoritimos
+#
+#
+#      Author: Ivan Lopes
+#        Mail: ivan (at) 42algoritmos (dot) com (dot) br
+#        Site: htredis_get://www.42algoritmos.com.br
+#     License: gpl
+#       Phone: +1 561 801 7985
+#    Language: Shell Script
+#        File: redis.get.bash
+#        Date: Ter 28 Fev 2017 00:35:55 BRT
+# Description:
+#
+# ----------------------------------------------------------------------------
+#
+# ----------------------------------------------------------------------------
+
+##############################################################################
+##############################################################################
+##############################################################################
+
+# ----------------------------------------------------------------------------
+# Run!
+
+_cht_complete()
+{
+    local cur prev opts
+    _get_comp_words_by_ref -n : cur
+
+    COMPREPLY=()
+    cur="${COMP_WORDS[COMP_CWORD]}"
+    prev="${COMP_WORDS[COMP_CWORD-1]}"
+    opts="$(cht.sh :list)"
+
+    if [ ${COMP_CWORD} = 1 ]; then
+          COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
+          __ltrim_colon_completions "$cur"
+    fi
+    return 0
+}
+complete -F _cht_complete cht.sh
diff --git a/completion/available/iprj.completion.bash b/completion/available/iprj.completion.bash
new file mode 100644
index 00000000..17337ec3
--- /dev/null
+++ b/completion/available/iprj.completion.bash
@@ -0,0 +1,9 @@
+# shellcheck shell=bash
+cite "about-completion"
+about-completion "iprj(cli tool) manager project"
+
+# ----------------------------------------------------------------------------
+# Run!
+
+IPRJ=$(command -v iprj)
+[[ $IPRJ ]] && eval "$( iprj init )"
diff --git a/completion/available/tldr.completion.bash b/completion/available/tldr.completion.bash
new file mode 100644
index 00000000..493996fa
--- /dev/null
+++ b/completion/available/tldr.completion.bash
@@ -0,0 +1,43 @@
+#!/usr/bin/env bash
+
+# I don't use bash, but I remember this works.
+# If anyone has an improved, and better version, go ahead, open a pull-request.
+#
+# Copyright (C) 2016 Arvid Gerstmann
+#
+
+_tldr_get_files() {
+	local ret
+	local files="$(find $HOME/.tldrc/tldr-master/pages/$1 -name '*.md' -exec basename {} .md \;)"
+
+	IFS=$'\n\t'
+	for f in $files; do
+	    echo $f
+	done
+}
+
+_tldr_complete() {
+    COMPREPLY=()
+	local word="${COMP_WORDS[COMP_CWORD]}"
+	local cmpl=""
+    if [ "$word" = "-" ]; then
+        cmpl=$(echo $'\n-v\n-h\n-u\n-c\n-p\n-r' | sort)
+    elif [ "$word" = "--" ]; then
+        cmpl=$(echo $'--version\n--help\n--update\n--clear-cache\n--platform\n--render' | sort)
+    else
+        if [ -d "$HOME/.tldrc/tldr-master/pages" ]; then
+            local platform="$(uname)"
+            cmpl="$(_tldr_get_files common | sort | uniq)"
+            if [ "$platform" = "Darwin" ]; then
+                cmpl="${cmpl}$(_tldr_get_files osx | sort | uniq)"
+            elif [ "$platform" = "Linux" ]; then
+                cmpl="${cmpl}$(_tldr_get_files linux | sort | uniq)"
+            elif [ "$platform" = "SunOS" ]; then
+                cmpl="${cmpl}$(_tldr_get_files sunos | sort | uniq)"
+            fi
+        fi
+    fi
+    COMPREPLY=( $(compgen -W "$cmpl" -- "$word") )
+}
+
+complete -F _tldr_complete tldr
diff --git a/completion/available/tmuxinator.completion.bash b/completion/available/tmuxinator.completion.bash
new file mode 100755
index 00000000..cda27174
--- /dev/null
+++ b/completion/available/tmuxinator.completion.bash
@@ -0,0 +1,25 @@
+#!/usr/bin/env bash
+
+_tmuxinator() {
+    COMPREPLY=()
+    local word
+    word="${COMP_WORDS[COMP_CWORD]}"
+
+    if [ "$COMP_CWORD" -eq 1 ]; then
+        #local commands="$(compgen -W "$(tmuxinator commands)" -- "$word")"
+        local projects="$(compgen -W "$(tmuxinator completions start)" -- "$word")"
+
+        COMPREPLY=( $commands $projects )
+    elif [ "$COMP_CWORD" -eq 2 ]; then
+        local words
+        words=("${COMP_WORDS[@]}")
+        unset words[0]
+        unset words[$COMP_CWORD]
+        local completions
+        completions=$(tmuxinator completions "${words[@]}")
+        COMPREPLY=( $(compgen -W "$completions" -- "$word") )
+    fi
+}
+
+complete -F _tmuxinator tmuxinator mux
+alias mux="tmuxinator"
diff --git a/completion/available/ttjava.completion.bash b/completion/available/ttjava.completion.bash
new file mode 100644
index 00000000..8e57dbd1
--- /dev/null
+++ b/completion/available/ttjava.completion.bash
@@ -0,0 +1,7 @@
+#!/usr/bin/env bash
+
+# ----------------------------------------------------------------------------
+# Run!
+
+TTJAVA=$(command -v ttjava)
+[[ $TTJAVA ]] && eval "$( ttjava init )"
diff --git a/completion/available/wd.completion.bash b/completion/available/wd.completion.bash
new file mode 100644
index 00000000..1273f03d
--- /dev/null
+++ b/completion/available/wd.completion.bash
@@ -0,0 +1,163 @@
+# shellcheck shell=bash
+cite "about-completion"
+about-completion "wd completion"
+
+_wdd() {
+  local wdd="$HOME/.wdd"
+  [[ -d "$wdd" ]] || mkdir "$wdd"
+
+  echo "$wdd"
+}
+
+_warp_points() {
+  ls "$(_wdd)/"| sed 's|@||'
+}
+
+_point_from_path() {
+  echo "$1" | cut -d/ -f1
+}
+
+_path_without_point() {
+  if [[ "$1" =~ "/" ]]; then
+    echo "$1" | cut -d/ -f2-
+  fi
+}
+
+_leading_folders_from_path() {
+  if [[ "$1" =~ "/" ]]; then
+    echo "$1" | rev | cut -d/ -f2- | rev | sed 's|$|/|'
+  fi
+}
+
+_path_without_leading_folders() {
+  echo "$1" | rev | cut -d/ -f1 | rev
+}
+
+_point_destination() {
+  local wdd="$(_wdd)"
+  local point="$1"
+
+  echo "$(readlink $wdd/$point)"
+}
+
+_wd_autocomplete() {
+  local current="${COMP_WORDS[COMP_CWORD]}"
+
+  if [[ "$current" =~ "/" ]]; then
+    local point="$(_point_from_path "$current")"
+    local subpath="$(_path_without_point "$current")"
+    local destination="$(_point_destination "$point")"
+    local subfolders="$(_leading_folders_from_path "$subpath")"
+    local completions="$(ls -F "$destination/$subfolders" | sed 's|@$||')"
+    current="$(_path_without_leading_folders "$subpath")"
+
+    COMPREPLY=($(compgen -W "$completions" -P "$point/$subfolders" -- $current))
+  else
+    COMPREPLY=($(compgen -W "$(_warp_points)" -- $current))
+  fi
+}
+
+wd() {
+  local wdd="$(_wdd)"
+
+  local point_name="$2"
+  local point_path="$wdd/$point_name"
+  local point_destination="$(readlink $point_path)"
+  local tmux_on=0
+  local make_on=0
+
+  [[ -z "$point_destination" ]] && point_destination="no point destination"
+
+  case "x$1" in
+    xt)
+      shift
+      tmux_on=1
+    ;;
+    # xmk)
+    #   shift
+    #   echo $( redis-bash-cli get $1 )
+    #   return $?
+    # ;;
+    xadd)
+      if ln -s "$PWD" "$point_path" &> /dev/null; then
+        echo "Added warp point '$point_name' ($PWD)"
+        return 0
+      else
+        echo "Error adding warp point '$point_name' ($PWD)"
+        return 1
+      fi
+    ;;
+    xrm)
+      if rm -f "$point_path" &> /dev/null; then
+        echo "Removed warp point '$point_name' ($point_destination)"
+        return 0
+      else
+        echo "Error removing warp point '$point_name' ($point_destination)"
+        return 1
+      fi
+    ;;
+    xls)
+      local point_list=$(ls -l "$wdd/" | grep -v '^total' | grep -Eo '\b\w+\b ->.*' | awk -F' -> ' '{printf "\033[95m%14s\033[0m \033[92m%s\033[0m\n", $1, $2}')
+      echo "$point_list" | grep "$2"
+      return 0
+    ;;
+    xfzf)
+      local point_list=$(ls -l "$wdd/" | grep -v '^total' | grep -Eo '\b\w+\b ->.*' | awk -F' -> ' '{printf "%14s %s\n", $1, $2}')
+      ff=$(echo "$point_list" | grep "$2" | fzf-tmux -l 100% --multi --reverse --color fg:252,bg:233,hl:67,fg+:252,bg+:235,hl+:81 --color info:144,prompt:161,spinner:135,pointer:135,marker:118)
+      echo $ff| awk -F' ' '{printf "\033[95m%14s\033[0m \033[92m%s\033[0m\n", $1, $2}'
+      echo =$ff=| sed  's/= \(\w\+\) .*/wd \1/'| xcopy
+      return 0
+    ;;
+    xw)
+      cd ~/work
+      return $?
+    ;;
+    x-h | x--help)
+      echo "Usage: wd [command] <point_name>"
+      echo "Commands:"
+      echo "  add <point_name>    Adds the current working directory to your warp points"
+      echo "  rm <point_name>     Removes the named point from your warp points"
+      echo "  t <point_name>      Open points with tmux"
+      echo "  ls                  Prints all warp points"
+      echo "  ls <point_name>     Prints all warp points matching the specified name"
+      echo "  -                   warps to previous working directory"
+      echo "  -h, --help          Prints this lovely message"
+      return 0
+    ;;
+    x)
+      cd /workspace
+      return $?
+    ;;
+    x-)
+      cd -
+      return $?
+    ;;
+    x-*)
+      echo "Unknown option: '$1'"
+      return 1
+    ;;
+  esac
+
+  # if we get here, we're warping
+  local requested_point="$(_point_from_path "$1")"
+  local subpath="$(_path_without_point "$1")"
+
+  point_path="$wdd/$requested_point"
+
+  if [[ ! -L "$point_path" ]]; then
+    echo "Can't warp to point '$requested_point' because it doesn't exist."
+    return 1
+  fi
+
+  local requested_destination="$(readlink $point_path)/$subpath"
+
+  if [ $tmux_on -eq 1 ]; then
+    tmux new-window -c "$requested_destination"
+    return $?
+  fi
+
+  cd "$requested_destination"
+  return $?
+}
+
+complete -o nospace -F _wd_autocomplete wd
diff --git a/completion/available/xp.completion.bash b/completion/available/xp.completion.bash
new file mode 100644
index 00000000..49d25e7b
--- /dev/null
+++ b/completion/available/xp.completion.bash
@@ -0,0 +1,34 @@
+#!/usr/bin/env bash
+#                      __ __       ___
+#                     /\ \\ \    /'___`\
+#                     \ \ \\ \  /\_\ /\ \
+#                      \ \ \\ \_\/_/// /__
+#                       \ \__ ,__\ // /_\ \
+#                        \/_/\_\_//\______/
+#                           \/_/  \/_____/
+#                                         Algoritimos
+#
+#
+#      Author: Ivan Lopes
+#        Mail: ivan (at) 42algoritmos (dot) com (dot) br
+#        Site: htredis_get://www.42algoritmos.com.br
+#     License: gpl
+#       Phone: +1 561 801 7985
+#    Language: Shell Script
+#        File: redis.get.bash
+#        Date: Ter 28 Fev 2017 00:35:55 BRT
+# Description:
+#
+# ----------------------------------------------------------------------------
+#
+# ----------------------------------------------------------------------------
+
+##############################################################################
+##############################################################################
+##############################################################################
+
+# ----------------------------------------------------------------------------
+# Run!
+
+XP=$(command -v xp)
+[[ $XP ]] && eval "$( xp init )"
diff --git a/plugins/available/android.plugin.bash b/plugins/available/android.plugin.bash
new file mode 100644
index 00000000..4c3546b8
--- /dev/null
+++ b/plugins/available/android.plugin.bash
@@ -0,0 +1,12 @@
+cite about-plugin
+about-plugin 'Load Android Development Kit Manager'
+
+CMDLINE_TOOLS=${HOME}/Android/Sdk/cmdline-tools
+if [ -d "${CMDLINE_TOOLS}" ]; then
+    export PATH=$PATH:${CMDLINE_TOOLS}/latest/bin
+fi
+
+# desliga-mobile()
+# {
+#   adb shell "su -c 'reboot -p'"
+# }
diff --git a/plugins/available/arduino.plugin.bash b/plugins/available/arduino.plugin.bash
new file mode 100644
index 00000000..0da5eb83
--- /dev/null
+++ b/plugins/available/arduino.plugin.bash
@@ -0,0 +1,18 @@
+
+cite about-plugin
+about-plugin 'Load Arduino Development Kit Manager'
+
+v=1.8.1
+v=1.8.7
+t=5.4.0-atmel3.6.1-arduino2
+
+if [ -d "/opt/arduino-${v}" ]; then
+  export ARDUINO_DIR=/opt/arduino-${v}
+  export PATH=$PATH:$ARDUINO_DIR
+fi
+if [ -d "${HOME}/developer/Arduino-Makefile" ]; then
+  #export AVR_TOOLS_DIR=/usr
+  export AVR_TOOLS_DIR=${HOME}/.arduino15/packages/arduino/tools/avr-gcc/${t}
+  export ARDMK_DIR=${HOME}/developer/Arduino-Makefile
+fi
+
diff --git a/plugins/available/bangsh.plugin.bash b/plugins/available/bangsh.plugin.bash
new file mode 100644
index 00000000..9e1bcc7b
--- /dev/null
+++ b/plugins/available/bangsh.plugin.bash
@@ -0,0 +1,4 @@
+cite about-plugin
+about-plugin 'Load Bang.sh - for easy Shell Scripting'
+
+export PATH="$PATH:/home/ivan/developer/scripts/bangsh"
diff --git a/plugins/available/brew.plugin.bash b/plugins/available/brew.plugin.bash
new file mode 100644
index 00000000..dfeadcf2
--- /dev/null
+++ b/plugins/available/brew.plugin.bash
@@ -0,0 +1,27 @@
+# plugin for brew
+
+cite about-plugin
+about-plugin 'brew plugin for Linux'
+
+# linuxbrew
+
+if [[ -e "${HOME}/.linuxbrew/bin" ]]; then
+
+  # load plenv bin dir into path if it exists
+  pathmunge "${HOME}/.linuxbrew/bin"
+
+fi
+
+if [[ $(which brew) ]]; then
+
+  # init brew
+  #eval "$(brew shellenv)"
+
+  eval $(brew shellenv)
+  # export HOMEBREW_PREFIX="/home/ivan/developer/env/linuxbrew"
+  # export HOMEBREW_CELLAR="/home/ivan/developer/env/linuxbrew/Cellar"
+  # export HOMEBREW_REPOSITORY="/home/ivan/developer/env/linuxbrew/Homebrew"
+  # export PATH="${PATH}:/home/ivan/developer/env/linuxbrew/bin:/home/ivan/developer/env/linuxbrew/sbin"
+  # export MANPATH="/home/ivan/developer/env/linuxbrew/share/man${MANPATH+:$MANPATH}:"
+  # export INFOPATH="/home/ivan/developer/env/linuxbrew/share/info:${INFOPATH:-}"
+fi
diff --git a/plugins/available/cabal.plugin.bash b/plugins/available/cabal.plugin.bash
new file mode 100644
index 00000000..63e9f7f5
--- /dev/null
+++ b/plugins/available/cabal.plugin.bash
@@ -0,0 +1,26 @@
+cite about-plugin
+about-plugin 'load pyenv, if you are using it'
+
+export PYENV_ROOT="$HOME/.pyenv"
+pathmunge "$PYENV_ROOT/bin"
+
+[[ `which pyenv 2>/dev/null` ]] && eval "$(pyenv init - bash)"
+
+#Load pyenv virtualenv if the virtualenv plugin is installed.
+if pyenv virtualenv-init - &> /dev/null; then
+  eval "$(pyenv virtualenv-init - bash)"
+fi
+about-plugin 'Load cabal Development Kit Manager'
+# cabal
+
+if [ -d "/opt/cabal/bin" ]; then
+  export PATH=/opt/cabal/bin:$PATH
+fi
+
+if [ -d "/opt/ghc/bin" ]; then
+  export PATH=/opt/ghc/bin:$PATH
+fi
+
+if [ -d "$HOME/.cabal/bin" ]; then
+  export PATH=$HOME/.cabal/bin:$PATH
+fi
diff --git a/plugins/available/dart.plugin.bash b/plugins/available/dart.plugin.bash
new file mode 100644
index 00000000..0bc9910e
--- /dev/null
+++ b/plugins/available/dart.plugin.bash
@@ -0,0 +1,7 @@
+cite about-plugin
+about-plugin 'Load Dart interpreter'
+
+export PATH="$PATH":"$HOME/.pub-cache/bin"
+# if [ -e "/usr/lib/dart/bin" ]; then
+#   pathmunge "/usr/lib/dart/bin"
+# fi
diff --git a/plugins/available/ghcup.plugin.bash b/plugins/available/ghcup.plugin.bash
new file mode 100644
index 00000000..450c9863
--- /dev/null
+++ b/plugins/available/ghcup.plugin.bash
@@ -0,0 +1,10 @@
+cite about-plugin
+about-plugin 'load ghcup, if you are using it'
+
+export GHCUP_ROOT="$HOME/.ghcup"
+pathmunge "$GHCUP_ROOT/bin"
+
+if [ -f "/home/ivan/.ghcup/env" ]; then
+    source "/home/ivan/.ghcup/env"
+fi
+
diff --git a/plugins/available/groovy.plugin.bash b/plugins/available/groovy.plugin.bash
new file mode 100644
index 00000000..4d5b3dc8
--- /dev/null
+++ b/plugins/available/groovy.plugin.bash
@@ -0,0 +1,10 @@
+cite about-plugin
+about-plugin 'enable groovy'
+
+# groovy
+if [ -d "/opt/groovy" ]; then
+  v=3.0.7
+  export GROOVY_HOME="/opt/groovy/groovy-${v}"
+  export PATH="$PATH:${GROOVY_HOME}/bin"
+fi
+
diff --git a/plugins/available/jbang.plugin.bash b/plugins/available/jbang.plugin.bash
new file mode 100644
index 00000000..d0cc3141
--- /dev/null
+++ b/plugins/available/jbang.plugin.bash
@@ -0,0 +1,10 @@
+# Load jbang, if you are using it
+
+cite about-plugin
+about-plugin 'load jbang, if you are using it'
+
+pathmunge "$HOME"/.jbang/bin
+# Add Jbang to environment
+# alias j!=jbang
+# export PATH="$HOME/.jbang/bin:$PATH"
+
diff --git a/plugins/available/keycode.plugin.bash b/plugins/available/keycode.plugin.bash
new file mode 100644
index 00000000..c074e85d
--- /dev/null
+++ b/plugins/available/keycode.plugin.bash
@@ -0,0 +1,52 @@
+cite about-plugin
+about-plugin 'caps lock virando grave'
+
+# use xev para ver keycode ...
+# ----------------------------------------------------------------------------
+# dead + _ + key => key + space
+# xmodmap -e 'eycode 194  = dead_grave'
+
+# 1 2 [3] 4 5
+#xmodmap -e 'keycode 194  = grave'       # `
+
+# 1 2 3 [4] 5
+#xmodmap -e 'keycode 195  = asciitilde '       # ~
+
+# 1 2 3 4 [5]
+#xmodmap -e 'keycode 196  = asciicircum'  # ^
+
+## caps lock virando grave
+
+if [[ ! -f /tmp/keycode ]]; then
+# apago o caps lock
+xmodmap -e 'clear lock'
+#xmodmap -e 'keycode 66 = grave acute dead_grave'
+xmodmap -e 'keycode 66 = tab iso_left_tab iso_left_tab'
+
+echo on > /tmp/keycode
+fi
+
+# <caps lock>        : `
+# <shift><caps lock> : ´
+
+## caps lock virando grave e dead_grave
+#xmodmap -e 'keycode 66 = grave'  # `
+#xmodmap -e 'keycode 66 = dead_acute'  # `
+## <caps lock> retorna grave
+## <shift><caps lock> retorna retorna dead_grave
+
+# botões especiais
+# ================
+
+#_____________________________________________________________________-
+# [carta] [home] [msn] [fone] <1,2,3,4,5,*> [>/||] [|<<] [>>|] [#]
+# <esc>  [f1]  .......................................    [f12]
+# [papel]
+# [foto]      teclado
+# [lupa+]
+# [lupa]
+#_____________________________________________________________________-
+
+# [papel]
+# keycode 243 (keysym 0x1008ff5b, xf86documents)
+#xmodmap -e 'keycode 243 = acute grave dead_grave'
diff --git a/plugins/available/luaenv.plugin.bash b/plugins/available/luaenv.plugin.bash
new file mode 100644
index 00000000..1e2efade
--- /dev/null
+++ b/plugins/available/luaenv.plugin.bash
@@ -0,0 +1,12 @@
+cite about-plugin
+about-plugin 'load luaenv, if you are using it'
+
+export luaenv_ROOT="$HOME/.luaenv"
+pathmunge "$luaenv_ROOT/bin"
+
+[[ `which luaenv 2>/dev/null` ]] && eval "$(luaenv init - bash)"
+
+#Load luaenv virtualenv if the virtualenv plugin is installed.
+if luaenv virtualenv-init - &> /dev/null; then
+  eval "$(luaenv virtualenv-init - bash)"
+fi
diff --git a/plugins/available/ndenv.plugin.bash b/plugins/available/ndenv.plugin.bash
new file mode 100644
index 00000000..c1b4f902
--- /dev/null
+++ b/plugins/available/ndenv.plugin.bash
@@ -0,0 +1,12 @@
+cite about-plugin
+about-plugin 'load ndenv, if you are using it'
+
+export ndenv_ROOT="$HOME/.ndenv"
+pathmunge "$ndenv_ROOT/bin"
+
+[[ `which ndenv 2>/dev/null` ]] && eval "$(ndenv init - bash)"
+
+#Load ndenv virtualenv if the virtualenv plugin is installed.
+if ndenv virtualenv-init - &> /dev/null; then
+  eval "$(ndenv virtualenv-init - bash)"
+fi
diff --git a/plugins/available/pandoc.plugin.bash b/plugins/available/pandoc.plugin.bash
new file mode 100644
index 00000000..d28376c3
--- /dev/null
+++ b/plugins/available/pandoc.plugin.bash
@@ -0,0 +1,11 @@
+# plugin for npandoc
+
+cite about-plugin
+about-plugin 'pandoc plugin for node'
+
+if [[ `which pandoc` ]] ; then
+
+  # init pandoc
+  eval "$(pandoc --bash-completion)"
+
+fi
diff --git a/plugins/available/perl5.plugin.bash b/plugins/available/perl5.plugin.bash
new file mode 100644
index 00000000..6f7d7cb2
--- /dev/null
+++ b/plugins/available/perl5.plugin.bash
@@ -0,0 +1,16 @@
+# Load perl5, if you are using it
+
+cite about-plugin
+about-plugin 'load perl5, if you are using it'
+
+pathmunge "$HOME"/perl5/bin
+PERL5LIB="/home/ivan/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
+PERL_LOCAL_LIB_ROOT="/home/ivan/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
+PERL_MB_OPT="--install_base \"/home/ivan/perl5\""; export PERL_MB_OPT;
+PERL_MM_OPT="INSTALL_BASE=/home/ivan/perl5"; export PERL_MM_OPT;
+
+# PATH="/home/ivan/perl5/bin${PATH:+:${PATH}}"; export PATH;
+# PERL5LIB="/home/ivan/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
+# PERL_LOCAL_LIB_ROOT="/home/ivan/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
+# PERL_MB_OPT="--install_base \"/home/ivan/perl5\""; export PERL_MB_OPT;
+# PERL_MM_OPT="INSTALL_BASE=/home/ivan/perl5"; export PERL_MM_OPT;
diff --git a/plugins/available/rakudobrew.plugin.bash b/plugins/available/rakudobrew.plugin.bash
new file mode 100644
index 00000000..98ff09da
--- /dev/null
+++ b/plugins/available/rakudobrew.plugin.bash
@@ -0,0 +1,9 @@
+# Load rakudobrew, if you are using it
+
+cite about-plugin
+about-plugin 'load rakudobrew, if you are using it'
+
+pathmunge "$HOME"/.rakudobrew/bin
+[ -x `which rakudobrew` ] && eval "$(rakudobrew init Bash)"
+
+#[ -d "$HOME"/.rakudobrew/plugins/ruby-build ] && pathmunge "$HOME"/.rakudobrew/plugins/ruby-build/bin
diff --git a/plugins/available/roo.plugin.bash b/plugins/available/roo.plugin.bash
new file mode 100644
index 00000000..00ea6638
--- /dev/null
+++ b/plugins/available/roo.plugin.bash
@@ -0,0 +1,9 @@
+cite about-plugin
+about-plugin 'load roo, if you are using it'
+
+# roo
+if [ -d "/opt/spring-roo" ]; then
+  export ROO_HOME="/opt/spring-roo"
+  export PATH="$PATH:$ROO_HOME/bin"
+fi
+
diff --git a/plugins/available/rustup.plugin.bash b/plugins/available/rustup.plugin.bash
new file mode 100644
index 00000000..0a32671d
--- /dev/null
+++ b/plugins/available/rustup.plugin.bash
@@ -0,0 +1,18 @@
+# plugin for rustup
+
+cite about-plugin
+about-plugin 'rustup plugin for rust'
+
+if [[ -e "${HOME}/.cargo/bin" ]] ; then
+
+  # load rustup bin dir into path if it exists
+  pathmunge "${HOME}/.cargo/bin"
+
+fi
+
+if [[ `which rustup` ]] ; then
+
+  # init rustup
+  eval "$(rustup completions bash)"
+
+fi
diff --git a/themes/.nvimlog b/themes/.nvimlog
new file mode 100644
index 00000000..e69de29b
diff --git a/themes/colors.theme.bash b/themes/colors.theme.bash
new file mode 100644
index 00000000..d5044d05
--- /dev/null
+++ b/themes/colors.theme.bash
@@ -0,0 +1,272 @@
+# shellcheck shell=bash
+# shellcheck disable=SC2005
+# shellcheck disable=SC2034
+
+function __ {
+  echo "$@"
+}
+
+function __make_ansi {
+  next=$1; shift
+  echo "\[\e[$(__$next $@)m\]"
+}
+
+function __make_echo {
+  next=$1; shift
+  echo "\033[$(__$next $@)m"
+}
+
+
+function __reset {
+  next=$1; shift
+  out="$(__$next $@)"
+  echo "0${out:+;${out}}"
+}
+
+function __bold {
+  next=$1; shift
+  out="$(__$next $@)"
+  echo "${out:+${out};}1"
+}
+
+function __faint {
+  next=$1; shift
+  out="$(__$next $@)"
+  echo "${out:+${out};}2"
+}
+
+function __italic {
+  next=$1; shift
+  out="$(__$next $@)"
+  echo "${out:+${out};}3"
+}
+
+function __underline {
+  next=$1; shift
+  out="$(__$next $@)"
+  echo "${out:+${out};}4"
+}
+
+function __negative {
+  next=$1; shift
+  out="$(__$next $@)"
+  echo "${out:+${out};}7"
+}
+
+function __crossed {
+  next=$1; shift
+  out="$(__$next $@)"
+  echo "${out:+${out};}8"
+}
+
+
+function __color_normal_fg {
+  echo "3$1"
+}
+
+function __color_normal_bg {
+  echo "4$1"
+}
+
+function __color_bright_fg {
+  echo "9$1"
+}
+
+function __color_bright_bg {
+  echo "10$1"
+}
+
+
+function __color_black   {
+  echo "0"
+}
+
+function __color_red   {
+  echo "1"
+}
+
+function __color_green   {
+  echo "2"
+}
+
+function __color_yellow  {
+  echo "3"
+}
+
+function __color_blue  {
+  echo "4"
+}
+
+function __color_magenta {
+  echo "5"
+}
+
+function __color_cyan  {
+  echo "6"
+}
+
+function __color_white   {
+  echo "7"
+}
+
+function __color_rgb {
+  r=$1 && g=$2 && b=$3
+  [[ $r == $g && $g == $b ]] && echo $(( $r / 11 + 232 )) && return # gray range above 232
+  echo "8;5;$(( ($r * 36  + $b * 6 + $g) / 51 + 16 ))"
+}
+
+function __color {
+  color=$1; shift
+  case "$1" in
+    fg|bg) side="$1"; shift ;;
+    *) side=fg;;
+  esac
+  case "$1" in
+    normal|bright) mode="$1"; shift;;
+    *) mode=normal;;
+  esac
+  [[ $color == "rgb" ]] && rgb="$1 $2 $3"; shift 3
+
+  next=$1; shift
+  out="$(__$next $@)"
+  echo "$(__color_${mode}_${side} $(__color_${color} $rgb))${out:+;${out}}"
+}
+
+
+function __black   {
+  echo "$(__color black $@)"
+}
+
+function __red   {
+  echo "$(__color red $@)"
+}
+
+function __green   {
+  echo "$(__color green $@)"
+}
+
+function __yellow  {
+  echo "$(__color yellow $@)"
+}
+
+function __blue  {
+  echo "$(__color blue $@)"
+}
+
+function __magenta {
+  echo "$(__color magenta $@)"
+}
+
+function __cyan  {
+  echo "$(__color cyan $@)"
+}
+
+function __white   {
+  echo "$(__color white $@)"
+}
+
+function __rgb {
+  echo "$(__color rgb $@)"
+}
+
+
+function __color_parse {
+  next=$1; shift
+  echo "$(__$next $@)"
+}
+
+function color {
+  echo "$(__color_parse make_ansi $@)"
+}
+
+function echo_color {
+  echo "$(__color_parse make_echo $@)"
+}
+
+
+black="\[\e[0;30m\]"
+red="\[\e[0;31m\]"
+green="\[\e[0;32m\]"
+yellow="\[\e[0;33m\]"
+blue="\[\e[0;34m\]"
+purple="\[\e[0;35m\]"
+cyan="\[\e[0;36m\]"
+white="\[\e[0;37m\]"
+orange="\[\e[0;91m\]"
+
+bold_black="\[\e[30;1m\]"
+bold_red="\[\e[31;1m\]"
+bold_green="\[\e[32;1m\]"
+bold_yellow="\[\e[33;1m\]"
+bold_blue="\[\e[34;1m\]"
+bold_purple="\[\e[35;1m\]"
+bold_cyan="\[\e[36;1m\]"
+bold_white="\[\e[37;1m\]"
+bold_orange="\[\e[91;1m\]"
+
+underline_black="\[\e[30;4m\]"
+underline_red="\[\e[31;4m\]"
+underline_green="\[\e[32;4m\]"
+underline_yellow="\[\e[33;4m\]"
+underline_blue="\[\e[34;4m\]"
+underline_purple="\[\e[35;4m\]"
+underline_cyan="\[\e[36;4m\]"
+underline_white="\[\e[37;4m\]"
+underline_orange="\[\e[91;4m\]"
+
+background_black="\[\e[40m\]"
+background_red="\[\e[41m\]"
+background_green="\[\e[42m\]"
+background_yellow="\[\e[43m\]"
+background_blue="\[\e[44m\]"
+background_purple="\[\e[45m\]"
+background_cyan="\[\e[46m\]"
+background_white="\[\e[47;1m\]"
+background_orange="\[\e[101m\]"
+
+normal="\[\e[0m\]"
+reset_color="\[\e[39m\]"
+
+# These colors are meant to be used with `echo -e`
+echo_black="\033[0;30m"
+echo_red="\033[0;31m"
+echo_green="\033[0;32m"
+echo_yellow="\033[0;33m"
+echo_blue="\033[0;34m"
+echo_purple="\033[0;35m"
+echo_cyan="\033[0;36m"
+echo_white="\033[0;37;1m"
+echo_orange="\033[0;91m"
+
+echo_bold_black="\033[30;1m"
+echo_bold_red="\033[31;1m"
+echo_bold_green="\033[32;1m"
+echo_bold_yellow="\033[33;1m"
+echo_bold_blue="\033[34;1m"
+echo_bold_purple="\033[35;1m"
+echo_bold_cyan="\033[36;1m"
+echo_bold_white="\033[37;1m"
+echo_bold_orange="\033[91;1m"
+
+echo_underline_black="\033[30;4m"
+echo_underline_red="\033[31;4m"
+echo_underline_green="\033[32;4m"
+echo_underline_yellow="\033[33;4m"
+echo_underline_blue="\033[34;4m"
+echo_underline_purple="\033[35;4m"
+echo_underline_cyan="\033[36;4m"
+echo_underline_white="\033[37;4m"
+echo_underline_orange="\033[91;4m"
+
+echo_background_black="\033[40m"
+echo_background_red="\033[41m"
+echo_background_green="\033[42m"
+echo_background_yellow="\033[43m"
+echo_background_blue="\033[44m"
+echo_background_purple="\033[45m"
+echo_background_cyan="\033[46m"
+echo_background_white="\033[47;1m"
+echo_background_orange="\033[101m"
+
+echo_normal="\033[0m"
+echo_reset_color="\033[39m"
diff --git a/themes/command_duration.theme.bash b/themes/command_duration.theme.bash
new file mode 100644
index 00000000..cf91785c
--- /dev/null
+++ b/themes/command_duration.theme.bash
@@ -0,0 +1,69 @@
+# shellcheck shell=bash
+
+if [ -z "$BASH_IT_COMMAND_DURATION" ] || [ "$BASH_IT_COMMAND_DURATION" != true ]; then
+	_command_duration() {
+		echo -n
+	}
+	return
+fi
+
+# Define tmp dir and file
+COMMAND_DURATION_TMPDIR="${TMPDIR:-/tmp}"
+COMMAND_DURATION_FILE="${COMMAND_DURATION_FILE:-$COMMAND_DURATION_TMPDIR/bashit_theme_execution_$BASHPID}"
+
+COMMAND_DURATION_ICON=${COMMAND_DURATION_ICON:-'  '}
+COMMAND_DURATION_MIN_SECONDS=${COMMAND_DURATION_MIN_SECONDS:-'1'}
+
+trap _command_duration_delete_temp_file EXIT HUP INT TERM
+
+_command_duration_delete_temp_file() {
+	if [[ -f "$COMMAND_DURATION_FILE" ]]; then
+		rm -f "$COMMAND_DURATION_FILE"
+	fi
+}
+
+_command_duration_pre_exec() {
+	date +%s.%1N > "$COMMAND_DURATION_FILE"
+}
+
+_command_duration() {
+	local command_duration command_start current_time
+	local minutes seconds deciseconds
+	local command_start_sseconds current_time_seconds command_start_deciseconds current_time_deciseconds
+	current_time=$(date +%s.%1N)
+
+	if [[ -f "$COMMAND_DURATION_FILE" ]]; then
+		command_start=$(< "$COMMAND_DURATION_FILE")
+		command_start_sseconds=${command_start%.*}
+		current_time_seconds=${current_time%.*}
+
+		command_start_deciseconds=$((10#${command_start#*.}))
+		current_time_deciseconds=$((10#${current_time#*.}))
+
+		# seconds
+		command_duration=$((current_time_seconds - command_start_sseconds))
+
+		if ((current_time_deciseconds >= command_start_deciseconds)); then
+			deciseconds=$(((current_time_deciseconds - command_start_deciseconds)))
+		else
+			((command_duration -= 1))
+			deciseconds=$((10 - ((command_start_deciseconds - current_time_deciseconds))))
+		fi
+		command rm "$COMMAND_DURATION_FILE"
+	else
+		command_duration=0
+	fi
+
+	if ((command_duration > 0)); then
+		minutes=$((command_duration / 60))
+		seconds=$((command_duration % 60))
+	fi
+
+	if ((minutes > 0)); then
+		printf "%s%s%dm %ds" "$COMMAND_DURATION_ICON" "$COMMAND_DURATION_COLOR" "$minutes" "$seconds"
+	elif ((seconds >= COMMAND_DURATION_MIN_SECONDS)); then
+		printf "%s%s%d.%01ds" "$COMMAND_DURATION_ICON" "$COMMAND_DURATION_COLOR" "$seconds" "$deciseconds"
+	fi
+}
+
+preexec_functions+=(_command_duration_pre_exec)
-- 
2.37.0

