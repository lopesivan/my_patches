From 1d2f89ff0aeeb82cc57b164ec955bc4cafdf80a9 Mon Sep 17 00:00:00 2001
From: Ivan Lopes <lopesivan.ufrj@gmail.com>
Date: Sat, 9 Jul 2022 20:50:02 -0300
Subject: [PATCH] custom

---
 .gitignore                                    |    6 -
 aliases/available/ag.aliases.bash             |    2 +-
 aliases/available/ansible.aliases.bash        |    2 +-
 aliases/available/apt.aliases.bash            |    6 +-
 aliases/available/atom.aliases.bash           |    2 +-
 aliases/available/bash-it.aliases.bash        |    2 +-
 aliases/available/bolt.aliases.bash           |    2 +-
 aliases/available/bundler.aliases.bash        |    2 +-
 aliases/available/clipboard.aliases.bash      |    1 +
 aliases/available/composer.aliases.bash       |    2 +-
 aliases/available/curl.aliases.bash           |   28 +-
 aliases/available/developer.aliases.bash      |   78 +
 aliases/available/dnf.aliases.bash            |    1 +
 aliases/available/docker-compose.aliases.bash |    2 +-
 aliases/available/docker.aliases.bash         |   44 +-
 aliases/available/emacs.aliases.bash          |   24 +-
 aliases/available/fuck.aliases.bash           |    6 +-
 aliases/available/general.aliases.bash        |   74 +-
 aliases/available/git.aliases.bash            |    4 +-
 aliases/available/gitsvn.aliases.bash         |    2 +-
 aliases/available/heroku.aliases.bash         |    2 +-
 aliases/available/hg.aliases.bash             |    2 +-
 aliases/available/homebrew-cask.aliases.bash  |    6 +-
 aliases/available/homebrew.aliases.bash       |    6 +-
 aliases/available/homesick.aliases.bash       |    3 +-
 aliases/available/jitsu.aliases.bash          |    2 +-
 aliases/available/kubectl.aliases.bash        |   35 +-
 aliases/available/laravel.aliases.bash        |    4 +-
 aliases/available/maven.aliases.bash          |    2 +-
 aliases/available/msys2.aliases.bash          |    7 +-
 aliases/available/mutt.aliases.bash           |   11 +
 aliases/available/node.aliases.bash           |    2 +-
 aliases/available/npm.aliases.bash            |    2 +-
 aliases/available/osx.aliases.bash            |   42 +-
 aliases/available/phoenix.aliases.bash        |    2 +-
 aliases/available/puppet.aliases.bash         |    2 +-
 aliases/available/pyrocms.aliases.bash        |  180 +-
 aliases/available/rails.aliases.bash          |    6 +-
 aliases/available/redis.aliases.bash          |   23 +
 aliases/available/svn.aliases.bash            |    2 +-
 aliases/available/systemd.aliases.bash        |   36 +-
 aliases/available/terraform.aliases.bash      |    6 +-
 aliases/available/terragrunt.aliases.bash     |    6 +-
 aliases/available/textmate.aliases.bash       |   12 +-
 aliases/available/tmux.aliases.bash           |    2 +-
 aliases/available/todo.txt-cli.aliases.bash   |   12 +-
 aliases/available/uuidgen.aliases.bash        |   12 +-
 aliases/available/vagrant.aliases.bash        |    2 +-
 aliases/available/vault.aliases.bash          |    2 +-
 aliases/available/vim.aliases.bash            |   47 +-
 aliases/available/wine.aliases.bash           |    6 +
 aliases/available/xclip.aliases.bash          |   44 +
 aliases/available/yarn.aliases.bash           |    2 +-
 completion/available/awscli.completion.bash   |    3 +-
 completion/available/bash-it.completion.bash  |  221 ++-
 completion/available/brew.completion.bash     |   25 +-
 completion/available/cht.completion.bash      |   49 +
 completion/available/defaults.completion.bash |  178 +-
 completion/available/flutter.completion.bash  |    4 +-
 completion/available/iprj.completion.bash     |    9 +
 completion/available/knife.completion.bash    |    4 +-
 completion/available/pipenv.completion.bash   |    2 +-
 completion/available/svn.completion.bash      | 1546 ++++++++++++++++-
 completion/available/system.completion.bash   |   77 +-
 completion/available/tldr.completion.bash     |   43 +
 .../available/tmuxinator.completion.bash      |   25 +
 completion/available/ttjava.completion.bash   |    7 +
 completion/available/wd.completion.bash       |  163 ++
 completion/available/xp.completion.bash       |   34 +
 custom/cd.bash.DEPRECATED                     |   32 +
 custom/conan.bash                             |    8 +
 custom/environment.bash                       |   27 +
 custom/funcoeszz.bash                         |    8 +
 custom/man.bash                               |   19 +
 custom/tp.bash                                |   35 +
 custom/xfile.bash                             |    9 +
 .../available/alias-completion.plugin.bash    |  106 +-
 plugins/available/android.plugin.bash         |   12 +
 plugins/available/arduino.plugin.bash         |   18 +
 plugins/available/autojump.plugin.bash        |    3 +-
 plugins/available/bangsh.plugin.bash          |    4 +
 plugins/available/base.plugin.bash            |   37 +-
 plugins/available/battery.plugin.bash         |  251 +--
 plugins/available/blesh.plugin.bash           |    2 +-
 plugins/available/brew.plugin.bash            |   27 +
 plugins/available/cabal.plugin.bash           |   26 +
 .../available/cmd-returned-notify.plugin.bash |   20 +-
 plugins/available/dart.plugin.bash            |    7 +
 plugins/available/dirs.plugin.bash            |  123 +-
 plugins/available/fzf.plugin.bash             |    5 +-
 plugins/available/ghcup.plugin.bash           |   10 +
 plugins/available/gif.plugin.bash             |  585 +++----
 plugins/available/git-subrepo.plugin.bash     |    9 +-
 plugins/available/goenv.plugin.bash           |    4 +
 plugins/available/gradle.plugin.bash          |   21 +-
 plugins/available/groovy.plugin.bash          |   10 +
 plugins/available/history-search.plugin.bash  |    1 +
 .../history-substring-search.plugin.bash      |    1 +
 plugins/available/history.plugin.bash         |   29 +-
 plugins/available/java.plugin.bash            |   12 +-
 plugins/available/jbang.plugin.bash           |   10 +
 plugins/available/jekyll.plugin.bash          |  625 ++++---
 plugins/available/keycode.plugin.bash         |   52 +
 plugins/available/latex.plugin.bash           |   24 +-
 plugins/available/luaenv.plugin.bash          |   12 +
 plugins/available/man.plugin.bash             |   20 +-
 plugins/available/ndenv.plugin.bash           |   12 +
 plugins/available/nginx.plugin.bash           |   91 +-
 plugins/available/osx-timemachine.plugin.bash |  121 +-
 plugins/available/osx.plugin.bash             |  230 ++-
 plugins/available/pandoc.plugin.bash          |   11 +
 plugins/available/perl5.plugin.bash           |   16 +
 plugins/available/plenv.plugin.bash           |   18 +-
 plugins/available/projects.plugin.bash        |  126 +-
 plugins/available/proxy.plugin.bash           |  175 +-
 plugins/available/pyenv.plugin.bash           |   33 +-
 plugins/available/python.plugin.bash          |   45 +-
 plugins/available/rakudobrew.plugin.bash      |    9 +
 plugins/available/roo.plugin.bash             |    9 +
 plugins/available/rustup.plugin.bash          |   18 +
 plugins/available/todo.plugin.bash            |   12 +-
 plugins/available/xterm.plugin.bash           |    6 +-
 themes/.nvimlog                               |    0
 themes/90210/90210.theme.bash                 |   19 +-
 themes/atomic/atomic.theme.bash               |  266 ++-
 themes/bakke/bakke.theme.bash                 |   20 +-
 themes/barbuk/barbuk.theme.bash               |  167 +-
 themes/base.theme.bash                        |  552 +++---
 themes/bira/bira.theme.bash                   |   22 +-
 themes/bobby-python/bobby-python.theme.bash   |   29 +-
 themes/bobby/bobby.theme.bash                 |   41 +-
 themes/brunton/brunton.theme.bash             |   31 +-
 themes/candy/candy.theme.bash                 |   10 +-
 themes/codeword/codeword.theme.bash           |   26 +-
 themes/colors.theme.bash                      |  272 +++
 themes/command_duration.theme.bash            |   69 +
 .../doubletime_multiline.theme.bash           |    2 +-
 .../doubletime_multiline_pyonly.theme.bash    |    2 +-
 themes/easy/easy.theme.bash                   |   25 +-
 themes/essential/essential.theme.bash         |  137 +-
 themes/githelpers.theme.bash                  |  255 +--
 themes/gitline/powerline.base.bash            |    2 +
 themes/norbu/norbu.theme.bash                 |   30 +-
 themes/p4helpers.theme.bash                   |   20 +-
 themes/pete/pete.theme.bash                   |   17 +-
 .../powerline-plain/powerline-plain.base.bash |    2 +-
 .../powerline-plain.theme.bash                |   19 +-
 themes/powerline/powerline.base.bash          |   37 +-
 themes/pure/pure.theme.bash                   |   42 +-
 themes/purity/purity.theme.bash               |   46 +-
 150 files changed, 5829 insertions(+), 2677 deletions(-)
 create mode 100644 aliases/available/developer.aliases.bash
 create mode 100644 aliases/available/mutt.aliases.bash
 create mode 100644 aliases/available/redis.aliases.bash
 create mode 100644 aliases/available/wine.aliases.bash
 create mode 100644 aliases/available/xclip.aliases.bash
 create mode 100644 completion/available/cht.completion.bash
 create mode 100644 completion/available/iprj.completion.bash
 create mode 100644 completion/available/tldr.completion.bash
 create mode 100755 completion/available/tmuxinator.completion.bash
 create mode 100644 completion/available/ttjava.completion.bash
 create mode 100644 completion/available/wd.completion.bash
 create mode 100644 completion/available/xp.completion.bash
 create mode 100644 custom/cd.bash.DEPRECATED
 create mode 100644 custom/conan.bash
 create mode 100644 custom/environment.bash
 create mode 100644 custom/funcoeszz.bash
 create mode 100644 custom/man.bash
 create mode 100644 custom/tp.bash
 create mode 100644 custom/xfile.bash
 create mode 100644 plugins/available/android.plugin.bash
 create mode 100644 plugins/available/arduino.plugin.bash
 create mode 100644 plugins/available/bangsh.plugin.bash
 create mode 100644 plugins/available/brew.plugin.bash
 create mode 100644 plugins/available/cabal.plugin.bash
 create mode 100644 plugins/available/dart.plugin.bash
 create mode 100644 plugins/available/ghcup.plugin.bash
 create mode 100644 plugins/available/groovy.plugin.bash
 create mode 100644 plugins/available/jbang.plugin.bash
 create mode 100644 plugins/available/keycode.plugin.bash
 create mode 100644 plugins/available/luaenv.plugin.bash
 create mode 100644 plugins/available/ndenv.plugin.bash
 create mode 100644 plugins/available/pandoc.plugin.bash
 create mode 100644 plugins/available/perl5.plugin.bash
 create mode 100644 plugins/available/rakudobrew.plugin.bash
 create mode 100644 plugins/available/roo.plugin.bash
 create mode 100644 plugins/available/rustup.plugin.bash
 create mode 100644 themes/.nvimlog
 create mode 100644 themes/colors.theme.bash
 create mode 100644 themes/command_duration.theme.bash

diff --git a/.gitignore b/.gitignore
index 8e6f12a1..d758ef61 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,13 +1,7 @@
 .atom-build.json
 */enabled/*
 .DS_Store
-custom/*
-!custom/example.bash
 .rvmrc
-aliases/custom.aliases.bash
-completion/custom.completion.bash
-lib/custom.bash
-plugins/custom.plugins.bash
 *.swp
 .*.un~
 bats
diff --git a/aliases/available/ag.aliases.bash b/aliases/available/ag.aliases.bash
index 7f9af7da..e3157f94 100644
--- a/aliases/available/ag.aliases.bash
+++ b/aliases/available/ag.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'the silver searcher (ag) aliases'
 
 ## Summary for args to less:
diff --git a/aliases/available/ansible.aliases.bash b/aliases/available/ansible.aliases.bash
index 04c5d280..1c53a88e 100644
--- a/aliases/available/ansible.aliases.bash
+++ b/aliases/available/ansible.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'ansible abbreviations'
 
 alias ans=ansible
diff --git a/aliases/available/apt.aliases.bash b/aliases/available/apt.aliases.bash
index 1d43ffac..b7ef274c 100644
--- a/aliases/available/apt.aliases.bash
+++ b/aliases/available/apt.aliases.bash
@@ -6,8 +6,10 @@ cite 'about-alias'
 about-alias 'Apt and dpkg aliases for Ubuntu and Debian distros.'
 
 # set apt aliases
-function _set_pkg_aliases() {
-	if _command_exists apt; then
+function _set_pkg_aliases()
+{
+	if _command_exists apt
+	then
 		alias apts='apt-cache search'
 		alias aptshow='apt-cache show'
 		alias aptinst='sudo apt-get install -V'
diff --git a/aliases/available/atom.aliases.bash b/aliases/available/atom.aliases.bash
index 6868e2cc..8d70cffa 100644
--- a/aliases/available/atom.aliases.bash
+++ b/aliases/available/atom.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'Atom.io editor abbreviations'
 
 alias a='atom'
diff --git a/aliases/available/bash-it.aliases.bash b/aliases/available/bash-it.aliases.bash
index 1f16638b..d2975667 100644
--- a/aliases/available/bash-it.aliases.bash
+++ b/aliases/available/bash-it.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite about-alias
 about-alias 'Aliases for the bash-it command (these aliases are automatically included with the "general" aliases)'
 
 # Common misspellings of bash-it
diff --git a/aliases/available/bolt.aliases.bash b/aliases/available/bolt.aliases.bash
index 556dd7fe..8490f710 100644
--- a/aliases/available/bolt.aliases.bash
+++ b/aliases/available/bolt.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'puppet bolt aliases'
 
 # Aliases
diff --git a/aliases/available/bundler.aliases.bash b/aliases/available/bundler.aliases.bash
index 1eb00862..fc20f4ff 100644
--- a/aliases/available/bundler.aliases.bash
+++ b/aliases/available/bundler.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'ruby bundler'
 
 # Bundler Commands
diff --git a/aliases/available/clipboard.aliases.bash b/aliases/available/clipboard.aliases.bash
index 2a5c3e8c..4c7e6f5b 100644
--- a/aliases/available/clipboard.aliases.bash
+++ b/aliases/available/clipboard.aliases.bash
@@ -1,4 +1,5 @@
 # shellcheck shell=bash
+cite 'about-alias'
 about-alias 'xclip shortcuts'
 
 alias pbcopy="xclip -selection clipboard"
diff --git a/aliases/available/composer.aliases.bash b/aliases/available/composer.aliases.bash
index 85401abb..5ccb2e24 100644
--- a/aliases/available/composer.aliases.bash
+++ b/aliases/available/composer.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'common composer abbreviations'
 
 # Aliases
diff --git a/aliases/available/curl.aliases.bash b/aliases/available/curl.aliases.bash
index a270e416..a6b2b344 100644
--- a/aliases/available/curl.aliases.bash
+++ b/aliases/available/curl.aliases.bash
@@ -1,19 +1,23 @@
-# shellcheck shell=bash
+#!/bin/bash
+
+cite 'about-alias'
 about-alias 'Curl aliases for convenience.'
 
 # set apt aliases
-function _set_pkg_aliases() {
-	if _command_exists curl; then
+function _set_pkg_aliases()
+{
+	if _command_exists curl
+	then
 		# follow redirects
-		alias cl='curl -L'
-		# follow redirects, download as original name
-		alias clo='curl -L -O'
-		# follow redirects, download as original name, continue
-		alias cloc='curl -L -C - -O'
-		# follow redirects, download as original name, continue, retry 5 times
-		alias clocr='curl -L -C - -O --retry 5'
-		# follow redirects, fetch banner
-		alias clb='curl -L -I'
+                alias cl='curl -L'
+                # follow redirects, download as original name
+                alias clo='curl -L -O'
+                # follow redirects, download as original name, continue
+                alias cloc='curl -L -C - -O'
+                # follow redirects, download as original name, continue, retry 5 times
+                alias clocr='curl -L -C - -O --retry 5'
+                # follow redirects, fetch banner
+                alias clb='curl -L -I'
 		# see only response headers from a get request
 		alias clhead='curl -D - -so /dev/null'
 	fi
diff --git a/aliases/available/developer.aliases.bash b/aliases/available/developer.aliases.bash
new file mode 100644
index 00000000..a0624c2f
--- /dev/null
+++ b/aliases/available/developer.aliases.bash
@@ -0,0 +1,78 @@
+cite 'about-alias'
+about-alias 'developer aliases'
+
+alias matlab='/opt/R2020b/bin/matlab'
+alias manview='groff -Tascii -man'
+alias less='less -r'                                   # raw control characters
+alias whence='type -a'                                 # where, of a sort
+alias grep='grep --color'                              # show differences in colour
+#alias http-server='python -m SimpleHTTPServer 8000'
+#alias odoc='evince'
+alias odoc='zathura'
+alias oimg='sxiv'
+alias docs='DISPLAY=:0.0 zeal'
+# alias img='LD_LIBRARY_PATH=/usr/local/lib img2sixel'
+alias pst="env PS_ARGS=%cpu,%mem,lstart pst"
+alias calc='bc -l ~/.config/bc/*'
+alias brilho='PYENV_VERSION=system brightness-controller'
+
+alias workspace.restart='sudo systemctl restart workspace.service'
+alias sdcv='sdcv -c -2 $HOME/.config/nvim/dictionary/sdcv'
+alias pt-en='sdcv -u "Portuguese - English"'
+alias en-pt='sdcv -u "English-Portuguese"'
+alias ls-mem='ps axch -o cmd:15,%mem --sort=-%mem'
+alias ls-cpu='ps axch -o cmd:15,%cpu --sort=-%cpu'
+alias game='mednafen'
+alias git.nvim='/usr/bin/git --git-dir=$HOME/developer/dotfiles/.nvim --work-tree=$HOME/.config/nvim'
+
+# commands
+reload-keynav() { killall keynav ; keynav daemonize ;}
+ekeynav() { nvim ~/.keynavrc ;}
+ekeynav-macros() { nvim ~/.keynav_macros ;}
+egit() { nvim ~/.gitconfig ;}
+
+# Some shortcuts for different directory listings
+alias ls='ls -hF --color=tty'                          # classify files in colour
+alias dir='ls -d */'
+alias vdir='ls --color=auto --format=long'
+alias ll='ls -l'                                       # long list
+alias la='ls -A'                                       # all but . and ..
+alias l='ls -CF'                                       #
+alias lspermissions='stat -c "%a %n"'
+
+alias logout-gnome='gnome-session-quit --logout'
+alias desliga='systemctl enable poweroff.target'
+#                sudo service lightdm restart
+alias x.restart='sudo service lightdm restart'
+#alias asciiflow="google-chrome file:///${HOME}/developer/asciiflow2/index.html"
+
+alias slide='lookatme --no-ext-warn'
+# alias nf='iprj new file --list'
+
+alias rec='arecord -c 1 -r 48000 -f S16_LE -D "hw:CARD=Loopback,DEV=1,SUBDEV=0"'
+alias mic.server='sudo micclient-ubuntu-x86_64 -t wifi 192.168.2.104'
+alias ei3='vim ~/.config/i3/config'
+alias egit='vim ~/.gitconfig'
+alias xevkb="xev -event keyboard"
+alias ccat="highlight --out-format=ansi" # Color cat - print file with syntax highlighting.
+
+alias scanner='scangearmp'
+alias nw="i3-msg workspace $(wmctrl -d | rev | cut -c 1 | awk -v RS='\\s+' '{ a[$1] } END { for(i = 1; i in a; ++i); print i }')"
+#alias r='ranger --cmd "set show_hidden=true"'
+alias mvi='mpv -profile image'
+#xhost +
+#alias vp='xhost +; sudo su visualparadigm -c /opt/visualparadigm/Visual_Paradigm_14.2/bin/Visual_Paradigm'
+alias mux='tmuxinator'
+alias audio-hdmi='pacmd set-card-profile 0 "output:hdmi-stereo"'
+alias audio-analog='pacmd set-card-profile 0 "output:analog-stereo"'
+alias audio-lx3000='pacmd set-card-profile 1 "output:analog-stereo"'
+
+alias xopen='xdg-open'
+alias vp='/opt/Visual_Paradigm_16.2/bin/Visual_Paradigm'
+
+alias godarwin='GOOS=darwin GOARCH=amd64 go'
+alias golinux='GOOS=linux GOARCH=amd64 go'
+alias goraspbian='GOOS=linux GOARCH=arm GOARM=7 go'
+#alias terminal="rxvt -fn \"xft:InconsolataGo Nerd Font Mono:size=31:hinting=true:hintstyle=Regular:minspace=False\" -fb \"xft:InconsolataGo Nerd Font Mono:size=31:hinting=true:hintstyle=Bold\""
+alias terminal="rxvt -fn \"xft:DroidSansMono Nerd Font Mono:pixelsize=31:hinting=true:hintstyle=Book\""
+# vi:set nu nowrap:
diff --git a/aliases/available/dnf.aliases.bash b/aliases/available/dnf.aliases.bash
index 25007c23..9d9f0267 100644
--- a/aliases/available/dnf.aliases.bash
+++ b/aliases/available/dnf.aliases.bash
@@ -1,4 +1,5 @@
 # shellcheck shell=bash
+cite 'about-alias'
 about-alias 'dnf aliases for fedora 22+ distros'
 
 alias dnfl="dnf list"            # List packages
diff --git a/aliases/available/docker-compose.aliases.bash b/aliases/available/docker-compose.aliases.bash
index a2f637c0..3583be8f 100644
--- a/aliases/available/docker-compose.aliases.bash
+++ b/aliases/available/docker-compose.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'docker-compose abbreviations'
 
 alias dco="docker-compose"
diff --git a/aliases/available/docker.aliases.bash b/aliases/available/docker.aliases.bash
index 1c49207f..9f005aa7 100644
--- a/aliases/available/docker.aliases.bash
+++ b/aliases/available/docker.aliases.bash
@@ -1,32 +1,32 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'docker abbreviations'
 
 alias dk='docker'
-alias dklc='docker ps -l'                                                            # List last Docker container
-alias dklcid='docker ps -l -q'                                                       # List last Docker container ID
-alias dklcip='docker inspect -f "{{.NetworkSettings.IPAddress}}" $(docker ps -l -q)' # Get IP of last Docker container
-alias dkps='docker ps'                                                               # List running Docker containers
-alias dkpsa='docker ps -a'                                                           # List all Docker containers
-alias dki='docker images'                                                            # List Docker images
-alias dkrmac='docker rm $(docker ps -a -q)'                                          # Delete all Docker containers
+alias dklc='docker ps -l'  # List last Docker container
+alias dklcid='docker ps -l -q'  # List last Docker container ID
+alias dklcip='docker inspect -f "{{.NetworkSettings.IPAddress}}" $(docker ps -l -q)'  # Get IP of last Docker container
+alias dkps='docker ps'  # List running Docker containers
+alias dkpsa='docker ps -a'  # List all Docker containers
+alias dki='docker images'  # List Docker images
+alias dkrmac='docker rm $(docker ps -a -q)'  # Delete all Docker containers
 
 case $OSTYPE in
-	darwin* | *bsd* | *BSD*)
-		alias dkrmui='docker images -q -f dangling=true | xargs docker rmi' # Delete all untagged Docker images
-		;;
-	*)
-		alias dkrmui='docker images -q -f dangling=true | xargs -r docker rmi' # Delete all untagged Docker images
-		;;
+  darwin*|*bsd*|*BSD*)
+    alias dkrmui='docker images -q -f dangling=true | xargs docker rmi'  # Delete all untagged Docker images
+    ;;
+  *)
+    alias dkrmui='docker images -q -f dangling=true | xargs -r docker rmi'  # Delete all untagged Docker images
+    ;;
 esac
 
-if _bash-it-component-item-is-enabled plugin docker; then
-	# Function aliases from docker plugin:
-	alias dkrmlc='docker-remove-most-recent-container' # Delete most recent (i.e., last) Docker container
-	alias dkrmall='docker-remove-stale-assets'         # Delete all untagged images and exited containers
-	alias dkrmli='docker-remove-most-recent-image'     # Delete most recent (i.e., last) Docker image
-	alias dkrmi='docker-remove-images'                 # Delete images for supplied IDs or all if no IDs are passed as arguments
-	alias dkideps='docker-image-dependencies'          # Output a graph of image dependencies using Graphiz
-	alias dkre='docker-runtime-environment'            # List environmental variables of the supplied image ID
+if [ ! -z "$(command ls "${BASH_IT}/enabled/"{[0-9][0-9][0-9]${BASH_IT_LOAD_PRIORITY_SEPARATOR}docker,docker}.plugin.bash 2>/dev/null | head -1)" ]; then
+# Function aliases from docker plugin:
+    alias dkrmlc='docker-remove-most-recent-container'  # Delete most recent (i.e., last) Docker container
+    alias dkrmall='docker-remove-stale-assets'  # Delete all untagged images and exited containers
+    alias dkrmli='docker-remove-most-recent-image'  # Delete most recent (i.e., last) Docker image
+    alias dkrmi='docker-remove-images'  # Delete images for supplied IDs or all if no IDs are passed as arguments
+    alias dkideps='docker-image-dependencies'  # Output a graph of image dependencies using Graphiz
+    alias dkre='docker-runtime-environment'  # List environmental variables of the supplied image ID
 fi
 alias dkelc='docker exec -it $(dklcid) bash --login' # Enter last container (works with Docker 1.3 and above)
 alias dkrmflast='docker rm -f $(dklcid)'
diff --git a/aliases/available/emacs.aliases.bash b/aliases/available/emacs.aliases.bash
index a4e4111a..f8e1259b 100644
--- a/aliases/available/emacs.aliases.bash
+++ b/aliases/available/emacs.aliases.bash
@@ -1,16 +1,16 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'emacs editor'
 
 case $OSTYPE in
-	linux*)
-		alias em='emacs'
-		alias en='emacs -nw'
-		alias e='emacsclient -n'
-		alias et='emacsclient -t'
-		alias ed='emacs --daemon'
-		alias E='SUDO_EDITOR=emacsclient sudo -e'
-		;;
-	darwin*)
-		alias em='open -a emacs'
-		;;
+  linux*)
+    alias em='emacs'
+    alias en='emacs -nw'
+    alias e='emacsclient -n'
+    alias et='emacsclient -t'
+    alias ed='emacs --daemon'
+    alias E='SUDO_EDITOR=emacsclient sudo -e'
+    ;;
+  darwin*)
+    alias em='open -a emacs'
+    ;;
 esac
diff --git a/aliases/available/fuck.aliases.bash b/aliases/available/fuck.aliases.bash
index 4cfa52d8..495ea851 100644
--- a/aliases/available/fuck.aliases.bash
+++ b/aliases/available/fuck.aliases.bash
@@ -1,9 +1,9 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'fuck/please to retry last command with sudo'
 
 # Play nicely with 'thefuck' plugin
-if ! _command_exists fuck; then
-	alias fuck='sudo $(fc -ln -1)'
+if ! _command_exists fuck ; then
+    alias fuck='sudo $(fc -ln -1)'
 fi
 alias please=fuck
 alias plz=please
diff --git a/aliases/available/general.aliases.bash b/aliases/available/general.aliases.bash
index b4934489..f4ebcafb 100644
--- a/aliases/available/general.aliases.bash
+++ b/aliases/available/general.aliases.bash
@@ -1,45 +1,50 @@
-# shellcheck shell=bash
+cite about-alias
 about-alias 'general aliases'
 
-if command ls --color -d . &> /dev/null; then
-	alias ls='ls --color=auto'
-	# BSD `ls` doesn't need an argument (`-G`) when `$CLICOLOR` is set.
+if ls --color -d . &> /dev/null
+then
+  alias ls="ls --color=auto"
+elif ls -G -d . &> /dev/null
+then
+  alias ls='ls -G'        # Compact view, show colors
 fi
 
 # List directory contents
 alias sl=ls
-alias la='ls -AF' # Compact view, show hidden
+alias la='ls -AF'       # Compact view, show hidden
 alias ll='ls -al'
 alias l='ls -a'
 alias l1='ls -1'
-alias lf='ls -F'
 
-alias _='sudo'
+alias _="sudo"
 
 # Shortcuts to edit startup files
-alias vbrc='${VISUAL:-vim} ~/.bashrc'
-alias vbpf='${VISUAL:-vim} ~/.bash_profile'
+alias vbrc="vim ~/.bashrc"
+alias vbpf="vim ~/.bash_profile"
 
 # colored grep
 # Need to check an existing file for a pattern that will be found to ensure
 # that the check works when on an OS that supports the color option
-if command grep --color=auto "a" "${BASH_IT?}"/*.md &> /dev/null; then
-	alias grep='grep --color=auto'
+if grep --color=auto "a" "${BASH_IT}/"*.md &> /dev/null
+then
+  alias grep='grep --color=auto'
 fi
 
-if _command_exists gshuf; then
-	alias shuf=gshuf
+if which gshuf &> /dev/null
+then
+  alias shuf=gshuf
 fi
 
-alias c='clear'
-alias cls='clear'
+# alias c='clear'
+# alias k='clear'
+# alias cls='clear'
 
-alias edit='${EDITOR:-${ALTERNATE_EDITOR:-nano}}'
-alias pager='${PAGER:=less}'
+alias edit="$EDITOR"
+alias pager="$PAGER"
 
-alias q='exit'
+# alias q='exit'
 
-alias irc='${IRC_CLIENT:=irc}'
+alias irc="${IRC_CLIENT:=irc}"
 
 # Language aliases
 alias rb='ruby'
@@ -48,7 +53,7 @@ alias ipy='ipython'
 
 # Pianobar can be found here: http://github.com/PromyLOPh/pianobar/
 
-alias piano='pianobar'
+# alias piano='pianobar'
 
 alias ..='cd ..'         # Go up one directory
 alias cd..='cd ..'       # Common misspelling for going up one directory
@@ -60,8 +65,9 @@ alias -- -='cd -'        # Go back
 alias h='history'
 
 # Tree
-if ! _command_exists tree; then
-	alias tree="find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'"
+if [ ! -x "$(which tree 2>/dev/null)" ]
+then
+  alias tree="find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'"
 fi
 
 # Directory
@@ -69,21 +75,21 @@ alias md='mkdir -p'
 alias rd='rmdir'
 
 # Shorten extract
-alias xt='extract'
+alias xt="extract"
 
 # sudo editors
-alias svim='sudo ${VISUAL:-vim}'
-alias snano='sudo nano'
+alias svim="sudo vim"
+# alias snano="sudo nano"
 
 # Display whatever file is regular file or folder
-function catt() {
-	for i in "$@"; do
-		if [[ -d "$i" ]]; then
-			ls "$i"
-		else
-			cat "$i"
-		fi
-	done
+catt() {
+  for i in "$@"; do
+    if [ -d "$i" ]; then
+      ls "$i"
+    else
+      cat "$i"
+    fi
+  done
 }
 
 # The Bash-it aliases were moved to the `bash-it.aliases.bash` file. The intent of this
@@ -92,5 +98,5 @@ function catt() {
 # aliases and enable just the ones for Bash-it explicitly:
 # bash-it disable alias general
 # bash-it enable alias bash-it
-# shellcheck source-path=SCRIPTDIR
+# shellcheck source=./bash-it.aliases.bash
 source "$BASH_IT/aliases/available/bash-it.aliases.bash"
diff --git a/aliases/available/git.aliases.bash b/aliases/available/git.aliases.bash
index 507037e1..8cafa82b 100644
--- a/aliases/available/git.aliases.bash
+++ b/aliases/available/git.aliases.bash
@@ -1,4 +1,5 @@
 # shellcheck shell=bash
+cite 'about-alias'
 about-alias 'common git abbreviations'
 
 alias g='git'
@@ -130,7 +131,6 @@ alias grb='git rebase'
 alias grbc='git rebase --continue'
 alias grm='git rebase $(get_default_branch)'
 alias grmi='git rebase $(get_default_branch) -i'
-alias grma='GIT_SEQUENCE_EDITOR=: git rebase  $(get_default_branch) -i --autosquash'
 alias gprom='git fetch origin $(get_default_branch) && git rebase origin/$(get_default_branch) && git update-ref refs/heads/$(get_default_branch) origin/$(get_default_branch)' # Rebase with latest remote
 
 # reset
@@ -199,7 +199,7 @@ function gdv() {
 }
 
 function get_default_branch() {
-	if git branch | grep -q '^. main\s*$'; then
+	if git branch | grep -q main; then
 		echo main
 	else
 		echo master
diff --git a/aliases/available/gitsvn.aliases.bash b/aliases/available/gitsvn.aliases.bash
index 3c578445..feb608be 100644
--- a/aliases/available/gitsvn.aliases.bash
+++ b/aliases/available/gitsvn.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'common git-svn abbreviations'
 
 # Aliases
diff --git a/aliases/available/heroku.aliases.bash b/aliases/available/heroku.aliases.bash
index 4c822594..a749d424 100644
--- a/aliases/available/heroku.aliases.bash
+++ b/aliases/available/heroku.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'heroku task abbreviations'
 
 # heroku
diff --git a/aliases/available/hg.aliases.bash b/aliases/available/hg.aliases.bash
index d9101a03..eea819ff 100644
--- a/aliases/available/hg.aliases.bash
+++ b/aliases/available/hg.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'mercurial abbreviations'
 
 alias hs='hg status'
diff --git a/aliases/available/homebrew-cask.aliases.bash b/aliases/available/homebrew-cask.aliases.bash
index 43d206d4..57d8161c 100644
--- a/aliases/available/homebrew-cask.aliases.bash
+++ b/aliases/available/homebrew-cask.aliases.bash
@@ -1,5 +1,7 @@
-# shellcheck shell=bash
-about-alias 'Some aliases for Homebrew Cask'
+# Some aliases for Homebrew Cask
+
+cite 'about-alias'
+about-alias 'homebrew-cask abbreviations'
 
 alias bcin='brew cask install'
 alias bcrm='brew cask uninstall'
diff --git a/aliases/available/homebrew.aliases.bash b/aliases/available/homebrew.aliases.bash
index f35a38d3..15907518 100644
--- a/aliases/available/homebrew.aliases.bash
+++ b/aliases/available/homebrew.aliases.bash
@@ -1,5 +1,7 @@
-# shellcheck shell=bash
-about-alias 'Some aliases for Homebrew'
+# Some aliases for Homebrew
+
+cite 'about-alias'
+about-alias 'homebrew abbreviations'
 
 alias bup='brew update && brew upgrade'
 alias bout='brew outdated'
diff --git a/aliases/available/homesick.aliases.bash b/aliases/available/homesick.aliases.bash
index 00101eed..548efc3b 100644
--- a/aliases/available/homesick.aliases.bash
+++ b/aliases/available/homesick.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'homesick aliases'
 
 # Aliases
@@ -19,5 +19,6 @@ alias sikpsh="homesick push dotfiles"
 alias sikrc="homesick rc dotfiles"
 alias sikpth="homesick show_path dotfiles"
 alias sikst="homesick status dotfiles"
+alias siktrk="homesick track $1 dotfiles"
 alias sikulnk="homesick unlink dotfiles"
 alias sikv="homesick version"
diff --git a/aliases/available/jitsu.aliases.bash b/aliases/available/jitsu.aliases.bash
index f056e749..91e96849 100644
--- a/aliases/available/jitsu.aliases.bash
+++ b/aliases/available/jitsu.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'jitsu task abbreviations'
 
 # jitsu
diff --git a/aliases/available/kubectl.aliases.bash b/aliases/available/kubectl.aliases.bash
index aaca4ca2..440a9041 100644
--- a/aliases/available/kubectl.aliases.bash
+++ b/aliases/available/kubectl.aliases.bash
@@ -1,20 +1,25 @@
-# shellcheck shell=bash
+#!/bin/bash
+#
+# -binaryanomaly
+
+cite 'about-alias'
 about-alias 'kubectl aliases'
 
-function _set_pkg_aliases() {
-	if _command_exists kubectl; then
-		alias kc='kubectl'
-		alias kcgp='kubectl get pods'
-		alias kcgd='kubectl get deployments'
-		alias kcgn='kubectl get nodes'
-		alias kcdp='kubectl describe pod'
-		alias kcdd='kubectl describe deployment'
-		alias kcdn='kubectl describe node'
-		alias kcgpan='kubectl get pods --all-namespaces'
-		alias kcgdan='kubectl get deployments --all-namespaces'
-		# launches a disposable netshoot pod in the k8s cluster
-		alias kcnetshoot='kubectl run netshoot-$(date +%s) --rm -i --tty --image nicolaka/netshoot -- /bin/bash'
-	fi
+function _set_pkg_aliases()
+{
+  if _command_exists kubectl; then
+    alias kc='kubectl'
+    alias kcgp='kubectl get pods'
+    alias kcgd='kubectl get deployments'
+    alias kcgn='kubectl get nodes'
+    alias kcdp='kubectl describe pod'
+    alias kcdd='kubectl describe deployment'
+    alias kcdn='kubectl describe node'
+    alias kcgpan='kubectl get pods --all-namespaces'
+    alias kcgdan='kubectl get deployments --all-namespaces'
+    # launches a disposable netshoot pod in the k8s cluster
+    alias kcnetshoot='kubectl run netshoot-$(date +%s) --rm -i --tty --image nicolaka/netshoot -- /bin/bash'
+  fi
 }
 
 _set_pkg_aliases
diff --git a/aliases/available/laravel.aliases.bash b/aliases/available/laravel.aliases.bash
index 50a9749f..75a51a01 100644
--- a/aliases/available/laravel.aliases.bash
+++ b/aliases/available/laravel.aliases.bash
@@ -1,9 +1,9 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'laravel artisan abbreviations'
 
 # A list of useful laravel aliases
 
-alias laravel='${HOME?}/.composer/vendor/bin/laravel'
+alias laravel="${HOME}/.composer/vendor/bin/laravel"
 # asset
 alias a:apub='php artisan asset:publish'
 
diff --git a/aliases/available/maven.aliases.bash b/aliases/available/maven.aliases.bash
index 737826eb..f8a44a1c 100644
--- a/aliases/available/maven.aliases.bash
+++ b/aliases/available/maven.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'maven abbreviations'
 
 alias mci='mvn clean install'
diff --git a/aliases/available/msys2.aliases.bash b/aliases/available/msys2.aliases.bash
index da41cc82..a309a5b2 100644
--- a/aliases/available/msys2.aliases.bash
+++ b/aliases/available/msys2.aliases.bash
@@ -1,4 +1,6 @@
-# shellcheck shell=bash
+#!/bin/bash
+
+cite 'about-alias'
 about-alias 'MSYS2 aliases'
 
 LS_COMMON="-hG"
@@ -7,8 +9,7 @@ LS_COMMON="$LS_COMMON -I NTUSER.DAT\* -I ntuser.dat\*"
 
 # alias
 # setup the main ls alias if we've established common args
-alias ls='command ls ${LS_COMMON:-}'
+test -n "$LS_COMMON" && alias ls="command ls $LS_COMMON"
 alias ll="ls -l"
 alias la="ls -a"
 alias lal="ll -a"
-alias lf="ls -F"
diff --git a/aliases/available/mutt.aliases.bash b/aliases/available/mutt.aliases.bash
new file mode 100644
index 00000000..0e0cb818
--- /dev/null
+++ b/aliases/available/mutt.aliases.bash
@@ -0,0 +1,11 @@
+cite 'about-alias'
+about-alias 'mutt aliases'
+
+alias email='EMAILBOX=uff neomutt'
+alias email.ufrj='EMAILBOX=ufrj neomutt'
+alias email.del='EMAILBOX=del neomutt'
+alias email.poli='EMAILBOX=poli neomutt'
+alias email.hilda='EMAILBOX=hilda neomutt'
+alias email.uerj='EMAILBOX=uerj neomutt'
+
+# vi:set nu nowrap:
diff --git a/aliases/available/node.aliases.bash b/aliases/available/node.aliases.bash
index a9e29743..a1408f26 100644
--- a/aliases/available/node.aliases.bash
+++ b/aliases/available/node.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'the Node.js environment aliases'
 
 # alias to setup nodejs development environment
diff --git a/aliases/available/npm.aliases.bash b/aliases/available/npm.aliases.bash
index 27cf5c9f..bd742d5d 100644
--- a/aliases/available/npm.aliases.bash
+++ b/aliases/available/npm.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'common npm abbreviations'
 
 # Aliases
diff --git a/aliases/available/osx.aliases.bash b/aliases/available/osx.aliases.bash
index 0a16c06f..5e30bc7c 100644
--- a/aliases/available/osx.aliases.bash
+++ b/aliases/available/osx.aliases.bash
@@ -1,28 +1,27 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'osx-specific aliases'
 
 # Desktop Programs
-alias fireworks='open -a "/Applications/Adobe Fireworks CS3/Adobe Fireworks CS3.app"'
-alias photoshop='open -a "/Applications/Adobe Photoshop CS3/Adobe Photoshop.app"'
-alias preview='open -a "${PREVIEW?}"'
-alias xcode='open -a "/Applications/XCode.app"'
-alias filemerge='open -a "/Developer/Applications/Utilities/FileMerge.app"'
-alias safari='open -a safari'
-alias firefox='open -a firefox'
-alias chrome='open -a "Google Chrome"'
-alias chromium='open -a chromium'
-alias brave='open -a "Brave Browser"'
-alias dashcode='open -a dashcode'
+alias fireworks="open -a '/Applications/Adobe Fireworks CS3/Adobe Fireworks CS3.app'"
+alias photoshop="open -a '/Applications/Adobe Photoshop CS3/Adobe Photoshop.app'"
+alias preview="open -a '$PREVIEW'"
+alias xcode="open -a '/Applications/XCode.app'"
+alias filemerge="open -a '/Developer/Applications/Utilities/FileMerge.app'"
+alias safari="open -a safari"
+alias firefox="open -a firefox"
+alias chrome="open -a google\ chrome"
+alias chromium="open -a chromium"
+alias dashcode="open -a dashcode"
 alias f='open -a Finder '
 alias fh='open -a Finder .'
 alias textedit='open -a TextEdit'
 alias hex='open -a "Hex Fiend"'
 alias skype='open -a Skype'
 alias mou='open -a Mou'
-alias subl='open -a "Sublime Text"'
+alias subl='open -a Sublime\ Text'
 
-if [[ -s /usr/bin/firefox ]]; then
-	unalias firefox
+if [ -s /usr/bin/firefox ] ; then
+  unalias firefox
 fi
 
 # Requires growlnotify, which can be found in the Growl DMG under "Extras"
@@ -38,20 +37,19 @@ alias whotunes='lsof -r 2 -n -P -F n -c iTunes -a -i TCP@`hostname`:3689'
 alias flush='dscacheutil -flushcache'
 
 # Show/hide hidden files (for Mac OS X Mavericks)
-alias showhidden='defaults write com.apple.finder AppleShowAllFiles TRUE'
-alias hidehidden='defaults write com.apple.finder AppleShowAllFiles FALSE'
+alias showhidden="defaults write com.apple.finder AppleShowAllFiles TRUE"
+alias hidehidden="defaults write com.apple.finder AppleShowAllFiles FALSE"
 
 # From http://apple.stackexchange.com/questions/110343/copy-last-command-in-terminal
-# shellcheck disable=SC2142 # The quoting confuses `shellcheck`...
-alias copyLastCmd="fc -ln -1 | awk '{\$1=\$1}1' ORS='' | pbcopy"
+alias copyLastCmd='fc -ln -1 | awk '\''{$1=$1}1'\'' ORS='\'''\'' | pbcopy'
 
 # Use Finder's Quick Look on a file (^C or space to close)
 alias ql='qlmanage -p 2>/dev/null'
 
 # Mute/Unmute the system volume. Plays nice with all other volume settings.
-alias mute='osascript -e "set volume output muted true"'
-alias unmute='osascript -e "set volume output muted false"'
+alias mute="osascript -e 'set volume output muted true'"
+alias unmute="osascript -e 'set volume output muted false'"
 
 # Pin to the tail of long commands for an audible alert after long processes
 ## curl http://downloads.com/hugefile.zip; lmk
-alias lmk='say "Process complete."'
+alias lmk="say 'Process complete.'"
diff --git a/aliases/available/phoenix.aliases.bash b/aliases/available/phoenix.aliases.bash
index 08cef4f4..64728a2e 100644
--- a/aliases/available/phoenix.aliases.bash
+++ b/aliases/available/phoenix.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'phoenix abbreviations'
 
 # Phoenix Commands
diff --git a/aliases/available/puppet.aliases.bash b/aliases/available/puppet.aliases.bash
index c92d13b1..15b69923 100644
--- a/aliases/available/puppet.aliases.bash
+++ b/aliases/available/puppet.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'puppet aliases'
 
 # Aliases
diff --git a/aliases/available/pyrocms.aliases.bash b/aliases/available/pyrocms.aliases.bash
index 77865a23..d19dff91 100644
--- a/aliases/available/pyrocms.aliases.bash
+++ b/aliases/available/pyrocms.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'pyrocms abbreviations'
 
 ###
@@ -7,146 +7,146 @@ about-alias 'pyrocms abbreviations'
 ###
 
 # general
-alias a:cl="php artisan clear-compiled" # Remove the compiled class file
-alias a:d="php artisan down"            # Put the application into maintenance mode
-alias a:e="php artisan env"             # Display the current framework environment
-alias a:h="php artisan help"            # Displays help for a command
-alias a:i="php artisan install"         # Install the Streams Platform.
-alias a:ls="php artisan list"           # Lists commands
-alias a:mg="php artisan migrate"        # Run the database migrations
-alias a:op="php artisan optimize"       # Optimize the framework for better performance (deprecated)
-alias a:pr="php artisan preset"         # Swap the front-end scaffolding for the application
-alias a:s="php artisan serve"           # Serve the application on the PHP development server
-alias a:u="php artisan up"              # Bring the application out of maintenance mode
+alias a:cl="php artisan clear-compiled"          # Remove the compiled class file
+alias a:d="php artisan down"                     # Put the application into maintenance mode
+alias a:e="php artisan env"                      # Display the current framework environment
+alias a:h="php artisan help"                     # Displays help for a command
+alias a:i="php artisan install"                  # Install the Streams Platform.
+alias a:ls="php artisan list"                    # Lists commands
+alias a:mg="php artisan migrate"                 # Run the database migrations
+alias a:op="php artisan optimize"                # Optimize the framework for better performance (deprecated)
+alias a:pr="php artisan preset"                  # Swap the front-end scaffolding for the application
+alias a:s="php artisan serve"                    # Serve the application on the PHP development server
+alias a:u="php artisan up"                       # Bring the application out of maintenance mode
 
 # addon
-alias a:ad:i="php artisan addon:install"   # Install an addon.
-alias a:ad:p="php artisan addon:publish"   # Publish an the configuration and translations for an addon.
-alias a:ad:r="php artisan addon:reinstall" # Reinstall an addon.
-alias a:ad:u="php artisan addon:uninstall" # Uninstall an addon.
+alias a:ad:i="php artisan addon:install"         # Install an addon.
+alias a:ad:p="php artisan addon:publish"         # Publish an the configuration and translations for an addon.
+alias a:ad:r="php artisan addon:reinstall"       # Reinstall an addon.
+alias a:ad:u="php artisan addon:uninstall"       # Uninstall an addon.
 
 # app
-alias a:ap:n="php artisan app:name"    # Set the application namespace
-alias a:ap:p="php artisan app:publish" # Publish general application override files.
+alias a:ap:n="php artisan app:name"              # Set the application namespace
+alias a:ap:p="php artisan app:publish"           # Publish general application override files.
 
 # assets
-alias a:as:cl="php artisan assets:clear" # Clear compiled public assets.
+alias a:as:cl="php artisan assets:clear"         # Clear compiled public assets.
 
 # auth
-alias a:au:clrs="php artisan auth:clear-resets" # Flush expired password reset tokens
+alias a:au:clrs="php artisan auth:clear-resets"  # Flush expired password reset tokens
 
 # cache
-alias a:ca:cl="php artisan cache:clear" # Flush the application cache
-alias a:ca:f="php artisan cache:forget" # Remove an item from the cache
-alias a:ca:t="php artisan cache:table"  # Create a migration for the cache database table
+alias a:ca:cl="php artisan cache:clear"          # Flush the application cache
+alias a:ca:f="php artisan cache:forget"          # Remove an item from the cache
+alias a:ca:t="php artisan cache:table"           # Create a migration for the cache database table
 
 # config
-alias a:co:ca="php artisan config:cache" # Create a cache file for faster configuration loading
-alias a:co:cl="php artisan config:clear" # Remove the configuration cache file
+alias a:co:ca="php artisan config:cache"         # Create a cache file for faster configuration loading
+alias a:co:cl="php artisan config:clear"         # Remove the configuration cache file
 
 # db
-alias a:db:s="php artisan db:seed" # Seed the database with records
+alias a:db:s="php artisan db:seed"               # Seed the database with records
 
 # env
-alias a:en:s="php artisan env:set" # Set an environmental value.
+alias a:en:s="php artisan env:set"               # Set an environmental value.
 
 # event
-alias a:ev:g="php artisan event:generate" # Generate the missing events and listeners based on registration
+alias a:ev:g="php artisan event:generate"        # Generate the missing events and listeners based on registration
 
 # extension
-alias a:ex:i="php artisan extension:install"   # Install a extension.
-alias a:ex:r="php artisan extension:reinstall" # Reinstall a extension.
-alias a:ex:u="php artisan extension:uninstall" # Uninstall a extension.
+alias a:ex:i="php artisan extension:install"     # Install a extension.
+alias a:ex:r="php artisan extension:reinstall"   # Reinstall a extension.
+alias a:ex:u="php artisan extension:uninstall"   # Uninstall a extension.
 
 # files
-alias a:fi:cl="php artisan files:clean" # Clean missing files from the files table.
+alias a:fi:cl="php artisan files:clean"          # Clean missing files from the files table.
 
 # key
-alias a:ke:g="php artisan key:generate" # Set the application key
+alias a:ke:g="php artisan key:generate"          # Set the application key
 
 # make
-alias a:mk:ad="php artisan make:addon"        # Create a new addon.
-alias a:mk:au="php artisan make:auth"         # Scaffold basic login and registration views and routes
-alias a:mk:cm="php artisan make:command"      # Create a new Artisan command
-alias a:mk:ct="php artisan make:controller"   # Create a new controller class
-alias a:mk:ev="php artisan make:event"        # Create a new event class
-alias a:mk:fa="php artisan make:factory"      # Create a new model factory
-alias a:mk:j="php artisan make:job"           # Create a new job class
-alias a:mk:li="php artisan make:listener"     # Create a new event listener class
-alias a:mk:ma="php artisan make:mail"         # Create a new email class
-alias a:mk:mw="php artisan make:middleware"   # Create a new middleware class
-alias a:mk:mg="php artisan make:migration"    # Create a new migration file
-alias a:mk:md="php artisan make:model"        # Create a new Eloquent model class
-alias a:mk:no="php artisan make:notification" # Create a new notification class
-alias a:mk:po="php artisan make:policy"       # Create a new policy class
-alias a:mk:pr="php artisan make:provider"     # Create a new service provider class
-alias a:mk:rq="php artisan make:request"      # Create a new form request class
-alias a:mk:rs="php artisan make:resource"     # Create a new resource
-alias a:mk:rl="php artisan make:rule"         # Create a new validation rule
-alias a:mk:sd="php artisan make:seeder"       # Create a new seeder class
-alias a:mk:st="php artisan make:stream"       # Make a streams entity namespace.
-alias a:mk:ts="php artisan make:test"         # Create a new test class
+alias a:mk:ad="php artisan make:addon"           # Create a new addon.
+alias a:mk:au="php artisan make:auth"            # Scaffold basic login and registration views and routes
+alias a:mk:cm="php artisan make:command"         # Create a new Artisan command
+alias a:mk:ct="php artisan make:controller"      # Create a new controller class
+alias a:mk:ev="php artisan make:event"           # Create a new event class
+alias a:mk:fa="php artisan make:factory"         # Create a new model factory
+alias a:mk:j="php artisan make:job"              # Create a new job class
+alias a:mk:li="php artisan make:listener"        # Create a new event listener class
+alias a:mk:ma="php artisan make:mail"            # Create a new email class
+alias a:mk:mw="php artisan make:middleware"      # Create a new middleware class
+alias a:mk:mg="php artisan make:migration"       # Create a new migration file
+alias a:mk:md="php artisan make:model"           # Create a new Eloquent model class
+alias a:mk:no="php artisan make:notification"    # Create a new notification class
+alias a:mk:po="php artisan make:policy"          # Create a new policy class
+alias a:mk:pr="php artisan make:provider"        # Create a new service provider class
+alias a:mk:rq="php artisan make:request"         # Create a new form request class
+alias a:mk:rs="php artisan make:resource"        # Create a new resource
+alias a:mk:rl="php artisan make:rule"            # Create a new validation rule
+alias a:mk:sd="php artisan make:seeder"          # Create a new seeder class
+alias a:mk:st="php artisan make:stream"          # Make a streams entity namespace.
+alias a:mk:ts="php artisan make:test"            # Create a new test class
 
 # migrate
-alias a:mg:fr="php artisan migrate:fresh"    # Drop all tables and re-run all migrations
-alias a:mg:i="php artisan migrate:install"   # Create the migration repository
-alias a:mg:rf="php artisan migrate:refresh"  # Reset and re-run all migrations
-alias a:mg:rs="php artisan migrate:reset"    # Rollback all database migrations
-alias a:mg:rl="php artisan migrate:rollback" # Rollback the last database migration
-alias a:mg:st="php artisan migrate:status"   # Show the status of each migration
+alias a:mg:fr="php artisan migrate:fresh"        # Drop all tables and re-run all migrations
+alias a:mg:i="php artisan migrate:install"       # Create the migration repository
+alias a:mg:rf="php artisan migrate:refresh"      # Reset and re-run all migrations
+alias a:mg:rs="php artisan migrate:reset"        # Rollback all database migrations
+alias a:mg:rl="php artisan migrate:rollback"     # Rollback the last database migration
+alias a:mg:st="php artisan migrate:status"       # Show the status of each migration
 
 # module
-alias a:mo:i="php artisan module:install"   # Install a module.
-alias a:mo:r="php artisan module:reinstall" # Reinstall a module.
-alias a:mo:u="php artisan module:uninstall" # Uninstall a module.
+alias a:mo:i="php artisan module:install"        # Install a module.
+alias a:mo:r="php artisan module:reinstall"      # Reinstall a module.
+alias a:mo:u="php artisan module:uninstall"      # Uninstall a module.
 
 # notifications
-alias a:no:tb="php artisan notifications:table" # Create a migration for the notifications table
+alias a:no:tb="php artisan notifications:table"  # Create a migration for the notifications table
 
 # package
-alias a:pk:d="php artisan package:discover" # Rebuild the cached package manifest
+alias a:pk:d="php artisan package:discover"      # Rebuild the cached package manifest
 
 # queue
-alias a:qu:fa="php artisan queue:failed"       # List all of the failed queue jobs
-alias a:qu:ft="php artisan queue:failed-table" # Create a migration for the failed queue jobs database table
-alias a:qu:fl="php artisan queue:flush"        # Flush all of the failed queue jobs
-alias a:qu:fg="php artisan queue:forget"       # Delete a failed queue job
-alias a:qu:li="php artisan queue:listen"       # Listen to a given queue
-alias a:qu:rs="php artisan queue:restart"      # Restart queue worker daemons after their current job
-alias a:qu:rt="php artisan queue:retry"        # Retry a failed queue job
-alias a:qu:tb="php artisan queue:table"        # Create a migration for the queue jobs database table
-alias a:qu:w="php artisan queue:work"          # Start processing jobs on the queue as a daemon
+alias a:qu:fa="php artisan queue:failed"         # List all of the failed queue jobs
+alias a:qu:ft="php artisan queue:failed-table"   # Create a migration for the failed queue jobs database table
+alias a:qu:fl="php artisan queue:flush"          # Flush all of the failed queue jobs
+alias a:qu:fg="php artisan queue:forget"         # Delete a failed queue job
+alias a:qu:li="php artisan queue:listen"         # Listen to a given queue
+alias a:qu:rs="php artisan queue:restart"        # Restart queue worker daemons after their current job
+alias a:qu:rt="php artisan queue:retry"          # Retry a failed queue job
+alias a:qu:tb="php artisan queue:table"          # Create a migration for the queue jobs database table
+alias a:qu:w="php artisan queue:work"            # Start processing jobs on the queue as a daemon
 
 # route
-alias a:ro:ca="php artisan route:cache" # Create a route cache file for faster route registration
-alias a:ro:cl="php artisan route:clear" # Remove the route cache file
-alias a:ro:ls="php artisan route:list"  # List all registered routes
+alias a:ro:ca="php artisan route:cache"          # Create a route cache file for faster route registration
+alias a:ro:cl="php artisan route:clear"          # Remove the route cache file
+alias a:ro:ls="php artisan route:list"           # List all registered routes
 
 # schedule
-alias a:sc:r="php artisan schedule:run" # Run the scheduled commands
+alias a:sc:r="php artisan schedule:run"          # Run the scheduled commands
 
 # scout
-alias a:su:fl="php artisan scout:flush"  # Flush all of the model's records from the index
-alias a:su:im="php artisan scout:import" # Import the given model into the search index
+alias a:su:fl="php artisan scout:flush"          # Flush all of the model's records from the index
+alias a:su:im="php artisan scout:import"         # Import the given model into the search index
 
 # session
-alias a:se:tb="php artisan session:table" # Create a migration for the session database table
+alias a:se:tb="php artisan session:table"        # Create a migration for the session database table
 
 # storage
-alias a:sg:l="php artisan storage:link" # Create a symbolic link from "public/storage" to "storage/app/public"
+alias a:sg:l="php artisan storage:link"          # Create a symbolic link from "public/storage" to "storage/app/public"
 
 # streams
-alias a:st:cl="php artisan streams:cleanup" # Cleanup streams entry models.
-alias a:st:co="php artisan streams:compile" # Compile streams entry models.
-alias a:st:d="php artisan streams:destroy"  # Destroy a namespace.
-alias a:st:p="php artisan streams:publish"  # Publish configuration and translations for streams.
-alias a:st:r="php artisan streams:refresh"  # Refresh streams generated components.
+alias a:st:cl="php artisan streams:cleanup"      # Cleanup streams entry models.
+alias a:st:co="php artisan streams:compile"      # Compile streams entry models.
+alias a:st:d="php artisan streams:destroy"       # Destroy a namespace.
+alias a:st:p="php artisan streams:publish"       # Publish configuration and translations for streams.
+alias a:st:r="php artisan streams:refresh"       # Refresh streams generated components.
 
 # tntsearch
-alias a:tn:im="php artisan tntsearch:import" # Import the given model into the search index
+alias a:tn:im="php artisan tntsearch:import"     # Import the given model into the search index
 
 # vendor
-alias a:ve:p="php artisan vendor:publish" # Publish any publishable assets from vendor packages
+alias a:ve:p="php artisan vendor:publish"        # Publish any publishable assets from vendor packages
 
 # view
-alias a:vi:cl="php artisan view:clear" # Clear all compiled view files
+alias a:vi:cl="php artisan view:clear"           # Clear all compiled view files
diff --git a/aliases/available/rails.aliases.bash b/aliases/available/rails.aliases.bash
index 4de4faff..c776660e 100644
--- a/aliases/available/rails.aliases.bash
+++ b/aliases/available/rails.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'rails abbreviations'
 
 # Rails Commands
@@ -14,9 +14,9 @@ alias rd='rails destroy'
 alias dbm='rake db:migrate'
 
 alias ss='script/server'
-alias ts="thin start" # thin server
+alias ts="thin start"     # thin server
 alias sc='script/console'
 alias restartapp='touch tmp/restart.txt'
-alias restart='touch tmp/restart.txt' # restart passenger
+alias restart='touch tmp/restart.txt'  # restart passenger
 alias devlog='tail -f log/development.log'
 alias taild='tail -f log/development.log' # tail dev log
diff --git a/aliases/available/redis.aliases.bash b/aliases/available/redis.aliases.bash
new file mode 100644
index 00000000..2b1f0cbe
--- /dev/null
+++ b/aliases/available/redis.aliases.bash
@@ -0,0 +1,23 @@
+cite 'about-alias'
+about-alias 'redis aliases'
+
+_redis_list(){
+	redis-cli ZRANGE $1 0 -1
+}
+_redis_zram(){
+	db=$1
+	shift
+	redis-cli zadd $db 1 $1
+}
+
+alias redis.list='_redis_list'
+alias redis.keys='redis-cli KEYS \*'
+alias redis.get='redis-bash-cli get'
+alias redis.set='redis-bash-cli set'
+alias redis.del='redis-bash-cli del'
+alias redis.zadd='_redis_zram'
+
+alias last.list='redis-cli ZRANGE vimmru 0 -1'
+alias last.clean='redis-cli DEL vimmru'
+
+# vi:set nu nowrap:
diff --git a/aliases/available/svn.aliases.bash b/aliases/available/svn.aliases.bash
index 4d3de464..3d6d263e 100644
--- a/aliases/available/svn.aliases.bash
+++ b/aliases/available/svn.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'common svn abbreviations'
 
 # Aliases
diff --git a/aliases/available/systemd.aliases.bash b/aliases/available/systemd.aliases.bash
index 57351ae0..19b0eae6 100644
--- a/aliases/available/systemd.aliases.bash
+++ b/aliases/available/systemd.aliases.bash
@@ -1,22 +1,22 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'systemd service'
 
 case $OSTYPE in
-	linux*)
-		# Improve aliases by bringing the common root `sc|scd` + `sre` for action + `u` for user
-		alias sc='systemctl'
-		alias scu='systemctl --user'
-		alias scdr='systemctl daemon-reload'
-		alias scdru='systemctl --user daemon-reload'
-		alias scr='systemctl restart'
-		alias scru='systemctl --user restart'
-		alias sce='systemctl stop'
-		alias sceu='systemctl --user stop'
-		alias scs='systemctl start'
-		alias scsu='systemctl --user start'
-		# Keeping previous aliases for a non-breaking change.
-		alias scue='sceu'
-		alias scus='scsu'
-		alias scur='scdru'
-		;;
+    linux*)
+# Improve aliases by bringing the common root `sc|scd` + `sre` for action + `u` for user
+	alias sc='systemctl'
+	alias scu='systemctl --user'
+	alias scdr='systemctl daemon-reload'
+	alias scdru='systemctl --user daemon-reload'
+	alias scr='systemctl restart'
+	alias scru='systemctl --user restart'
+	alias sce='systemctl stop'
+	alias sceu='systemctl --user stop'
+	alias scs='systemctl start'
+	alias scsu='systemctl --user start'
+# Keeping previous aliases for a non-breaking change.
+	alias scue='sceu'
+	alias scus='scsu'
+	alias scur='scdru'
+    ;;
 esac
diff --git a/aliases/available/terraform.aliases.bash b/aliases/available/terraform.aliases.bash
index baa9b0c7..09380868 100644
--- a/aliases/available/terraform.aliases.bash
+++ b/aliases/available/terraform.aliases.bash
@@ -1,5 +1,7 @@
-# shellcheck shell=bash
-about-alias 'Aliases for Terraform and Terragrunt'
+# Aliases for Terraform and Terragrunt
+
+cite 'about-alias'
+about-alias 'Terraform abbreviations'
 
 alias tf='terraform'
 alias tfv='terraform validate'
diff --git a/aliases/available/terragrunt.aliases.bash b/aliases/available/terragrunt.aliases.bash
index 94892901..9395b351 100644
--- a/aliases/available/terragrunt.aliases.bash
+++ b/aliases/available/terragrunt.aliases.bash
@@ -1,5 +1,7 @@
-# shellcheck shell=bash
-about-alias 'Aliases for Terraform and Terragrunt'
+# Aliases for Terraform and Terragrunt
+
+cite 'about-alias'
+about-alias 'Terragrunt abbreviations'
 
 alias tg='terragrunt'
 alias tgv='terragrunt validate'
diff --git a/aliases/available/textmate.aliases.bash b/aliases/available/textmate.aliases.bash
index e53eed1a..f0f69e43 100644
--- a/aliases/available/textmate.aliases.bash
+++ b/aliases/available/textmate.aliases.bash
@@ -1,10 +1,10 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'textmate abbreviations'
 
 case $OSTYPE in
-	darwin*)
-		# Textmate
-		alias e='mate . &'
-		alias et='mate app config db lib public script test spec config.ru Gemfile Rakefile README &'
-		;;
+  darwin*)
+    # Textmate
+    alias e='mate . &'
+    alias et='mate app config db lib public script test spec config.ru Gemfile Rakefile README &'
+    ;;
 esac
diff --git a/aliases/available/tmux.aliases.bash b/aliases/available/tmux.aliases.bash
index 192db5b5..1b07f149 100644
--- a/aliases/available/tmux.aliases.bash
+++ b/aliases/available/tmux.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'Tmux terminal multiplexer'
 
 alias txl='tmux ls'
diff --git a/aliases/available/todo.txt-cli.aliases.bash b/aliases/available/todo.txt-cli.aliases.bash
index 359321a4..5bf35d0d 100644
--- a/aliases/available/todo.txt-cli.aliases.bash
+++ b/aliases/available/todo.txt-cli.aliases.bash
@@ -1,8 +1,8 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'todo.txt-cli abbreviations'
 
-alias tls='"${TODO?}" ls'
-alias ta='"${TODO?}" a'
-alias trm='"${TODO?}" rm'
-alias tdo='"${TODO?}" do'
-alias tpri='"${TODO?}" pri'
+alias tls="$TODO ls"
+alias ta="$TODO a"
+alias trm="$TODO rm"
+alias tdo="$TODO do"
+alias tpri="$TODO pri"
diff --git a/aliases/available/uuidgen.aliases.bash b/aliases/available/uuidgen.aliases.bash
index 45c36820..aada05fb 100644
--- a/aliases/available/uuidgen.aliases.bash
+++ b/aliases/available/uuidgen.aliases.bash
@@ -1,11 +1,11 @@
-# shellcheck shell=bash
+cite 'uuid-alias'
 about-alias 'uuidgen aliases'
 
 if _command_exists uuid; then # Linux
-	alias uuidu="uuid | tr '[:lower:]' '[:upper:]'"
-	alias uuidl=uuid
+  alias uuidu="uuid | tr '[:lower:]' '[:upper:]'"
+  alias uuidl=uuid
 elif _command_exists uuidgen; then # macOS/BSD
-	alias uuidu="uuidgen"
-	alias uuid="uuidgen | tr '[:upper:]' '[:lower:]'" # because upper case is like YELLING
-	alias uuidl=uuid
+  alias uuidu="uuidgen"
+  alias uuid="uuidgen | tr '[:upper:]' '[:lower:]'" # because upper case is like YELLING
+  alias uuidl=uuid
 fi
diff --git a/aliases/available/vagrant.aliases.bash b/aliases/available/vagrant.aliases.bash
index a949cbb3..d479fb2b 100644
--- a/aliases/available/vagrant.aliases.bash
+++ b/aliases/available/vagrant.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'vagrant aliases'
 
 # Aliases
diff --git a/aliases/available/vault.aliases.bash b/aliases/available/vault.aliases.bash
index 4d083fb6..d2ad8e74 100644
--- a/aliases/available/vault.aliases.bash
+++ b/aliases/available/vault.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'vault aliases'
 
 # Aliases
diff --git a/aliases/available/vim.aliases.bash b/aliases/available/vim.aliases.bash
index f8068764..562bb766 100644
--- a/aliases/available/vim.aliases.bash
+++ b/aliases/available/vim.aliases.bash
@@ -1,14 +1,41 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'vim abbreviations'
 
-_command_exists vim || return
 
-alias v='vim'
-# open the vim help in fullscreen incorporated from
-# https://stackoverflow.com/a/4687513
-alias vimh='vim -c ":h | only"'
+case $OSTYPE in
+  linux*)
+     # VIM=$(command -v vim)
+    NVIM=$(command -v nvim)
+    # NODE=$(command -v node)
+    # XCLIP=$(command -v xclip)
+    NANO=$(command -v nano)
+    EMACS=$(command -v emacs)
+
+    [[ $EMACS ]] && {
+      alias e='emacs -nw';
+      alias emacs='emacs -nw';
+    }
+
+    [[ $NVIM ]] && {
+      alias vim-plug-install="$NVIM +PlugInstall +qall";
+      alias vim-rplug-install="$NVIM +UpdateRemotePlugins +qall";
+      # alias vim-cheetah="$NVIM -c:Cheetah";
+      # alias vc="$NVIM -c:Cheetah";
+      # alias e='nvr --nostart --servername /tmp/nvim.sock';
+      alias v='NVIM_LISTEN_ADDRESS=/tmp/nvim.sock nvim'
+      # alias e="nvim $(redis-cli ZRANGE vimmru -1 -1 | awk '{print $1}')";
+    }
+
+    # [[ $XCLIP ]] && {
+    #   alias vim-xclip='vim "$(xclip -selection clipboard -o)"';
+    #   alias vim-xclip-p='vim "$(xclip -selection primary -o)"';
+    #   alias vim-xclip-s='vim "$(xclip -selection secundary -o)"';
+    # }
+
+    [[ -n $NANO ]] &&
+      { alias nano='nano -licgmLD -T4 '; }
+
+  ;;
+
+esac
 
-# open vim in new tab is taken from
-# http://stackoverflow.com/questions/936501/let-gvim-always-run-a-single-instancek
-_command_exists mvim && function mvimt { command mvim --remote-tab-silent "$@" || command mvim "$@"; }
-_command_exists gvim && function gvimt { command gvim --remote-tab-silent "$@" || command gvim "$@"; }
diff --git a/aliases/available/wine.aliases.bash b/aliases/available/wine.aliases.bash
new file mode 100644
index 00000000..d46176ef
--- /dev/null
+++ b/aliases/available/wine.aliases.bash
@@ -0,0 +1,6 @@
+cite 'about-alias'
+about-alias 'Wine commands aliases'
+
+alias sketchup='wine64 "C://Program Files//SketchUp//SketchUp 2019//SketchUp.exe"'
+
+alias gk2='wine "C://GK2//SIERRA.EXE"'
diff --git a/aliases/available/xclip.aliases.bash b/aliases/available/xclip.aliases.bash
new file mode 100644
index 00000000..9ecd71ed
--- /dev/null
+++ b/aliases/available/xclip.aliases.bash
@@ -0,0 +1,44 @@
+cite 'about-alias'
+about-alias 'xclip and xpaste shortcuts to linux'
+
+case $OSTYPE in
+  linux*)
+    XCLIP=$(command -v xclip)
+    if [[ $XCLIP ]]; then
+      s=clipboard
+      alias xcopy="$XCLIP -selection $s" &&
+        alias xpaste="$XCLIP -selection $s -o"
+
+      s=primary
+      alias xcopy-p="$XCLIP -selection $s" &&
+        alias xpaste-p="$XCLIP -selection $s -o"
+
+      s=secondary
+      alias xcopy-s="$XCLIP -selection $s" &&
+        alias xpaste-s="$XCLIP -selection $s -o"
+
+      alias  xpwd='pwd|xclip -selection secondary'
+      alias  xcd='cd $(xclip -selection secondary -o)'
+
+      xcp()
+      {
+        if [[ $# -eq 0 ]]; then
+          echo 1>&2 'Sintaxe: xcp [files]'
+        else
+          echo cp $* $(xclip -selection secondary -o)
+        fi
+      }
+
+    fi
+    ;;
+esac
+
+#alias xcopy='xclip -sel clip'
+# to use it just install xclip on your distribution and it would work like:
+# $ echo "hello" | pbcopy
+# $ pbpaste
+# hello
+
+# very useful for things like:
+# cat ~/.ssh/id_rsa.pub | pbcopy
+# have fun!
diff --git a/aliases/available/yarn.aliases.bash b/aliases/available/yarn.aliases.bash
index a2fb6d0d..b50535b9 100644
--- a/aliases/available/yarn.aliases.bash
+++ b/aliases/available/yarn.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'yarn package manager aliases'
 
 # Aliases
diff --git a/completion/available/awscli.completion.bash b/completion/available/awscli.completion.bash
index 6b2c90ff..a3041837 100644
--- a/completion/available/awscli.completion.bash
+++ b/completion/available/awscli.completion.bash
@@ -1,5 +1,6 @@
 # shellcheck shell=bash
 
-if _command_exists aws_completer; then
+if _command_exists aws_completer
+then
 	complete -C "$(command -v aws_completer)" aws
 fi
diff --git a/completion/available/bash-it.completion.bash b/completion/available/bash-it.completion.bash
index 2259e37b..4fdd72d6 100644
--- a/completion/available/bash-it.completion.bash
+++ b/completion/available/bash-it.completion.bash
@@ -1,95 +1,140 @@
-# shellcheck shell=bash
+#!/usr/bin/env bash
 
-function _compreply_candidates() {
-	local IFS=$'\n'
+_bash-it-comp-enable-disable()
+{
+  local enable_disable_args="alias completion plugin"
+  COMPREPLY=( $(compgen -W "${enable_disable_args}" -- ${cur}) )
+}
+
+_bash-it-comp-list-available-not-enabled()
+{
+  subdirectory="$1"
+
+  local available_things
+
+  available_things=$(for f in `compgen -G "${BASH_IT}/$subdirectory/available/*.bash" | sort -d`;
+    do
+      file_entity=$(basename $f)
+
+      typeset enabled_component=$(command ls "${BASH_IT}/$subdirectory/enabled/"{[0-9]*$BASH_IT_LOAD_PRIORITY_SEPARATOR$file_entity,$file_entity} 2>/dev/null | head -1)
+      typeset enabled_component_global=$(command ls "${BASH_IT}/enabled/"[0-9]*$BASH_IT_LOAD_PRIORITY_SEPARATOR$file_entity 2>/dev/null | head -1)
+
+      if [ -z "$enabled_component" ] && [ -z "$enabled_component_global" ]
+      then
+        basename $f | sed -e 's/\(.*\)\..*\.bash/\1/g'
+      fi
+    done)
+
+  COMPREPLY=( $(compgen -W "all ${available_things}" -- ${cur}) )
+}
+
+_bash-it-comp-list-enabled()
+{
+  local subdirectory="$1"
+  local suffix enabled_things
 
-	read -d '' -ra COMPREPLY < <(compgen -W "${candidates[*]}" -- "${cur}")
+  suffix=$(echo "$subdirectory" | sed -e 's/plugins/plugin/g')
+
+  enabled_things=$(for f in `sort -d <(compgen -G "${BASH_IT}/$subdirectory/enabled/*.${suffix}.bash") <(compgen -G "${BASH_IT}/enabled/*.${suffix}.bash")`;
+    do
+      basename $f | sed -e 's/\(.*\)\..*\.bash/\1/g' | sed -e "s/^[0-9]*---//g"
+    done)
+
+  COMPREPLY=( $(compgen -W "all ${enabled_things}" -- ${cur}) )
 }
 
-function _bash-it() {
-	local cur prev verb file_type candidates suffix
-	COMPREPLY=()
-	cur="${COMP_WORDS[COMP_CWORD]}"
-	prev="${COMP_WORDS[COMP_CWORD - 1]}"
-	verb="${COMP_WORDS[1]}"
-	file_type="${COMP_WORDS[2]:-}"
-	candidates=('disable' 'enable' 'help' 'migrate' 'reload' 'restart' 'preview' 'profile' 'doctor' 'search' 'show' 'update' 'version')
-	case "${verb}" in
-		show)
-			candidates=('aliases' 'completions' 'plugins')
-			_compreply_candidates
-			;;
-		help)
-			if [[ "${prev}" == "aliases" ]]; then
-				candidates=('all' "$(_bash-it-component-list "${file_type}")")
-				_compreply_candidates
-			else
-				candidates=('aliases' 'completions' 'migrate' 'plugins' 'update')
-				_compreply_candidates
-			fi
-			;;
-		profile)
-			case "${file_type}" in
-				load | rm)
-					if [[ "${file_type}" == "$prev" ]]; then
-						candidates=("${BASH_IT}/profiles"/*.bash_it)
-						candidates=("${candidates[@]##*/}")
-						candidates=("${candidates[@]%%.bash_it}")
-
-						_compreply_candidates
-					fi
-					;;
-				save | list) ;;
-				*)
-					candidates=('load' 'save' 'list' 'rm')
-					_compreply_candidates
-					;;
-			esac
-			;;
-		doctor)
-			candidates=('errors' 'warnings' 'all')
-			_compreply_candidates
-			;;
-		update)
-			if [[ "${cur}" == -* ]]; then
-				candidates=('-s' '--silent')
-			else
-				candidates=('stable' 'dev')
-			fi
-			_compreply_candidates
-			;;
-		migrate | reload | restart | search | version) ;;
-		preview)
-			_bash-it-preview # completes itself
-			return 0
-			;;
-		enable | disable)
-			if [[ "${verb}" == "enable" ]]; then
-				suffix="disabled"
-			else
-				suffix="enabled"
-			fi
-			case "${file_type}" in
-				alias | completion | plugin)
-					candidates=('all' "$("_bash-it-component-list-${suffix}" "${file_type}")")
-					_compreply_candidates
-					;;
-				*)
-					candidates=('alias' 'completion' 'plugin')
-					_compreply_candidates
-					;;
-			esac
-			;;
-		*)
-			_compreply_candidates
-			;;
-	esac
+_bash-it-comp-list-available()
+{
+  subdirectory="$1"
+
+  local enabled_things
+
+  enabled_things=$(for f in `compgen -G "${BASH_IT}/$subdirectory/available/*.bash" | sort -d`;
+    do
+      basename $f | sed -e 's/\(.*\)\..*\.bash/\1/g'
+    done)
+
+  COMPREPLY=( $(compgen -W "${enabled_things}" -- ${cur}) )
+}
+
+_bash-it-comp()
+{
+  local cur prev opts
+  COMPREPLY=()
+  cur="${COMP_WORDS[COMP_CWORD]}"
+  prev="${COMP_WORDS[COMP_CWORD-1]}"
+  chose_opt="${COMP_WORDS[1]}"
+  file_type="${COMP_WORDS[2]}"
+  opts="disable enable help migrate reload restart doctor search show update version"
+  case "${chose_opt}" in
+    show)
+      local show_args="aliases completions plugins"
+      COMPREPLY=( $(compgen -W "${show_args}" -- ${cur}) )
+      return 0
+      ;;
+    help)
+      if [ x"${prev}" == x"aliases" ]; then
+        _bash-it-comp-list-available aliases
+        return 0
+      else
+        local help_args="aliases completions migrate plugins update"
+        COMPREPLY=( $(compgen -W "${help_args}" -- ${cur}) )
+        return 0
+      fi
+      ;;
+    doctor)
+      local doctor_args="errors warnings all"
+      COMPREPLY=( $(compgen -W "${doctor_args}" -- ${cur}) )
+      return 0
+      ;;
+    update)
+      if [[ ${cur} == -* ]];then
+        local update_args="-s --silent"
+      else
+        local update_args="stable dev"
+      fi
+      COMPREPLY=( $(compgen -W "${update_args}" -- ${cur}) )
+      return 0
+      ;;
+    migrate | reload | search | version)
+      return 0
+      ;;
+    enable | disable)
+      if [ x"${chose_opt}" == x"enable" ];then
+        suffix="available-not-enabled"
+      else
+        suffix="enabled"
+      fi
+      case "${file_type}" in
+        alias)
+            _bash-it-comp-list-${suffix} aliases
+            return 0
+            ;;
+        plugin)
+            _bash-it-comp-list-${suffix} plugins
+            return 0
+            ;;
+        completion)
+            _bash-it-comp-list-${suffix} completion
+            return 0
+            ;;
+        *)
+            _bash-it-comp-enable-disable
+            return 0
+            ;;
+      esac
+      ;;
+  esac
+
+  COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
+
+  return 0
 }
 
 # Activate completion for bash-it and its common misspellings
-complete -F _bash-it bash-it
-complete -F _bash-it bash-ti
-complete -F _bash-it shit
-complete -F _bash-it bashit
-complete -F _bash-it batshit
-complete -F _bash-it bash_it
+complete -F _bash-it-comp bash-it
+complete -F _bash-it-comp bash-ti
+complete -F _bash-it-comp shit
+complete -F _bash-it-comp bashit
+complete -F _bash-it-comp batshit
+complete -F _bash-it-comp bash_it
diff --git a/completion/available/brew.completion.bash b/completion/available/brew.completion.bash
index 61998f8a..5a6c8c22 100644
--- a/completion/available/brew.completion.bash
+++ b/completion/available/brew.completion.bash
@@ -4,27 +4,4 @@ about-completion "brew completion"
 
 # Load late to make sure `system` completion loads first
 # BASH_IT_LOAD_PRIORITY: 375
-
-if [[ "$OSTYPE" != 'darwin'* ]]; then
-	_log_warning "unsupported operating system - only 'Darwin' is supported"
-	return 0
-fi
-
-# Make sure brew is installed
-_bash_it_homebrew_check || return 0
-
-if [[ -r "$BASH_IT_HOMEBREW_PREFIX/etc/bash_completion.d/brew" ]]; then
-	# shellcheck disable=1090
-	source "$BASH_IT_HOMEBREW_PREFIX/etc/bash_completion.d/brew"
-
-elif [[ -r "$BASH_IT_HOMEBREW_PREFIX/Library/Contributions/brew_bash_completion.sh" ]]; then
-	# shellcheck disable=1090
-	source "$BASH_IT_HOMEBREW_PREFIX/Library/Contributions/brew_bash_completion.sh"
-
-elif [[ -f "$BASH_IT_HOMEBREW_PREFIX/completions/bash/brew" ]]; then
-	# For the git-clone based installation, see here for more info:
-	# https://github.com/Bash-it/bash-it/issues/1458
-	# https://docs.brew.sh/Shell-Completion
-	# shellcheck disable=1090
-	source "$BASH_IT_HOMEBREW_PREFIX/completions/bash/brew"
-fi
+source "$HOME/.linuxbrew/Cellar/bash-completion/1.3_3/etc/bash_completion"
diff --git a/completion/available/cht.completion.bash b/completion/available/cht.completion.bash
new file mode 100644
index 00000000..c8c8a534
--- /dev/null
+++ b/completion/available/cht.completion.bash
@@ -0,0 +1,49 @@
+#!/usr/bin/env bash
+#                      __ __       ___
+#                     /\ \\ \    /'___`\
+#                     \ \ \\ \  /\_\ /\ \
+#                      \ \ \\ \_\/_/// /__
+#                       \ \__ ,__\ // /_\ \
+#                        \/_/\_\_//\______/
+#                           \/_/  \/_____/
+#                                         Algoritimos
+#
+#
+#      Author: Ivan Lopes
+#        Mail: ivan (at) 42algoritmos (dot) com (dot) br
+#        Site: htredis_get://www.42algoritmos.com.br
+#     License: gpl
+#       Phone: +1 561 801 7985
+#    Language: Shell Script
+#        File: redis.get.bash
+#        Date: Ter 28 Fev 2017 00:35:55 BRT
+# Description:
+#
+# ----------------------------------------------------------------------------
+#
+# ----------------------------------------------------------------------------
+
+##############################################################################
+##############################################################################
+##############################################################################
+
+# ----------------------------------------------------------------------------
+# Run!
+
+_cht_complete()
+{
+    local cur prev opts
+    _get_comp_words_by_ref -n : cur
+
+    COMPREPLY=()
+    cur="${COMP_WORDS[COMP_CWORD]}"
+    prev="${COMP_WORDS[COMP_CWORD-1]}"
+    opts="$(cht.sh :list)"
+
+    if [ ${COMP_CWORD} = 1 ]; then
+          COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
+          __ltrim_colon_completions "$cur"
+    fi
+    return 0
+}
+complete -F _cht_complete cht.sh
diff --git a/completion/available/defaults.completion.bash b/completion/available/defaults.completion.bash
index 39d7ea95..c43c0aae 100644
--- a/completion/available/defaults.completion.bash
+++ b/completion/available/defaults.completion.bash
@@ -1,5 +1,175 @@
-# shellcheck shell=bash
+# defaults
+# Bash command line completion for defaults
+#
+# Created by Jonathon Mah on 2006-11-08.
+# Copyright 2006 Playhaus. All rights reserved.
+#
+# Version 1.0 (2006-11-08)
 
-if test -s "${BASH_IT?}/vendor/github.com/gaelicWizard/bash-progcomp/defaults.completion.bash"; then
-	source "$_"
-fi
+
+_defaults_domains()
+{
+    local cur
+    COMPREPLY=()
+    cur=${COMP_WORDS[COMP_CWORD]}
+
+	local domains=$( defaults domains | sed -e 's/, /:/g' | tr : '\n' | sed -e 's/ /\\ /g' | grep "^$cur" )
+	local IFS=$'\n'
+	COMPREPLY=( $domains )
+	if [[ $( echo '-app' | grep "^$cur" ) ]]; then
+		COMPREPLY[${#COMPREPLY[@]}]="-app"
+	fi
+
+    return 0
+}
+
+
+_defaults()
+{
+	local cur prev host_opts cmds cmd domain keys key_index
+    cur=${COMP_WORDS[COMP_CWORD]}
+    prev=${COMP_WORDS[COMP_CWORD-1]}
+
+	host_opts='-currentHost -host'
+	cmds='read read-type write rename delete domains find help'
+
+	if [[ $COMP_CWORD -eq 1 ]]; then
+		COMPREPLY=( $( compgen -W "$host_opts $cmds" -- $cur ) )
+		return 0
+	elif [[ $COMP_CWORD -eq 2 ]]; then
+		if [[ "$prev" == "-currentHost" ]]; then
+			COMPREPLY=( $( compgen -W "$cmds" -- $cur ) )
+			return 0
+		elif [[ "$prev" == "-host" ]]; then
+			_known_hosts -a
+			return 0
+		else
+			_defaults_domains
+			return 0
+		fi
+	elif [[ $COMP_CWORD -eq 3 ]]; then
+		if [[ ${COMP_WORDS[1]} == "-host" ]]; then
+			_defaults_domains
+			return 0
+		fi
+    fi
+
+	# Both a domain and command have been specified
+
+	if [[ ${COMP_WORDS[1]} == [${cmds// /|}] ]]; then
+		cmd=${COMP_WORDS[1]}
+		domain=${COMP_WORDS[2]}
+		key_index=3
+		if [[ "$domain" == "-app" ]]; then
+			if [[ $COMP_CWORD -eq 3 ]]; then
+				# Completing application name. Can't help here, sorry
+				return 0
+			fi
+			domain="-app ${COMP_WORDS[3]}"
+			key_index=4
+		fi
+	elif [[ ${COMP_WORDS[2]} == "-currentHost" ]] && [[ ${COMP_WORDS[2]} == [${cmds// /|}] ]]; then
+		cmd=${COMP_WORDS[2]}
+		domain=${COMP_WORDS[3]}
+		key_index=4
+		if [[ "$domain" == "-app" ]]; then
+			if [[ $COMP_CWORD -eq 4 ]]; then
+				# Completing application name. Can't help here, sorry
+				return 0
+			fi
+			domain="-app ${COMP_WORDS[4]}"
+			key_index=5
+		fi
+	elif [[ ${COMP_WORDS[3]} == "-host" ]] && [[ ${COMP_WORDS[3]} == [${cmds// /|}] ]]; then
+		cmd=${COMP_WORDS[3]}
+		domain=${COMP_WORDS[4]}
+		key_index=5
+		if [[ "$domain" == "-app" ]]; then
+			if [[ $COMP_CWORD -eq 5 ]]; then
+				# Completing application name. Can't help here, sorry
+				return 0
+			fi
+			domain="-app ${COMP_WORDS[5]}"
+			key_index=6
+		fi
+	fi
+
+	keys=$( defaults read $domain 2>/dev/null | sed -n -e '/^    [^}) ]/p' | sed -e 's/^    \([^" ]\{1,\}\) = .*$/\1/g' -e 's/^    "\([^"]\{1,\}\)" = .*$/\1/g' | sed -e 's/ /\\ /g' )
+
+	case $cmd in
+	read|read-type)
+		# Complete key
+		local IFS=$'\n'
+		COMPREPLY=( $( echo "$keys" | grep -i "^${cur//\\/\\\\}" ) )
+		;;
+	write)
+		if [[ $key_index -eq $COMP_CWORD ]]; then
+			# Complete key
+			local IFS=$'\n'
+			COMPREPLY=( $( echo "$keys" | grep -i "^${cur//\\/\\\\}" ) )
+		elif [[ $((key_index+1)) -eq $COMP_CWORD ]]; then
+			# Complete value type
+			# Unfortunately ${COMP_WORDS[key_index]} fails on keys with spaces
+			local value_types='-string -data -integer -float -boolean -date -array -array-add -dict -dict-add'
+			local cur_type=$( defaults read-type $domain ${COMP_WORDS[key_index]} 2>/dev/null | sed -e 's/^Type is \(.*\)/-\1/' -e's/dictionary/dict/' | grep "^$cur" )
+			if [[ $cur_type ]]; then
+				COMPREPLY=( $cur_type )
+			else
+				COMPREPLY=( $( compgen -W "$value_types" -- $cur ) )
+			fi
+		elif [[ $((key_index+2)) -eq $COMP_CWORD ]]; then
+			# Complete value
+			# Unfortunately ${COMP_WORDS[key_index]} fails on keys with spaces
+			COMPREPLY=( $( defaults read $domain ${COMP_WORDS[key_index]} 2>/dev/null | grep -i "^${cur//\\/\\\\}" ) )
+		fi
+		;;
+	rename)
+		if [[ $key_index -eq $COMP_CWORD ]] ||
+		   [[ $((key_index+1)) -eq $COMP_CWORD ]]; then
+			# Complete source and destination keys
+			local IFS=$'\n'
+			COMPREPLY=( $( echo "$keys" | grep -i "^${cur//\\/\\\\}" ) )
+		fi
+		;;
+	delete)
+		if [[ $key_index -eq $COMP_CWORD ]]; then
+			# Complete key
+			local IFS=$'\n'
+			COMPREPLY=( $( echo "$keys" | grep -i "^${cur//\\/\\\\}" ) )
+		fi
+		;;
+	esac
+
+    return 0
+}
+
+complete -F _defaults -o default defaults
+
+
+# This file is licensed under the BSD license, as follows:
+#
+# Copyright (c) 2006, Playhaus
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are met:
+#
+# * Redistributions of source code must retain the above copyright notice, this
+#   list of conditions and the following disclaimer.
+# * Redistributions in binary form must reproduce the above copyright notice,
+#   this list of conditions and the following disclaimer in the documentation
+#   and/or other materials provided with the distribution.
+# * Neither the name of the Playhaus nor the names of its contributors may be
+#   used to endorse or promote products derived from this software without
+#   specific prior written permission.
+#
+# This software is provided by the copyright holders and contributors "as is"
+# and any express or implied warranties, including, but not limited to, the
+# implied warranties of merchantability and fitness for a particular purpose are
+# disclaimed. In no event shall the copyright owner or contributors be liable
+# for any direct, indirect, incidental, special, exemplary, or consequential
+# damages (including, but not limited to, procurement of substitute goods or
+# services; loss of use, data, or profits; or business interruption) however
+# caused and on any theory of liability, whether in contract, strict liability,
+# or tort (including negligence or otherwise) arising in any way out of the use
+# of this software, even if advised of the possibility of such damage.
diff --git a/completion/available/flutter.completion.bash b/completion/available/flutter.completion.bash
index 7dde5a07..62befc82 100644
--- a/completion/available/flutter.completion.bash
+++ b/completion/available/flutter.completion.bash
@@ -1,5 +1,5 @@
-# shellcheck shell=bash
+#!/usr/bin/bash
 
 if _command_exists flutter; then
-	eval "$(flutter bash-completion)"
+  eval "$(flutter bash-completion)"
 fi
diff --git a/completion/available/iprj.completion.bash b/completion/available/iprj.completion.bash
new file mode 100644
index 00000000..17337ec3
--- /dev/null
+++ b/completion/available/iprj.completion.bash
@@ -0,0 +1,9 @@
+# shellcheck shell=bash
+cite "about-completion"
+about-completion "iprj(cli tool) manager project"
+
+# ----------------------------------------------------------------------------
+# Run!
+
+IPRJ=$(command -v iprj)
+[[ $IPRJ ]] && eval "$( iprj init )"
diff --git a/completion/available/knife.completion.bash b/completion/available/knife.completion.bash
index c0fb6a99..4b9950ed 100644
--- a/completion/available/knife.completion.bash
+++ b/completion/available/knife.completion.bash
@@ -55,12 +55,12 @@ _KAC_regen_cache() {
 
 # cached files can't have spaces in their names
 _KAC_get_cache_name_from_command() {
-	echo "${@// /_SPACE_}"
+	echo "${@/ /_SPACE_}"
 }
 
 # the reverse operation from the function above
 _KAC_get_command_from_cache_name() {
-	echo "${@//_SPACE_/ }"
+	echo "${@/_SPACE_/ }"
 }
 
 # given a command as argument, it fetches the cache for that command if it can find it
diff --git a/completion/available/pipenv.completion.bash b/completion/available/pipenv.completion.bash
index 4adfab95..52451b8a 100644
--- a/completion/available/pipenv.completion.bash
+++ b/completion/available/pipenv.completion.bash
@@ -1,4 +1,4 @@
 # shellcheck shell=bash
 if _command_exists pipenv; then
-	eval "$(_PIPENV_COMPLETE=bash_source pipenv)"
+	eval "$(pipenv --completion)"
 fi
diff --git a/completion/available/svn.completion.bash b/completion/available/svn.completion.bash
index 2f0a23fe..eabc15c9 100644
--- a/completion/available/svn.completion.bash
+++ b/completion/available/svn.completion.bash
@@ -1,40 +1,1514 @@
-# shellcheck shell=bash
+# ------------------------------------------------------------
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
 #
-# Locate and load completions for `svn`.
+#   http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+# ------------------------------------------------------------
+
+# Programmable completion for the Subversion svn command under bash. Source
+# this file (or on some systems add it to ~/.bash_completion and start a new
+# shell) and bash's completion mechanism will know all about svn's options!
+# Provides completion for the svnadmin, svndumpfilter, svnlook and svnsync
+# commands as well.  Who wants to read man pages/help text...
+
+# Known to work with bash 3.* with programmable completion and extended
+# pattern matching enabled (use 'shopt -s extglob progcomp' to enable
+# these if they are not already enabled).
+
+shopt -s extglob
+
+# Tree helper functions which only use bash, to ease readability.
+
+# look for value associated to key from stdin in K/V hash file format
+# val=$(_svn_read_hashfile svn:realmstring < some/file)
+function _svn_read_hashfile()
+{
+  local tkey=$1 key= val=
+  while true; do
+    read tag len
+    [ $tag = 'END' ] && break
+    [ $tag != 'K' ] && {
+      #echo "unexpected tag '$tag' instead of 'K'" >&2
+      return
+    }
+    read -r -n $len key ; read
+    read tag len
+    [ $tag != 'V' ] && {
+      #echo "unexpected tag '$tag' instead of 'V'" >&2
+      return
+    }
+    read -r -n $len val ; read
+    if [[ $key = $tkey ]] ; then
+      echo "$val"
+      return
+    fi
+  done
+  #echo "target key '$tkey' not found" >&2
+}
+
+# _svn_grcut shell-regular-expression
+# extract filenames from 'svn status' output
+function _svn_grcut()
+{
+    local re=$1 line= old_IFS
+    # fix IFS, so that leading spaces are not ignored by next read.
+    # (there is a leading space in svn status output if only a prop is changed)
+    old_IFS="$IFS"
+    IFS=$'\n'
+    while read -r line ; do
+	[[ ! $re || $line == $re ]] && echo "${line/????????/}"
+    done
+    IFS="$old_IFS"
+}
+
+# extract stuff from svn info output
+# _svn_info (URL|Repository Root)
+function _svn_info()
+{
+  local what=$1 line=
+  LANG=C LC_MESSAGES=C svn info --non-interactive 2> /dev/null | \
+  while read line ; do
+    [[ $line == *"$what: "* ]] && echo ${line#*: }
+  done
+}
+
+# _svn_lls (dir|file|all) files...
+# list svn-managed files from list
+# some 'svn status --all-files' would be welcome here?
+function _svn_lls()
+{
+    local opt=$1 f=
+    shift
+    for f in "$@" ; do
+	# could try to check in .svn/entries? hmmm...
+	if [[ $opt == @(dir|all) && -d "$f" ]] ; then
+	    echo "$f/"
+	elif [[ $opt == @(file|all) ]] ; then
+	    # split f in directory/file names
+	    local dn= fn="$f"
+	    [[ "$f" == */* ]] && dn=${f%\/*}/ fn=${f##*\/}
+	    # ??? this does not work for just added files, because they
+	    # do not have a content reference yet...
+	    [ -f "${dn}.svn/text-base/${fn}.svn-base" ] && echo "$f"
+	fi
+    done
+}
+
+# This completion guides the command/option order along the one suggested
+# by "svn help", although other syntaxes are allowed.
+#
+# - there is a "real" parser to check for what is available and deduce what
+#   can be suggested further.
+# - the syntax should be coherent with subversion/svn/{cl.h,main.c}
+# - although it is not a good practice, mixed options and arguments
+#   is supported by the completion as it is by the svn command.
+# - the completion works in the middle of a line,
+#   but not really in the middle of an argument or option.
+# - property names are completed: see comments about issues related to handling
+#   ":" within property names although it is a word completion separator.
+# - unknown properties are assumed to be simple file properties.
+# - --revprop and --revision options are forced to revision properties
+#   as they are mandatory in this case.
+# - argument values are suggested to some other options, eg directory names
+#   for --config-dir.
+# - values for some options can be extended with environment variables:
+#   SVN_BASH_FILE_PROPS: other properties on files/directories
+#   SVN_BASH_REV_PROPS: other properties on revisions
+#   SVN_BASH_ENCODINGS: encodings to be suggested
+#   SVN_BASH_MIME_TYPE: mime types to be suggested
+#   SVN_BASH_KEYWORDS: "svn:keywords" substitutions to be suggested
+#   SVN_BASH_USERNAME: usernames suggested for --username
+#   SVN_BASH_COMPL_EXT: completion extensions for file arguments, based on the
+#      current subcommand, so that for instance only modified files are
+#      suggested for 'revert', only not svn-managed files for 'add', and so on.
+#      Possible values are:
+#      - username: guess usernames from ~/.subversion/auth/...
+#      - urls: guess urls from ~/.subversion/auth/... or others
+#      - svnstatus: use 'svn status' for completion
+#      - recurse: allow recursion (expensive)
+#      - externals: recurse into externals (very expensive)
+#     Former options are reasonable, but beware that both later options
+#     may be unadvisable if used on large working copies.
+#     None of these costly completions are activated by default.
+#     Argument completion outside a working copy results in an error message.
+#     Filenames with spaces are not completed properly.
+#
+# TODO
+# - other options?
+# - obsolete options could be removed from auto-comp? (e.g. -N)
+# - obsolete commands could be removed? (e.g. resolved)
+# - completion does not work properly when editing in the middle of the line
+#   status/previous are those at the end of the line, not at the entry position
+# - url completion should select more cases where it is relevant
+# - url completion of http:// schemas could suggest sub directories?
+# - add completion for experimental 'obliterate' feature?
+_svn()
+{
+	local cur cmds cmdOpts pOpts mOpts rOpts qOpts nOpts optsParam opt
+
+	COMPREPLY=()
+	cur=${COMP_WORDS[COMP_CWORD]}
+
+	# Possible expansions, without pure-prefix abbreviations such as "up".
+	cmds='add blame annotate praise cat changelist cl checkout co cleanup'
+	cmds="$cmds commit ci copy cp delete remove rm diff export help import"
+	cmds="$cmds info list ls lock log merge mergeinfo mkdir move mv rename"
+	cmds="$cmds patch propdel pdel propedit pedit propget pget proplist"
+	cmds="$cmds plist propset pset relocate resolve resolved revert status"
+	cmds="$cmds  switch unlock update upgrade"
+
+	# help options have a strange command status...
+	local helpOpts='--help -h'
+	# all special options that have a command status
+	local specOpts="--version $helpOpts"
+
+	# options that require a parameter
+	# note: continued lines must end '|' continuing lines must start '|'
+	optsParam="-r|--revision|--username|--password|--targets"
+	optsParam="$optsParam|-x|--extensions|-m|--message|-F|--file"
+	optsParam="$optsParam|--encoding|--diff-cmd|--diff3-cmd|--editor-cmd"
+	optsParam="$optsParam|--old|--new|--config-dir|--config-option"
+	optsParam="$optsParam|--native-eol|-l|--limit|-c|--change"
+	optsParam="$optsParam|--depth|--set-depth|--with-revprop"
+	optsParam="$optsParam|--cl|--changelist|--accept|--show-revs"
+
+	# svn:* and other (env SVN_BASH_*_PROPS) properties
+	local svnProps revProps allProps psCmds propCmds
+
+	# svn and user configured "file" (or directory) properties
+	# the "svn:mergeinfo" prop is not included by default because it is
+	# managed automatically, so there should be no need to edit it by hand.
+	svnProps="svn:keywords svn:executable svn:needs-lock svn:externals
+	          svn:ignore svn:eol-style svn:mime-type $SVN_BASH_FILE_PROPS"
+
+	# svn and user configured revision properties
+	revProps="svn:author svn:log svn:date $SVN_BASH_REV_PROPS"
+
+	# all properties as an array variable
+	allProps=( $svnProps $revProps )
+
+	# subcommands that expect property names
+	psCmds='propset|pset|ps'
+	propCmds="$psCmds|propget|pget|pg|propedit|pedit|pe|propdel|pdel|pd"
+
+	# possible URL schemas to access a subversion server
+	local urlSchemas='file:/// http:// https:// svn:// svn+ssh://'
+
+	# Parse arguments and set various variables about what was found.
+	#
+	# cmd: the current command if available
+	#    isPropCmd: whether it expects a property name argument
+	#    isPsCmd: whether it also expects a property value argument
+	#    isHelpCmd: whether it is about help
+	#    nExpectArgs: how many arguments are expected by the command
+	# help: help requested about this command (if cmd=='help')
+	# prop: property name (if appropriate)
+	#    isRevProp: is it a special revision property
+	# val: property value (if appropriate, under pset)
+	# options: all options encountered
+	#    hasRevPropOpt: is --revprop set
+	#    hasRevisionOpt: is --revision set
+	#    hasRelocateOpt: is --relocate set
+	#    hasReintegrateOpt: is --reintegrate set
+	#    acceptOpt: the value of --accept
+	# nargs: how many arguments were found
+	# stat: status of parsing at the 'current' word
+	#
+	# prev: previous command in the loop
+	# last: status of last parameter analyzed
+	# i: index
+	local cmd= isPropCmd= isPsCmd= isHelpCmd= nExpectArgs= isCur= i=0
+	local prev= help= prop= val= isRevProp= last='none' nargs=0 stat=
+	local options= hasRevPropOpt= hasRevisionOpt= hasRelocateOpt=
+	local acceptOpt= URL= hasReintegrateOpt=
+
+	for opt in "${COMP_WORDS[@]}"
+	do
+	    # get status of current word (from previous iteration)
+	    [[ $isCur ]] && stat=$last
+
+	    # are we processing the current word
+	    isCur=
+	    [[ $i -eq $COMP_CWORD ]] && isCur=1
+	    let i++
+
+	    # FIRST must be the "svn" command
+	    [ $last = 'none' ] && { last='first'; continue ; }
+
+	    # SKIP option arguments
+	    if [[ $prev == @($optsParam) ]] ; then
+
+		# record accept value
+		[[ $prev = '--accept' ]] && acceptOpt=$opt
+
+		prev=''
+		last='skip'
+		continue ;
+	    fi
+
+	    # Argh...  This looks like a bash bug...
+	    # Redirections are passed to the completion function
+	    # although it is managed by the shell directly...
+	    # It matters because we want to tell the user when no more
+	    # completion is available, so it does not necessary
+	    # fallback to the default case.
+	    if [[ $prev == @(<|>|>>|[12]>|[12]>>) ]] ; then
+		prev=''
+		last='skip'
+		continue ;
+	    fi
+	    prev=$opt
+
+	    # get the subCoMmanD
+	    if [[ ! $cmd && $opt \
+               && ( $opt != -* || $opt == @(${specOpts// /|}) ) ]]
+            then
+		cmd=$opt
+		[[ $cmd == @($propCmds) ]] && isPropCmd=1
+		[[ $cmd == @($psCmds) ]] && isPsCmd=1
+		[[ $cmd == @(${helpOpts// /|}) ]] && cmd='help'
+		[[ $cmd = 'help' ]] && isHelpCmd=1
+	        # HELP about a command asked with an option
+		if [[ $isHelpCmd && $cmd && $cmd != 'help' && ! $help ]]
+		then
+		    help=$cmd
+		    cmd='help'
+		fi
+		last='cmd'
+		continue
+	    fi
+
+	    # HELP about a command
+	    if [[ $isHelpCmd && ! $help && $opt && $opt != -* ]]
+	    then
+		help=$opt
+		last='help'
+		continue
+	    fi
+
+	    # PROPerty name
+	    if [[ $isPropCmd && ! $prop && $opt && $opt != -* ]]
+	    then
+		prop=$opt
+		[[ $prop == @(${revProps// /|}) ]] && isRevProp=1
+		last='prop'
+		continue
+	    fi
+
+	    # property VALue
+	    if [[ $isPsCmd && $prop && ! $val && $opt != -* ]] ;
+	    then
+		val=$opt
+		last='val'
+		continue
+	    fi
+
+	    if [[ $last != 'onlyarg' ]]
+	    then
+	      # more OPTions
+	      case $opt in
+		  -r|--revision|--revision=*)
+		      hasRevisionOpt=1
+		      ;;
+		  --revprop)
+		      hasRevPropOpt=1
+		      # restrict to revision properties!
+		      allProps=( $revProps )
+		      # on revprops, only one URL is expected
+		      nExpectArgs=1
+		      ;;
+		  -h|--help)
+		      isHelpCmd=1
+		      ;;
+		  -F|--file)
+		      val='-F'
+		      ;;
+		  --relocate)
+		      hasRelocateOpt=1
+		      ;;
+		  --reintegrate)
+		      hasReintegrateOpt=1
+		      ;;
+	      esac
+
+	      # no more options, only arguments, whatever they look like.
+	      if [[ $opt = '--' && ! $isCur ]] ; then
+		  last='onlyarg'
+		  continue
+	      fi
+
+	      # options are recorded...
+	      if [[ $opt == -* ]] ; then
+		  # but not the current one!
+		  [[ ! $isCur ]] && options="$options $opt "
+		  last='opt'
+		  continue
+	      fi
+	    else
+		# onlyarg
+		let nargs++
+		continue
+	    fi
+
+	    # then we have an argument
+	    if [[ $cmd = 'merge' && ! $URL ]] ; then
+              # fist argument is the source URL for the merge
+	      URL=$opt
+	    fi
+
+	    last='arg'
+	    let nargs++
+	done
+	# end opt option processing...
+	[[ $stat ]] || stat=$last
+
+	# suggest all subcommands, including special help
+	if [[ ! $cmd || $stat = 'cmd' ]]
+	then
+	    COMPREPLY=( $( compgen -W "$cmds $specOpts" -- $cur ) )
+	    return 0
+	fi
+
+	# suggest all subcommands
+	if [[ $stat = 'help' || ( $isHelpCmd && ! $help ) ]]
+	then
+	    COMPREPLY=( $( compgen -W "$cmds" -- $cur ) )
+	    return 0
+	fi
+
+	# URL completion
+	if [[ $cmd == @(co|checkout|ls|list) && $stat = 'arg' && \
+			$SVN_BASH_COMPL_EXT == *urls* ]]
+	then
+		# see about COMP_WORDBREAKS workaround in prop completion
+		if [[ $cur == file:* ]]
+		then
+			# file completion for file:// urls
+			local where=${cur/file:/}
+			COMPREPLY=( $(compgen -d -S '/' -X '*/.*' -- $where ) )
+			return
+		elif [[ $cur == *:* ]]
+		then
+			# get known urls
+			local urls= file=
+			for file in ~/.subversion/auth/svn.simple/* ; do
+				if [ -r $file ] ; then
+					local url=$(_svn_read_hashfile svn:realmstring < $file)
+					url=${url/*</}
+					url=${url/>*/}
+					urls="$urls $url"
+				fi
+			done
+
+			# only suggest/show possible suffixes
+			local prefix=${cur%:*} suffix=${cur#*:} c= choices=
+			for c in $urls ; do
+				[[ $c == $prefix:* ]] && choices="$choices ${c#*:}"
+			done
+
+			COMPREPLY=( $(compgen -W "$choices" -- $suffix ) )
+			return
+		else
+			# show schemas
+			COMPREPLY=( $(compgen -W "$urlSchemas" -- $cur) )
+			return
+		fi
+	fi
+
+	if [[ $cmd = 'merge' || $cmd = 'mergeinfo' ]]
+	then
+	  local here=$(_svn_info URL)
+	  # suggest a possible URL for merging
+	  if [[ ! $URL && $stat = 'arg' ]] ; then
+	    # we assume a 'standard' repos with branches and trunk
+	    if [[ "$here" == */branches/* ]] ; then
+	      # we guess that it is a merge from the trunk
+	      COMPREPLY=( $(compgen -W ${here/\/branches\/*/\/trunk} -- $cur ) )
+	      return 0
+	    elif [[ "$here" == */trunk* ]] ; then
+	      # we guess that it is a merge from a branch
+	      COMPREPLY=( $(compgen -W ${here/\/trunk*/\/branches\/} -- $cur ) )
+	      return 0
+	    else
+	      # no se, let us suggest the repository root...
+	      COMPREPLY=( $(compgen -W $(_svn_info Root) -- $cur ) )
+	      return 0
+	    fi
+	  elif [[ $URL == */branches/* && $here == */trunk* && \
+	        ! $hasReintegrateOpt && $cur = '' && $stat = 'arg' ]] ; then
+	    # force --reintegrate only if the current word is empty
+	    COMPREPLY=( $(compgen -W '--reintegrate' -- $cur ) )
+	    return 0
+	  fi
+	fi
+
+	# help about option arguments
+	if [[ $stat = 'skip' ]]
+	then
+	    local previous=${COMP_WORDS[COMP_CWORD-1]}
+	    local values= dirs= beep= exes=
+
+	    [[ $previous = '--config-dir' ]] && dirs=1
+
+	    # external editor, diff, diff3...
+	    [[ $previous = --*-cmd ]] && exes=1
+
+	    [[ $previous = '--native-eol' ]] && values='LF CR CRLF'
+
+	    # just to suggest that a number is expected. hummm.
+	    [[ $previous = '--limit' ]] && values='0 1 2 3 4 5 6 7 8 9'
+
+            # some special partial help about --revision option.
+	    [[ $previous = '--revision' || $previous = '-r' ]] && \
+		values='HEAD BASE PREV COMMITTED 0 {'
+
+	    [[ $previous = '--encoding' ]] && \
+		values="latin1 utf8 $SVN_BASH_ENCODINGS"
+
+	    [[ $previous = '--extensions' || $previous = '-x' ]] && \
+		values="--unified --ignore-space-change \
+		   --ignore-all-space --ignore-eol-style --show-c-functions"
+
+	    [[ $previous = '--depth' ]] && \
+		values='empty files immediates infinity'
+
+	    [[ $previous = '--set-depth' ]] && \
+		values='empty exclude files immediates infinity'
+
+	    [[ $previous = '--accept' ]] && \
+	    {
+	        # the list is different for 'resolve'
+                if [[ $cmd = 'resolve' ]] ; then
+		    # from svn help resolve
+		    values='base working mine-full theirs-full'
+		else # checkout merge switch update
+		    values="postpone base mine-full theirs-full edit launch \
+			mine-conflict theirs-conflict"
+		fi
+	    }
+
+	    [[ $previous = '--show-revs' ]] && values='merged eligible'
+
+	    if [[ $previous = '--username' ]] ; then
+	      values="$SVN_BASH_USERNAME"
+	      if [[ $SVN_BASH_COMPL_EXT == *username* ]] ; then
+		local file=
+		# digest? others?
+		for file in ~/.subversion/auth/svn.simple/* ; do
+		  if [ -r $file ] ; then
+		    values="$values $(_svn_read_hashfile username < $file)"
+		  fi
+		done
+	      fi
+	      [[ ! "$values" ]] && beep=1
+	    fi
+
+	    # could look at ~/.subversion/ ?
+	    # hmmm... this option should not exist
+	    [[ $previous = '--password' ]] && beep=1
+
+	    # TODO: provide help about other options such as:
+	    # --old --new --with-revprop
+
+	    # if the previous option required a parameter, do something
+	    # or fallback on ordinary filename expansion
+	    [[ $values ]] && COMPREPLY=( $( compgen -W "$values" -- $cur ) )
+	    [[ $dirs ]] && COMPREPLY=( $( compgen -o dirnames -- $cur ) )
+	    [[ $exes ]] && COMPREPLY=( $( compgen -c -- $cur ) )
+	    [[ $beep ]] &&
+	    {
+		# 'no known completion'. hummm.
+		echo -en "\a"
+		COMPREPLY=( '' )
+	    }
+	    return 0
+	fi
+
+	# provide allowed property names after property commands
+	if [[ $isPropCmd && ( ! $prop || $stat = 'prop' ) && $cur != -* ]]
+	then
+	    #
+	    # Ok, this part is pretty ugly.
+	    #
+	    # The issue is that ":" is a completion word separator,
+	    # which is a good idea for file:// urls but not within
+	    # property names...
+	    #
+	    # The first idea was to remove locally ":" from COMP_WORDBREAKS
+	    # and then put it back in all cases but in property name
+	    # completion.  It does not always work.  There is a strange bug
+	    # where one may get "svn:svn:xxx" in some unclear cases.
+	    #
+	    # Thus the handling is reprogrammed here...
+	    # The code assumes that property names look like *:*,
+	    # but it also works reasonably well with simple names.
+	    #
+	    # This hack is broken in bash4... not sure what to do about it,
+            # especially while keeping the bash3 compatibility:-(
+	    local choices=
+
+	    if [[ $cur == *:* ]]
+	    then
+		# only suggest/show possible suffixes
+		local prefix=${cur%:*} suffix=${cur#*:} c=
+		for c in ${allProps[@]} ; do
+		    [[ $c == $prefix:* ]] && choices="$choices ${c#*:}"
+		done
+		# everything will be appended to the prefix because ':' is
+		# a separator, so cur is restricted to the suffix part.
+		cur=$suffix
+	    else
+		# only one choice is fine
+		COMPREPLY=( $( compgen -W "${allProps[*]}" -- $cur ) )
+		[ ${#COMPREPLY[@]} -eq 1 ] && return 0
+
+		# no ':' so only suggest prefixes?
+		local seen= n=0 last= c=
+		for c in ${allProps[@]%:*} ; do
+		    # do not put the same prefix twice...
+		    if [[ $c == $cur* && ( ! $seen || $c != @($seen) ) ]]
+		    then
+			let n++
+			last=$c
+			choices="$choices $c:"
+			if [[ $seen ]]
+			then
+			    seen="$seen|$c*"
+			else
+			    seen="$c*"
+			fi
+		    fi
+		done
+
+		# supply two choices to force a partial completion and a beep
+		[[ $n -eq 1 ]] && choices="$last:1 $last:2"
+	    fi
+
+	    COMPREPLY=( $( compgen -W "$choices" -- $cur ) )
+	    return 0
+	fi
+
+	# force mandatory --revprop option on revision properties
+	if [[ $isRevProp && ! $hasRevPropOpt ]]
+	then
+	    COMPREPLY=( $( compgen -W '--revprop' -- $cur ) )
+	    return 0
+	fi
+
+	# force mandatory --revision option on revision properties
+	if [[ $isRevProp && $hasRevPropOpt && ! $hasRevisionOpt ]]
+	then
+	    COMPREPLY=( $( compgen -W '--revision' -- $cur ) )
+	    return 0
+	fi
+
+	# possible completion when setting property values
+	if [[ $isPsCmd && $prop && ( ! $val || $stat = 'val' ) ]]
+	then
+	    # ' is a reminder for an arbitrary value
+	    local values="\' --file"
+	    case $prop in
+		svn:keywords)
+		    # just a subset?
+		    values="Id Rev URL Date Author Header \' $SVN_BASH_KEYWORDS"
+		    ;;
+		svn:executable|svn:needs-lock)
+		    # hmmm... canonical value * is special to the shell.
+		    values='\\*'
+		    ;;
+		svn:eol-style)
+		    values='native LF CR CRLF'
+		    ;;
+		svn:mime-type)
+		    # could read /etc/mime.types if available. overkill.
+		    values="text/ text/plain text/html text/xml text/rtf
+                       image/ image/png image/gif image/jpeg image/tiff
+                       audio/ audio/midi audio/mpeg
+                       video/ video/mpeg video/mp4
+                       application/ application/octet-stream
+                       $SVN_BASH_MIME_TYPE"
+		    ;;
+	    esac
+
+	    COMPREPLY=( $( compgen -W "$values" -- $cur ) )
+	    # special case for --file... return even if within an option
+	    [[ ${COMPREPLY} ]] && return 0
+	fi
+
+	# maximum number of additional arguments expected in various forms
+	case $cmd in
+	    merge)
+		nExpectArgs=3
+		;;
+	    mergeinfo)
+		nExpectArgs=1
+		;;
+	    copy|cp|move|mv|rename|ren|export|import)
+		nExpectArgs=2
+		;;
+	    switch|sw)
+		[[ ! $hasRelocateOpt ]] && nExpectArgs=2
+		;;
+	    help|h)
+		nExpectArgs=0
+		;;
+	    --version)
+		nExpectArgs=0
+		;;
+	esac
+
+	# the maximum number of arguments is reached for a command
+	if [[ $nExpectArgs && $nargs -gt $nExpectArgs ]]
+	then
+	    # some way to tell 'no completion at all'... is there a better one?
+	    # Do not say 'file completion' here.
+	    echo -en "\a"
+	    COMPREPLY=( '' )
+	    return 0
+	fi
+
+	# if not typing an option,
+	# then fallback on filename expansion...
+	if [[ $cur != -* || $stat = 'onlyarg' ]]  ; then
+
+	    # do we allow possible expensive completion here?
+	    if [[ $SVN_BASH_COMPL_EXT == *svnstatus* ]] ; then
+
+		# build status command and options
+		# "--quiet" removes 'unknown' files
+		local status='svn status --non-interactive'
+
+		[[ $SVN_BASH_COMPL_EXT == *recurse* ]] || \
+		    status="$status --non-recursive"
+
+		# I'm not sure that it can work with externals in call cases
+		# the output contains translatable sentences (even with quiet)
+		[[ $SVN_BASH_COMPL_EXT == *externals* ]] || \
+		    status="$status --ignore-externals"
+
+		local cs= files=
+		# subtlety: must not set $cur* if $cur is empty in some cases
+		[[ $cur ]] && cs=$cur*
+
+		# 'files' is set according to the current subcommand
+		case $cmd in
+		    st*) # status completion must include all files
+			files=$cur*
+			;;
+		    ci|commit|revert|di*) # anything edited
+			files=$($status $cs| _svn_grcut '@([MADR!]*| M*|_M*)')
+			;;
+		    add) # unknown files
+			files=$($status $cs| _svn_grcut '\?*')
+			;;
+		    unlock) # unlock locked files
+			files=$($status $cs| _svn_grcut '@(??L*|?????[KOTB]*)')
+			;;
+		    resolve*) # files in conflict
+			files=$($status $cs| _svn_grcut '@(?C*|C*)')
+			;;
+		    praise|blame|ann*) # any svn file but added
+			files=$( _svn_lls all $cur* )
+			;;
+		    p*) # prop commands
+			if [[ $cmd == @($propCmds) && \
+			      $prop == @(svn:ignore|svn:externals) ]] ; then
+			    # directory specific props
+			    files=$( _svn_lls dir . $cur* )
+			else
+			    # ??? added directories appear twice: foo foo/
+			    files="$( _svn_lls all $cur* )
+                                   $($status $cs | _svn_grcut 'A*' )"
+			fi
+			;;
+		    info) # information on any file
+			files="$( _svn_lls all $cur* )
+                               $($status $cs | _svn_grcut 'A*' )"
+			;;
+		    remove|rm|del*|move|mv|rename) # changing existing files
+			files=$( _svn_lls all $cur* )
+			;;
+		    mkdir) # completion in mkdir can only be for subdirs?
+			files=$( _svn_lls dir $cur* )
+			;;
+		    log|lock|up*|cl*|switch) # misc, all but added files
+			files=$( _svn_lls all $cur* )
+			;;
+		    merge) # may do a better job? URL/WCPATH
+			files=$( _svn_lls all $cur* )
+			;;
+		    ls|list) # better job? what about URLs?
+			files=$( _svn_lls all $cur* )
+			;;
+		    *) # other commands: changelist export import cat mergeinfo
+			local fallback=1
+			;;
+		esac
+
+		# when not recursive, some relevant files may exist
+		# within subdirectories, so they are added here.
+		# should it be restricted to svn-managed subdirs? no??
+		if [[ $SVN_BASH_COMPL_EXT != *recurse* ]] ; then
+		    files="$files $( _svn_lls dir $cur* )"
+		fi
+
+		# set completion depending on computed 'files'
+		if [[ $files ]] ; then
+		    COMPREPLY=( $( compgen -W "$files" -- $cur ) )
+		    # if empty, set to nope?
+		    [[ "${COMPREPLY[*]}" ]] || COMPREPLY=( '' )
+		elif [[ ! $fallback ]] ; then
+		    # this suggests no completion...
+		    echo -en "\a"
+		    COMPREPLY=( '' )
+		fi
+	    fi
+	    # else fallback to ordinary filename completion...
+	    return 0
+	fi
+
+	# otherwise build possible options for the command
+	pOpts="--username --password --no-auth-cache --non-interactive \
+	       --trust-server-cert --force-interactive"
+	mOpts="-m --message -F --file --encoding --force-log --with-revprop"
+	rOpts="-r --revision"
+	qOpts="-q --quiet"
+	nOpts="-N --non-recursive --depth"
+	gOpts="-g --use-merge-history"
+	cOpts="--cl --changelist"
+
+	cmdOpts=
+	case $cmd in
+	--version)
+		cmdOpts="$qOpts"
+		;;
+	add)
+		cmdOpts="--auto-props --no-auto-props --force --targets \
+		         --no-ignore --parents $nOpts $qOpts $pOpts"
+		;;
+	blame|annotate|ann|praise)
+		cmdOpts="$rOpts $pOpts -v --verbose --incremental --xml \
+		         -x --extensions --force $gOpts"
+		;;
+	cat)
+		cmdOpts="$rOpts $pOpts"
+		;;
+	changelist|cl)
+		cmdOpts="--targets $pOpts $qOpts $cOpts \
+                         -R --recursive --depth --remove"
+		;;
+	checkout|co)
+		cmdOpts="$rOpts $qOpts $nOpts $pOpts --ignore-externals \
+                         --force"
+		;;
+	cleanup)
+		cmdOpts="--diff3-cmd $pOpts"
+		;;
+	commit|ci)
+		cmdOpts="$mOpts $qOpts $nOpts --targets --editor-cmd $pOpts \
+		         --no-unlock $cOpts --keep-changelists \
+		         --include-externals"
+		;;
+	copy|cp)
+		cmdOpts="$mOpts $rOpts $qOpts --editor-cmd $pOpts --parents \
+		         --ignore-externals"
+		;;
+	delete|del|remove|rm)
+		cmdOpts="--force $mOpts $qOpts --targets --editor-cmd $pOpts \
+                         --keep-local"
+		;;
+	diff|di)
+		cmdOpts="$rOpts -x --extensions --diff-cmd --no-diff-deleted \
+		         $nOpts $pOpts --force --old --new --notice-ancestry \
+		         -c --change --summarize $cOpts --xml --git \
+		         --internal-diff --show-copies-as-adds \
+		         --ignore-properties --properties-only --no-diff-added \
+		         --patch-compatible"
+		;;
+	export)
+		cmdOpts="$rOpts $qOpts $pOpts $nOpts --force --native-eol \
+                         --ignore-externals --ignore-keywords"
+		;;
+	help|h|\?)
+		cmdOpts=
+		;;
+	import)
+		cmdOpts="--auto-props --no-auto-props $mOpts $qOpts $nOpts \
+		         --no-ignore --editor-cmd $pOpts --force"
+		;;
+	info)
+		cmdOpts="$pOpts $rOpts --targets -R --recursive --depth \
+                         --incremental --xml $cOpts"
+		;;
+	list|ls)
+		cmdOpts="$rOpts -v --verbose -R --recursive $pOpts \
+                         --incremental --xml --depth --include-externals"
+		;;
+	lock)
+		cmdOpts="-m --message -F --file --encoding --force-log \
+                         --targets --force $pOpts"
+		;;
+	log)
+		cmdOpts="$rOpts -v --verbose --targets $pOpts --stop-on-copy \
+		         --incremental --xml $qOpts -l --limit -c --change \
+                         $gOpts --with-all-revprops --with-revprop --depth \
+		         --diff --diff-cmd -x --extensions --internal-diff \
+		         --with-no-revprops --search --search-and"
+		;;
+	merge)
+		cmdOpts="$rOpts $nOpts $qOpts --force --dry-run --diff3-cmd \
+		         $pOpts --ignore-ancestry -c --change -x --extensions \
+                         --record-only --accept --reintegrate \
+		         --allow-mixed-revisions -v --verbose"
+		;;
+	mergeinfo)
+	        cmdOpts="$rOpts $pOpts --depth --show-revs -R --recursive"
+		;;
+	mkdir)
+		cmdOpts="$mOpts $qOpts --editor-cmd $pOpts --parents"
+		;;
+	move|mv|rename|ren)
+		cmdOpts="$mOpts $rOpts $qOpts --force --editor-cmd $pOpts \
+                         --parents --allow-mixed-revisions"
+		;;
+	patch)
+		cmdOpts="$qOpts $pOpts --dry-run --ignore-whitespace \
+			--reverse-diff --strip"
+		;;
+	propdel|pdel|pd)
+		cmdOpts="$qOpts -R --recursive $rOpts $pOpts $cOpts \
+                         --depth"
+		[[ $isRevProp || ! $prop ]] && cmdOpts="$cmdOpts --revprop"
+		;;
+	propedit|pedit|pe)
+		cmdOpts="--editor-cmd $pOpts $mOpts --force"
+		[[ $isRevProp || ! $prop ]] && \
+		    cmdOpts="$cmdOpts --revprop $rOpts"
+		;;
+	propget|pget|pg)
+	        cmdOpts="-v --verbose -R --recursive $rOpts --strict \
+		         $pOpts $cOpts --depth --xml --show-inherited-props"
+		[[ $isRevProp || ! $prop ]] && cmdOpts="$cmdOpts --revprop"
+		;;
+	proplist|plist|pl)
+		cmdOpts="-v --verbose -R --recursive $rOpts --revprop $qOpts \
+		         $pOpts $cOpts --depth --xml --show-inherited-props"
+		;;
+	propset|pset|ps)
+		cmdOpts="$qOpts --targets -R --recursive \
+		         --encoding $pOpts --force $cOpts --depth"
+		[[ $isRevProp || ! $prop ]] && \
+		    cmdOpts="$cmdOpts --revprop $rOpts"
+		[[ $val ]] || cmdOpts="$cmdOpts -F --file"
+		;;
+        relocate)
+		cmdOpts="--ignore-externals $pOpts"
+		;;
+        resolve)
+                cmdOpts="--targets -R --recursive $qOpts $pOpts --accept \
+                         --depth"
+                ;;
+	resolved)
+		cmdOpts="--targets -R --recursive $qOpts $pOpts --depth"
+		;;
+	revert)
+		cmdOpts="--targets -R --recursive $qOpts $cOpts \
+                         --depth $pOpts"
+		;;
+	status|stat|st)
+		cmdOpts="-u --show-updates -v --verbose $nOpts $qOpts $pOpts \
+		         --no-ignore --ignore-externals --incremental --xml \
+                         $cOpts"
+		;;
+	switch|sw)
+		cmdOpts="--relocate $rOpts $nOpts $qOpts $pOpts --diff3-cmd \
+                         --force --accept --ignore-externals --set-depth \
+		         --ignore-ancestry"
+		;;
+	unlock)
+		cmdOpts="--targets --force $pOpts"
+		;;
+	update|up)
+		cmdOpts="$rOpts $nOpts $qOpts $pOpts --diff3-cmd \
+                         --ignore-externals --force --accept $cOpts \
+                         --parents --editor-cmd --set-depth"
+		;;
+	upgrade)
+		cmdOpts="$qOpts $pOpts"
+		;;
+	*)
+		;;
+	esac
+
+	# add options that are nearly always available
+	[[ "$cmd" != "--version" ]] && cmdOpts="$cmdOpts $helpOpts"
+	cmdOpts="$cmdOpts --config-dir --config-option"
+
+        # --accept (edit|launch) incompatible with --non-interactive
+	if [[ $acceptOpt == @(edit|launch) ]] ;
+	then
+	    cmdOpts=${cmdOpts/ --non-interactive / }
+	fi
+
+	# take out options already given
+	for opt in $options
+	do
+		local optBase
+
+		# remove leading dashes and arguments
+		case $opt in
+		--*)    optBase=${opt/=*/} ;;
+		-*)     optBase=${opt:0:2} ;;
+		esac
+
+		cmdOpts=" $cmdOpts "
+		cmdOpts=${cmdOpts/ ${optBase} / }
+
+		# take out alternatives and mutually exclusives
+		case $optBase in
+		-v)              cmdOpts=${cmdOpts/ --verbose / } ;;
+		--verbose)       cmdOpts=${cmdOpts/ -v / } ;;
+		-N)              cmdOpts=${cmdOpts/ --non-recursive / } ;;
+		--non-recursive) cmdOpts=${cmdOpts/ -N / } ;;
+		-R)              cmdOpts=${cmdOpts/ --recursive / } ;;
+		--recursive)     cmdOpts=${cmdOpts/ -R / } ;;
+		-x)              cmdOpts=${cmdOpts/ --extensions / } ;;
+		--extensions)    cmdOpts=${cmdOpts/ -x / } ;;
+		-q)              cmdOpts=${cmdOpts/ --quiet / } ;;
+		--quiet)         cmdOpts=${cmdOpts/ -q / } ;;
+		-h)              cmdOpts=${cmdOpts/ --help / } ;;
+		--help)          cmdOpts=${cmdOpts/ -h / } ;;
+		-l)              cmdOpts=${cmdOpts/ --limit / } ;;
+		--limit)         cmdOpts=${cmdOpts/ -l / } ;;
+		-r)              cmdOpts=${cmdOpts/ --revision / } ;;
+		--revision)      cmdOpts=${cmdOpts/ -r / } ;;
+		-c)              cmdOpts=${cmdOpts/ --change / } ;;
+		--change)        cmdOpts=${cmdOpts/ -c / } ;;
+		--auto-props)    cmdOpts=${cmdOpts/ --no-auto-props / } ;;
+		--no-auto-props) cmdOpts=${cmdOpts/ --auto-props / } ;;
+		-g)              cmdOpts=${cmdOpts/ --use-merge-history / } ;;
+		--use-merge-history)
+                                 cmdOpts=${cmdOpts/ -g / } ;;
+		-m|--message|-F|--file)
+			cmdOpts=${cmdOpts/ --message / }
+			cmdOpts=${cmdOpts/ -m / }
+			cmdOpts=${cmdOpts/ --file / }
+			cmdOpts=${cmdOpts/ -F / }
+			;;
+		esac
+
+		# remove help options within help subcommand
+		if [ $isHelpCmd ] ; then
+		    cmdOpts=${cmdOpts/ -h / }
+		    cmdOpts=${cmdOpts/ --help / }
+		fi
+	done
+
+	# provide help about available options
+	COMPREPLY=( $( compgen -W "$cmdOpts" -- $cur ) )
+	return 0
+}
+complete -F _svn -o default -X '@(*/.svn|*/.svn/|.svn|.svn/)' svn
+
+_svnadmin ()
+{
+	local cur cmds cmdOpts optsParam opt helpCmds optBase i
+
+	COMPREPLY=()
+	cur=${COMP_WORDS[COMP_CWORD]}
+
+	# Possible expansions, without pure-prefix abbreviations such as "h".
+	cmds='crashtest create deltify dump freeze help hotcopy list-dblogs \
+	      list-unused-dblogs load lock lslocks lstxns pack recover rmlocks \
+	      rmtxns setlog setrevprop setuuid unlock upgrade verify --version'
+
+	if [[ $COMP_CWORD -eq 1 ]] ; then
+		COMPREPLY=( $( compgen -W "$cmds" -- $cur ) )
+		return 0
+	fi
+
+	# options that require a parameter
+	# note: continued lines must end '|' continuing lines must start '|'
+	optsParam="-r|--revision|--parent-dir|--fs-type|-M|--memory-cache-size"
+	optsParam="$optsParam|-F|--file"
+
+	# if not typing an option, or if the previous option required a
+	# parameter, then fallback on ordinary filename expansion
+	helpCmds='help|--help|h|\?'
+	if [[ ${COMP_WORDS[1]} != @($helpCmds) ]] && \
+	   [[ "$cur" != -* ]] || \
+	   [[ ${COMP_WORDS[COMP_CWORD-1]} == @($optsParam) ]] ; then
+		return 0
+	fi
+
+	cmdOpts=
+	case ${COMP_WORDS[1]} in
+	create)
+		cmdOpts="--bdb-txn-nosync --bdb-log-keep --config-dir \
+		         --fs-type --pre-1.4-compatible --pre-1.5-compatible \
+		         --pre-1.6-compatible --compatible-version"
+		;;
+	deltify)
+		cmdOpts="-r --revision -q --quiet"
+		;;
+	dump)
+		cmdOpts="-r --revision --incremental -q --quiet --deltas \
+		         -M --memory-cache-size"
+		;;
+	freeze)
+		cmdOpts="-F --file"
+		;;
+	help|h|\?)
+		cmdOpts="$cmds"
+		;;
+	hotcopy)
+		cmdOpts="--clean-logs"
+		;;
+	load)
+		cmdOpts="--ignore-uuid --force-uuid --parent-dir -q --quiet \
+		         --use-pre-commit-hook --use-post-commit-hook \
+		         --bypass-prop-validation -M --memory-cache-size"
+		;;
+	lock|unlock)
+		cmdOpts="--bypass-hooks"
+		;;
+	recover)
+		cmdOpts="--wait"
+		;;
+	rmtxns)
+		cmdOpts="-q --quiet"
+		;;
+	setlog)
+		cmdOpts="-r --revision --bypass-hooks"
+		;;
+	setrevprop)
+		cmdOpts="-r --revision --use-pre-revprop-change-hook \
+		         --use-post-revprop-change-hook"
+		;;
+	verify)
+		cmdOpts="-r --revision -q --quiet"
+		;;
+	*)
+		;;
+	esac
+
+	cmdOpts="$cmdOpts --help -h"
+
+	# take out options already given
+	for (( i=2; i<=$COMP_CWORD-1; ++i )) ; do
+		opt=${COMP_WORDS[$i]}
+
+		case $opt in
+		--*)    optBase=${opt/=*/} ;;
+		-*)     optBase=${opt:0:2} ;;
+		esac
+
+		cmdOpts=" $cmdOpts "
+		cmdOpts=${cmdOpts/ ${optBase} / }
+
+		# take out alternatives
+		case $optBase in
+		-q)              cmdOpts=${cmdOpts/ --quiet / } ;;
+		--quiet)         cmdOpts=${cmdOpts/ -q / } ;;
+		-h)              cmdOpts=${cmdOpts/ --help / } ;;
+		--help)          cmdOpts=${cmdOpts/ -h / } ;;
+		-r)              cmdOpts=${cmdOpts/ --revision / } ;;
+		--revision)      cmdOpts=${cmdOpts/ -r / } ;;
+		-F)              cmdOpts=${cmdOpts/ --file / } ;;
+		--file)          cmdOpts=${cmdOpts/ -F / } ;;
+		-M)              cmdOpts=${cmdOpts/ --memory-cache-size / } ;;
+		--memory-cache-size) cmdOpts=${cmdOpts/ --M / } ;;
+		esac
+
+		# skip next option if this one requires a parameter
+		if [[ $opt == @($optsParam) ]] ; then
+			((++i))
+		fi
+	done
+
+	COMPREPLY=( $( compgen -W "$cmdOpts" -- $cur ) )
+
+	return 0
+}
+complete -F _svnadmin -o default svnadmin
+
+_svndumpfilter ()
+{
+	local cur cmds cmdOpts optsParam opt helpCmds optBase i
+
+	COMPREPLY=()
+	cur=${COMP_WORDS[COMP_CWORD]}
+
+	# Possible expansions, without pure-prefix abbreviations such as "h".
+	cmds='exclude help include --version'
+
+	if [[ $COMP_CWORD -eq 1 ]] ; then
+		COMPREPLY=( $( compgen -W "$cmds" -- $cur ) )
+		return 0
+	fi
+
+	# options that require a parameter
+	# note: continued lines must end '|' continuing lines must start '|'
+	optsParam="--targets"
+
+	# if not typing an option, or if the previous option required a
+	# parameter, then fallback on ordinary filename expansion
+	helpCmds='help|--help|h|\?'
+	if [[ ${COMP_WORDS[1]} != @($helpCmds) ]] && \
+	   [[ "$cur" != -* ]] || \
+	   [[ ${COMP_WORDS[COMP_CWORD-1]} == @($optsParam) ]] ; then
+		return 0
+	fi
+
+	cmdOpts=
+	case ${COMP_WORDS[1]} in
+	exclude|include)
+		cmdOpts="--drop-empty-revs --renumber-revs
+		         --skip-missing-merge-sources --targets
+		         --preserve-revprops --quiet"
+		;;
+	help|h|\?)
+		cmdOpts="$cmds"
+		;;
+	*)
+		;;
+	esac
+
+	cmdOpts="$cmdOpts --help -h"
+
+	# take out options already given
+	for (( i=2; i<=$COMP_CWORD-1; ++i )) ; do
+		opt=${COMP_WORDS[$i]}
+
+		case $opt in
+		--*)    optBase=${opt/=*/} ;;
+		-*)     optBase=${opt:0:2} ;;
+		esac
+
+		cmdOpts=" $cmdOpts "
+		cmdOpts=${cmdOpts/ ${optBase} / }
+
+		# take out alternatives
+		case $optBase in
+		-h)              cmdOpts=${cmdOpts/ --help / } ;;
+		--help)          cmdOpts=${cmdOpts/ -h / } ;;
+		esac
+
+		# skip next option if this one requires a parameter
+		if [[ $opt == @($optsParam) ]] ; then
+			((++i))
+		fi
+	done
+
+	COMPREPLY=( $( compgen -W "$cmdOpts" -- $cur ) )
+
+	return 0
+}
+complete -F _svndumpfilter -o default svndumpfilter
+
+_svnlook ()
+{
+	local cur cmds cmdOpts optsParam opt helpCmds optBase i
+
+	COMPREPLY=()
+	cur=${COMP_WORDS[COMP_CWORD]}
+
+	# Possible expansions, without pure-prefix abbreviations such as "h".
+	cmds='author cat changed date diff dirs-changed help history info \
+	      lock log propget proplist tree uuid youngest --version'
+
+	if [[ $COMP_CWORD -eq 1 ]] ; then
+		COMPREPLY=( $( compgen -W "$cmds" -- $cur ) )
+		return 0
+	fi
+
+	# options that require a parameter
+	# note: continued lines must end '|' continuing lines must start '|'
+	optsParam="-r|--revision|-t|--transaction|-l|--limit|-x|--extensions"
+
+	# if not typing an option, or if the previous option required a
+	# parameter, then fallback on ordinary filename expansion
+	helpCmds='help|--help|h|\?'
+	if [[ ${COMP_WORDS[1]} != @($helpCmds) ]] && \
+	   [[ "$cur" != -* ]] || \
+	   [[ ${COMP_WORDS[COMP_CWORD-1]} == @($optsParam) ]] ; then
+		return 0
+	fi
+
+	cmdOpts=
+	case ${COMP_WORDS[1]} in
+	author)
+		cmdOpts="-r --revision -t --transaction"
+		;;
+	cat)
+		cmdOpts="-r --revision -t --transaction"
+		;;
+	changed)
+		cmdOpts="-r --revision -t --transaction --copy-info"
+		;;
+	date)
+		cmdOpts="-r --revision -t --transaction"
+		;;
+	diff)
+		cmdOpts="-r --revision -t --transaction --diff-copy-from \
+		         --no-diff-added --no-diff-deleted -x --extensions"
+		;;
+	dirs-changed)
+		cmdOpts="-r --revision -t --transaction"
+		;;
+	help|h|\?)
+		cmdOpts="$cmds"
+		;;
+	history)
+		cmdOpts="-r --revision -l --limit --show-ids"
+		;;
+	info)
+		cmdOpts="-r --revision -t --transaction"
+		;;
+	lock)
+		cmdOpts=
+		;;
+	log)
+		cmdOpts="-r --revision -t --transaction"
+		;;
+	propget|pget|pg)
+		cmdOpts="-r --revision -t --transaction --revprop"
+		;;
+	proplist|plist|pl)
+		cmdOpts="-r --revision -t --transaction --revprop -v --verbose --xml"
+		;;
+	tree)
+		cmdOpts="-r --revision -t --transaction --full-paths -N --non-recursive --show-ids"
+		;;
+	uuid)
+		cmdOpts=
+		;;
+	youngest)
+		cmdOpts=
+		;;
+	*)
+		;;
+	esac
+
+	cmdOpts="$cmdOpts --help -h"
+
+	# take out options already given
+	for (( i=2; i<=$COMP_CWORD-1; ++i )) ; do
+		opt=${COMP_WORDS[$i]}
+
+		case $opt in
+		--*)    optBase=${opt/=*/} ;;
+		-*)     optBase=${opt:0:2} ;;
+		esac
+
+		cmdOpts=" $cmdOpts "
+		cmdOpts=${cmdOpts/ ${optBase} / }
+
+		# take out alternatives
+		case $optBase in
+		-N)              cmdOpts=${cmdOpts/ --non-recursive / } ;;
+		--non-recursive) cmdOpts=${cmdOpts/ -N / } ;;
+		-h)              cmdOpts=${cmdOpts/ --help / } ;;
+		--help)          cmdOpts=${cmdOpts/ -h / } ;;
+		-l)              cmdOpts=${cmdOpts/ --limit / } ;;
+		--limit)         cmdOpts=${cmdOpts/ -l / } ;;
+		-r)              cmdOpts=${cmdOpts/ --revision / } ;;
+		--revision)      cmdOpts=${cmdOpts/ -r / } ;;
+		-t)              cmdOpts=${cmdOpts/ --transaction / } ;;
+		--transaction)   cmdOpts=${cmdOpts/ -t / } ;;
+		-v)              cmdOpts=${cmdOpts/ --verbose / } ;;
+		--verbose)       cmdOpts=${cmdOpts/ -v / } ;;
+		-x)              cmdOpts=${cmdOpts/ --extensions / } ;;
+		--extensions)    cmdOpts=${cmdOpts/ -x / } ;;
+		esac
+
+		# skip next option if this one requires a parameter
+		if [[ $opt == @($optsParam) ]] ; then
+			((++i))
+		fi
+	done
+
+	COMPREPLY=( $( compgen -W "$cmdOpts" -- $cur ) )
+
+	return 0
+}
+complete -F _svnlook -o default svnlook
+
+_svnsync ()
+{
+	local cur cmds cmdOpts optsParam opt helpCmds optBase i
+
+	COMPREPLY=()
+	cur=${COMP_WORDS[COMP_CWORD]}
+
+	# Possible expansions, without pure-prefix abbreviations such as "h".
+	cmds='copy-revprops help info initialize synchronize --version'
+
+	if [[ $COMP_CWORD -eq 1 ]] ; then
+		COMPREPLY=( $( compgen -W "$cmds" -- $cur ) )
+		return 0
+	fi
+
+	# options that require a parameter
+	# note: continued lines must end '|' continuing lines must start '|'
+	optsParam="--config-dir|--config-option|--source-username|--source-password"
+	optsParam="$optsParam|--sync-username|--sync-password"
+
+	# if not typing an option, or if the previous option required a
+	# parameter, then fallback on ordinary filename expansion
+	helpCmds='help|--help|h|\?'
+	if [[ ${COMP_WORDS[1]} != @($helpCmds) ]] && \
+	   [[ "$cur" != -* ]] || \
+	   [[ ${COMP_WORDS[COMP_CWORD-1]} == @($optsParam) ]] ; then
+		return 0
+	fi
+
+	cmdOpts=
+	case ${COMP_WORDS[1]} in
+	copy-revprops|initialize|init|synchronize|sync)
+		cmdOpts="--non-interactive --no-auth-cache --trust-server-cert \
+		         --source-username --source-password --sync-username \
+		         --sync-password --config-dir --config-option -q --quiet"
+		;;
+	help|h|\?)
+		cmdOpts="$cmds"
+		;;
+	info)
+		cmdOpts="--non-interactive --no-auth-cache --trust-server-cert \
+		         --source-username --source-password --sync-username \
+		         --sync-password --config-dir --config-option"
+		;;
+	*)
+		;;
+	esac
+
+	cmdOpts="$cmdOpts --help -h"
+
+	# take out options already given
+	for (( i=2; i<=$COMP_CWORD-1; ++i )) ; do
+		opt=${COMP_WORDS[$i]}
+
+		case $opt in
+		--*)    optBase=${opt/=*/} ;;
+		-*)     optBase=${opt:0:2} ;;
+		esac
+
+		cmdOpts=" $cmdOpts "
+		cmdOpts=${cmdOpts/ ${optBase} / }
+
+		# take out alternatives
+		case $optBase in
+		-h)              cmdOpts=${cmdOpts/ --help / } ;;
+		--help)          cmdOpts=${cmdOpts/ -h / } ;;
+		-q)              cmdOpts=${cmdOpts/ --quiet / } ;;
+		--quiet)         cmdOpts=${cmdOpts/ -q / } ;;
+		esac
+
+		# skip next option if this one requires a parameter
+		if [[ $opt == @($optsParam) ]] ; then
+			((++i))
+		fi
+	done
+
+	COMPREPLY=( $( compgen -W "$cmdOpts" -- $cur ) )
+
+	return 0
+}
+complete -F _svnsync -o default svnsync
+
+# reasonable completion for 'svnversion'
+_svnversion ()
+{
+	local cmdOpts=" -n --no-newline -c --committed -h --help --version "
+	local cur=${COMP_WORDS[COMP_CWORD]}
+
+	COMPREPLY=()
+
+	# parse current options
+	local options= wcpath= trailurl= last='none' stat= opt= i=-1 isCur=
+	for opt in ${COMP_WORDS[@]}
+	do
+		[[ $i -eq $COMP_CWORD ]] && stat=$last
+		let i++
+
+		# are we processing the current word?
+		isCur=
+		[[ $i -eq $COMP_CWORD ]] && isCur=1
+
+		# skip first command, should be 'svnversion'
+		if [ $last = 'none' ] ; then
+			last='first'
+			continue
+		fi
+
+		# get options
+		if [[ $last != 'arg' && $opt == -* ]]
+		then
+			# if '--' is at the current position, it means that we are looking
+			# for '--*' options, and not the end of option processing.
+			if [[ $opt = '--' && ! $isCur ]]
+			then
+				last='arg'
+			else
+				options="$options $opt "
+				last='opt'
+			fi
+			continue
+		fi
+		# get arguments
+		if [[ $opt != -* ]]
+		then
+			last='arg'
+			if [[ ! $wcpath ]]
+			then
+				wcpath=$opt
+			elif [[ ! $trailurl ]]
+			then
+				trailurl=$opt
+			fi
+		fi
+	done
+	[[ $stat ]] || stat=$last
+
+	# argument part
+	if [[ $cur != -* || $stat = 'arg' ]]
+	then
+		[[ $wcpath && $trailurl ]] && COMPREPLY=( '' )
+		return 0
+	fi
+
+	# suggest options, and  take out already given options
+	for opt in $options
+	do
+		# take out options
+		cmdOpts=${cmdOpts/ $opt / }
+
+		# take out alternatives
+		case $opt in
+			-n)              cmdOpts=${cmdOpts/ --no-newline / } ;;
+			--no-newline)    cmdOpts=${cmdOpts/ -n / } ;;
+			-h)              cmdOpts=${cmdOpts/ --help / } ;;
+			--help)          cmdOpts=${cmdOpts/ -h / } ;;
+			-c)              cmdOpts=${cmdOpts/ --committed / } ;;
+			--committed)     cmdOpts=${cmdOpts/ -c / } ;;
+		esac
+	done
 
-# Make sure svn is installed
-_command_exists svn || return
+	COMPREPLY=( $( compgen -W "$cmdOpts" -- $cur ) )
 
-# Don't handle completion if it's already managed
-if _completion_exists svn; then
-	_log_warning "completion already loaded - this usually means it is safe to stop using this completion"
 	return 0
-fi
-
-_svn_bash_completion_xcrun_svn=
-if _command_exists xcrun; then
-	_svn_bash_completion_xcrun_svn="$(xcrun --find svn)"
-fi
-_svn_bash_completion_paths=(
-	# Standard locations
-	"${SVN_EXE%/*}/../etc/bash_completion.d/subversion"
-	# MacOS non-system locations
-	"${_svn_bash_completion_xcrun_svn%/bin/svn}/etc/bash_completion.d/subversion"
-)
-
-# Load the first completion file found
-_svn_bash_completion_found=false
-for _comp_path in "${_svn_bash_completion_paths[@]}"; do
-	if [[ -r "$_comp_path" ]]; then
-		_svn_bash_completion_found=true
-		# shellcheck disable=SC1090 # don't follow
-		source "$_comp_path"
-		break
-	fi
-done
-
-# Cleanup
-if [[ "${_svn_bash_completion_found}" == false ]]; then
-	_log_warning "no completion files found - please try enabling the 'system' completion instead."
-fi
-unset "${!_svn_bash_completion@}"
+}
+# -X option does not seem to work?
+complete -F _svnversion -o dirnames -X '*.svn*' svnversion
diff --git a/completion/available/system.completion.bash b/completion/available/system.completion.bash
index bb1d14eb..113a93f5 100644
--- a/completion/available/system.completion.bash
+++ b/completion/available/system.completion.bash
@@ -1,52 +1,59 @@
-# shellcheck shell=bash
+#!/usr/bin/env bash
 #
 # Loads the system's Bash completion modules.
 # If Homebrew is installed (OS X), it's Bash completion modules are loaded.
 
-# Load before other completions
-# BASH_IT_LOAD_PRIORITY: 325
-
-# Bash-completion is too large and complex to expect to handle unbound variables throughout the whole codebase.
-if shopt -qo nounset; then
+if shopt -qo nounset
+then # Bash-completion is too large and complex to expect to handle unbound variables throughout the whole codebase.
 	__bash_it_restore_nounset=true
 	shopt -uo nounset
 else
 	__bash_it_restore_nounset=false
 fi
 
-# shellcheck disable=SC1090 disable=SC1091
-if [[ -r "${BASH_COMPLETION:-}" ]]; then
+if [[ -r "${BASH_COMPLETION:-}" ]] ; then
+  # shellcheck disable=SC1091
 	source "${BASH_COMPLETION}"
-elif [[ -r /etc/bash_completion ]]; then
-	source /etc/bash_completion
+
+elif [[ -r /etc/bash_completion ]] ; then
+  # shellcheck disable=SC1091
+  source /etc/bash_completion
+
 # Some distribution makes use of a profile.d script to import completion.
-elif [[ -r /etc/profile.d/bash_completion.sh ]]; then
-	source /etc/profile.d/bash_completion.sh
-elif _bash_it_homebrew_check; then
-	: "${BASH_COMPLETION_COMPAT_DIR:=${BASH_IT_HOMEBREW_PREFIX}/etc/bash_completion.d}"
-	case "${BASH_VERSION}" in
-		1* | 2* | 3.0* | 3.1*)
-			_log_warning "Cannot load completion due to version of shell. Are you using Bash 3.2+?"
-			;;
-		3.2* | 4.0* | 4.1*)
-			# Import version 1.x of bash-completion, if installed.
-			BASH_COMPLETION="${BASH_IT_HOMEBREW_PREFIX}/opt/bash-completion@1/etc/bash_completion"
-			if [[ -r "$BASH_COMPLETION" ]]; then
-				source "$BASH_COMPLETION"
-			else
-				unset BASH_COMPLETION
-			fi
-			;;
-		4.2* | 5* | *)
-			# homebrew/versions/bash-completion2 (required for projects.completion.bash) is installed to this path
-			if [[ -r "${BASH_IT_HOMEBREW_PREFIX}/opt/bash-completion@2/etc/profile.d/bash_completion.sh" ]]; then
-				source "${BASH_IT_HOMEBREW_PREFIX}/opt/bash-completion@2/etc/profile.d/bash_completion.sh"
-			fi
-			;;
-	esac
+elif [[ -r /etc/profile.d/bash_completion.sh ]] ; then
+  # shellcheck disable=SC1091
+  source /etc/profile.d/bash_completion.sh
+
+elif _bash_it_homebrew_check
+then
+  : ${BASH_COMPLETION_COMPAT_DIR:=$BASH_IT_HOMEBREW_PREFIX/etc/bash_completion.d}
+
+  case "${BASH_VERSION}" in
+  1*|2*|3.0*|3.1*)
+    _log_warning "Cannot load completion due to version of shell. Are you using Bash 3.2+?"
+    ;;
+  3.2*|4.0*|4.1*)
+    # Import version 1.x of bash-completion, if installed.
+    BASH_COMPLETION="$BASH_IT_HOMEBREW_PREFIX/opt/bash-completion@1/etc/bash_completion"
+    if [[ -r "$BASH_COMPLETION" ]] ; then
+      # shellcheck disable=SC1090
+      source "$BASH_COMPLETION"
+    else
+      unset BASH_COMPLETION
+    fi
+    ;;
+  4.2*|5*|*)
+    # homebrew/versions/bash-completion2 (required for projects.completion.bash) is installed to this path
+    if [[ -r "$BASH_IT_HOMEBREW_PREFIX"/etc/profile.d/bash_completion.sh ]] ; then
+      # shellcheck disable=SC1090
+      source "$BASH_IT_HOMEBREW_PREFIX"/etc/profile.d/bash_completion.sh
+    fi
+    ;;
+  esac
 fi
 
-if [[ ${__bash_it_restore_nounset:-false} == "true" ]]; then
+if $__bash_it_restore_nounset
+then
 	shopt -so nounset
 fi
 unset __bash_it_restore_nounset
diff --git a/completion/available/tldr.completion.bash b/completion/available/tldr.completion.bash
new file mode 100644
index 00000000..493996fa
--- /dev/null
+++ b/completion/available/tldr.completion.bash
@@ -0,0 +1,43 @@
+#!/usr/bin/env bash
+
+# I don't use bash, but I remember this works.
+# If anyone has an improved, and better version, go ahead, open a pull-request.
+#
+# Copyright (C) 2016 Arvid Gerstmann
+#
+
+_tldr_get_files() {
+	local ret
+	local files="$(find $HOME/.tldrc/tldr-master/pages/$1 -name '*.md' -exec basename {} .md \;)"
+
+	IFS=$'\n\t'
+	for f in $files; do
+	    echo $f
+	done
+}
+
+_tldr_complete() {
+    COMPREPLY=()
+	local word="${COMP_WORDS[COMP_CWORD]}"
+	local cmpl=""
+    if [ "$word" = "-" ]; then
+        cmpl=$(echo $'\n-v\n-h\n-u\n-c\n-p\n-r' | sort)
+    elif [ "$word" = "--" ]; then
+        cmpl=$(echo $'--version\n--help\n--update\n--clear-cache\n--platform\n--render' | sort)
+    else
+        if [ -d "$HOME/.tldrc/tldr-master/pages" ]; then
+            local platform="$(uname)"
+            cmpl="$(_tldr_get_files common | sort | uniq)"
+            if [ "$platform" = "Darwin" ]; then
+                cmpl="${cmpl}$(_tldr_get_files osx | sort | uniq)"
+            elif [ "$platform" = "Linux" ]; then
+                cmpl="${cmpl}$(_tldr_get_files linux | sort | uniq)"
+            elif [ "$platform" = "SunOS" ]; then
+                cmpl="${cmpl}$(_tldr_get_files sunos | sort | uniq)"
+            fi
+        fi
+    fi
+    COMPREPLY=( $(compgen -W "$cmpl" -- "$word") )
+}
+
+complete -F _tldr_complete tldr
diff --git a/completion/available/tmuxinator.completion.bash b/completion/available/tmuxinator.completion.bash
new file mode 100755
index 00000000..cda27174
--- /dev/null
+++ b/completion/available/tmuxinator.completion.bash
@@ -0,0 +1,25 @@
+#!/usr/bin/env bash
+
+_tmuxinator() {
+    COMPREPLY=()
+    local word
+    word="${COMP_WORDS[COMP_CWORD]}"
+
+    if [ "$COMP_CWORD" -eq 1 ]; then
+        #local commands="$(compgen -W "$(tmuxinator commands)" -- "$word")"
+        local projects="$(compgen -W "$(tmuxinator completions start)" -- "$word")"
+
+        COMPREPLY=( $commands $projects )
+    elif [ "$COMP_CWORD" -eq 2 ]; then
+        local words
+        words=("${COMP_WORDS[@]}")
+        unset words[0]
+        unset words[$COMP_CWORD]
+        local completions
+        completions=$(tmuxinator completions "${words[@]}")
+        COMPREPLY=( $(compgen -W "$completions" -- "$word") )
+    fi
+}
+
+complete -F _tmuxinator tmuxinator mux
+alias mux="tmuxinator"
diff --git a/completion/available/ttjava.completion.bash b/completion/available/ttjava.completion.bash
new file mode 100644
index 00000000..8e57dbd1
--- /dev/null
+++ b/completion/available/ttjava.completion.bash
@@ -0,0 +1,7 @@
+#!/usr/bin/env bash
+
+# ----------------------------------------------------------------------------
+# Run!
+
+TTJAVA=$(command -v ttjava)
+[[ $TTJAVA ]] && eval "$( ttjava init )"
diff --git a/completion/available/wd.completion.bash b/completion/available/wd.completion.bash
new file mode 100644
index 00000000..1273f03d
--- /dev/null
+++ b/completion/available/wd.completion.bash
@@ -0,0 +1,163 @@
+# shellcheck shell=bash
+cite "about-completion"
+about-completion "wd completion"
+
+_wdd() {
+  local wdd="$HOME/.wdd"
+  [[ -d "$wdd" ]] || mkdir "$wdd"
+
+  echo "$wdd"
+}
+
+_warp_points() {
+  ls "$(_wdd)/"| sed 's|@||'
+}
+
+_point_from_path() {
+  echo "$1" | cut -d/ -f1
+}
+
+_path_without_point() {
+  if [[ "$1" =~ "/" ]]; then
+    echo "$1" | cut -d/ -f2-
+  fi
+}
+
+_leading_folders_from_path() {
+  if [[ "$1" =~ "/" ]]; then
+    echo "$1" | rev | cut -d/ -f2- | rev | sed 's|$|/|'
+  fi
+}
+
+_path_without_leading_folders() {
+  echo "$1" | rev | cut -d/ -f1 | rev
+}
+
+_point_destination() {
+  local wdd="$(_wdd)"
+  local point="$1"
+
+  echo "$(readlink $wdd/$point)"
+}
+
+_wd_autocomplete() {
+  local current="${COMP_WORDS[COMP_CWORD]}"
+
+  if [[ "$current" =~ "/" ]]; then
+    local point="$(_point_from_path "$current")"
+    local subpath="$(_path_without_point "$current")"
+    local destination="$(_point_destination "$point")"
+    local subfolders="$(_leading_folders_from_path "$subpath")"
+    local completions="$(ls -F "$destination/$subfolders" | sed 's|@$||')"
+    current="$(_path_without_leading_folders "$subpath")"
+
+    COMPREPLY=($(compgen -W "$completions" -P "$point/$subfolders" -- $current))
+  else
+    COMPREPLY=($(compgen -W "$(_warp_points)" -- $current))
+  fi
+}
+
+wd() {
+  local wdd="$(_wdd)"
+
+  local point_name="$2"
+  local point_path="$wdd/$point_name"
+  local point_destination="$(readlink $point_path)"
+  local tmux_on=0
+  local make_on=0
+
+  [[ -z "$point_destination" ]] && point_destination="no point destination"
+
+  case "x$1" in
+    xt)
+      shift
+      tmux_on=1
+    ;;
+    # xmk)
+    #   shift
+    #   echo $( redis-bash-cli get $1 )
+    #   return $?
+    # ;;
+    xadd)
+      if ln -s "$PWD" "$point_path" &> /dev/null; then
+        echo "Added warp point '$point_name' ($PWD)"
+        return 0
+      else
+        echo "Error adding warp point '$point_name' ($PWD)"
+        return 1
+      fi
+    ;;
+    xrm)
+      if rm -f "$point_path" &> /dev/null; then
+        echo "Removed warp point '$point_name' ($point_destination)"
+        return 0
+      else
+        echo "Error removing warp point '$point_name' ($point_destination)"
+        return 1
+      fi
+    ;;
+    xls)
+      local point_list=$(ls -l "$wdd/" | grep -v '^total' | grep -Eo '\b\w+\b ->.*' | awk -F' -> ' '{printf "\033[95m%14s\033[0m \033[92m%s\033[0m\n", $1, $2}')
+      echo "$point_list" | grep "$2"
+      return 0
+    ;;
+    xfzf)
+      local point_list=$(ls -l "$wdd/" | grep -v '^total' | grep -Eo '\b\w+\b ->.*' | awk -F' -> ' '{printf "%14s %s\n", $1, $2}')
+      ff=$(echo "$point_list" | grep "$2" | fzf-tmux -l 100% --multi --reverse --color fg:252,bg:233,hl:67,fg+:252,bg+:235,hl+:81 --color info:144,prompt:161,spinner:135,pointer:135,marker:118)
+      echo $ff| awk -F' ' '{printf "\033[95m%14s\033[0m \033[92m%s\033[0m\n", $1, $2}'
+      echo =$ff=| sed  's/= \(\w\+\) .*/wd \1/'| xcopy
+      return 0
+    ;;
+    xw)
+      cd ~/work
+      return $?
+    ;;
+    x-h | x--help)
+      echo "Usage: wd [command] <point_name>"
+      echo "Commands:"
+      echo "  add <point_name>    Adds the current working directory to your warp points"
+      echo "  rm <point_name>     Removes the named point from your warp points"
+      echo "  t <point_name>      Open points with tmux"
+      echo "  ls                  Prints all warp points"
+      echo "  ls <point_name>     Prints all warp points matching the specified name"
+      echo "  -                   warps to previous working directory"
+      echo "  -h, --help          Prints this lovely message"
+      return 0
+    ;;
+    x)
+      cd /workspace
+      return $?
+    ;;
+    x-)
+      cd -
+      return $?
+    ;;
+    x-*)
+      echo "Unknown option: '$1'"
+      return 1
+    ;;
+  esac
+
+  # if we get here, we're warping
+  local requested_point="$(_point_from_path "$1")"
+  local subpath="$(_path_without_point "$1")"
+
+  point_path="$wdd/$requested_point"
+
+  if [[ ! -L "$point_path" ]]; then
+    echo "Can't warp to point '$requested_point' because it doesn't exist."
+    return 1
+  fi
+
+  local requested_destination="$(readlink $point_path)/$subpath"
+
+  if [ $tmux_on -eq 1 ]; then
+    tmux new-window -c "$requested_destination"
+    return $?
+  fi
+
+  cd "$requested_destination"
+  return $?
+}
+
+complete -o nospace -F _wd_autocomplete wd
diff --git a/completion/available/xp.completion.bash b/completion/available/xp.completion.bash
new file mode 100644
index 00000000..49d25e7b
--- /dev/null
+++ b/completion/available/xp.completion.bash
@@ -0,0 +1,34 @@
+#!/usr/bin/env bash
+#                      __ __       ___
+#                     /\ \\ \    /'___`\
+#                     \ \ \\ \  /\_\ /\ \
+#                      \ \ \\ \_\/_/// /__
+#                       \ \__ ,__\ // /_\ \
+#                        \/_/\_\_//\______/
+#                           \/_/  \/_____/
+#                                         Algoritimos
+#
+#
+#      Author: Ivan Lopes
+#        Mail: ivan (at) 42algoritmos (dot) com (dot) br
+#        Site: htredis_get://www.42algoritmos.com.br
+#     License: gpl
+#       Phone: +1 561 801 7985
+#    Language: Shell Script
+#        File: redis.get.bash
+#        Date: Ter 28 Fev 2017 00:35:55 BRT
+# Description:
+#
+# ----------------------------------------------------------------------------
+#
+# ----------------------------------------------------------------------------
+
+##############################################################################
+##############################################################################
+##############################################################################
+
+# ----------------------------------------------------------------------------
+# Run!
+
+XP=$(command -v xp)
+[[ $XP ]] && eval "$( xp init )"
diff --git a/custom/cd.bash.DEPRECATED b/custom/cd.bash.DEPRECATED
new file mode 100644
index 00000000..b161b977
--- /dev/null
+++ b/custom/cd.bash.DEPRECATED
@@ -0,0 +1,32 @@
+#!/usr/bin/env bash
+#
+pushd()
+{
+  if [ $# -eq 0 ]; then
+    DIR="${HOME}"
+  else
+    DIR="$1"
+  fi
+
+  builtin pushd "${DIR}" > /dev/null
+  echo -n "DIRSTACK: "
+  dirs
+}
+
+pushd_builtin()
+{
+  builtin pushd > /dev/null
+  echo -n "DIRSTACK: "
+  dirs
+}
+
+popd()
+{
+  builtin popd > /dev/null
+  echo -n "DIRSTACK: "
+  dirs
+}
+
+alias cd='pushd'
+alias back='popd'
+alias flip='pushd_builtin'
diff --git a/custom/conan.bash b/custom/conan.bash
new file mode 100644
index 00000000..470f6320
--- /dev/null
+++ b/custom/conan.bash
@@ -0,0 +1,8 @@
+#!/usr/bin/env bash
+
+
+# export CONAN_COMPILER=gcc
+# export CONAN_COMPILER_VERSION=4.8
+
+# export CONAN_COMPILER=clang
+# export CONAN_COMPILER_VERSION=3.5
diff --git a/custom/environment.bash b/custom/environment.bash
new file mode 100644
index 00000000..0768c68b
--- /dev/null
+++ b/custom/environment.bash
@@ -0,0 +1,27 @@
+#!/usr/bin/env bash
+export DISPLAY=:0.0
+export XDG_CONFIG_HOME=$HOME/.config
+export NVIM_LISTEN_ADDRESS=/tmp/neovim.socket
+export AWT_TOOLKIT="MToolkit"
+
+export TERM=tmux-256color
+export COLORTERM=truecolor
+export COLORFGBG="15;0"
+export BAT_PAGER="less -RF"
+
+export PYENV_VIRTUALENV_DISABLE_PROMPT=1
+export CHTSH_URL=http://192.168.2.43:8002
+#export CHTSH_URL=0.0.0.0:8002
+export CHEATSH_INSTALLATION=~/.cheat.sh
+
+export DENO_INSTALL="${HOME}/.deno"
+export PATH="$DENO_INSTALL/bin:$PATH"
+
+export GLSLANG_INSTALL="/opt/glslang/"
+export PATH="$GLSLANG_INSTALL/bin:$PATH"
+
+export SRC_ENDPOINT=https://sourcegraph.com
+export SRC_ACCESS_TOKEN="$(git config sourcegraph.token)"
+
+export HOMEBREW_EDITOR=nvim
+export EDITOR=nvim
diff --git a/custom/funcoeszz.bash b/custom/funcoeszz.bash
new file mode 100644
index 00000000..1e5687cd
--- /dev/null
+++ b/custom/funcoeszz.bash
@@ -0,0 +1,8 @@
+#!/usr/bin/env bash
+#
+if [[ -e "${HOME}/developer/funcoeszz/funcoeszz" ]] ; then
+
+  ZZ_HOME="${HOME}/developer/funcoeszz/funcoeszz"
+  eval "$(cat $ZZ_HOME)"
+
+fi
diff --git a/custom/man.bash b/custom/man.bash
new file mode 100644
index 00000000..1d4814a6
--- /dev/null
+++ b/custom/man.bash
@@ -0,0 +1,19 @@
+#!/usr/bin/env bash
+#
+# This is an example file. Don't use this for your custom scripts. Instead, create another file within the
+# custom directory.
+#export EDITOR=$(which vi)
+export TDL_DATABASE=~/developer/tdldb
+export PAGER=more
+export MANPAGER='nvim +Man!'
+
+# Supports bold/underline/etc
+# See https://stackoverflow.com/a/4233818/9782020
+# function man {
+#     eval "unbuffer man -P cat \"$@\" | $MANPAGER"
+# }
+
+# No bold/underline/etc
+function man {
+    eval "command man \"$@\" | $MANPAGER"
+}
diff --git a/custom/tp.bash b/custom/tp.bash
new file mode 100644
index 00000000..fb317aa7
--- /dev/null
+++ b/custom/tp.bash
@@ -0,0 +1,35 @@
+#!/usr/bin/env bash
+#
+# This is an example file. Don't use this for your custom scripts. Instead, create another file within the
+# custom directory.
+
+export SHELLSCRIPT_TEMPLATE_PKG=/home/ivan/developer/scripts/tp/template
+export SHELLSCRIPT_CTEMPLATE=/home/ivan/developer/scripts/tp/ctemplate
+export SHELLSCRIPT_PKG=/home/ivan/developer/scripts/tp/bin-shellscript-pakages
+export PATH=/home/ivan/developer/scripts/tp/bin-shellscript-pakages:$PATH
+export SHELLSCRIPT_PAKAGES=/home/ivan/developer/scripts/tp/archive-shellscript-pakages
+
+mvToTemplate ()
+{
+  cp *.templatefile $SHELLSCRIPT_TEMPLATE_PKG
+}
+goTemplate ()
+{
+  cd  $SHELLSCRIPT_TEMPLATE_PKG
+}
+
+_tp()
+{
+  local cur prev opts
+  COMPREPLY=()
+  cur="${COMP_WORDS[COMP_CWORD]}"
+  prev="${COMP_WORDS[COMP_CWORD-1]}"
+  # n=$(( $(tp list --| wc -l) -1 ))
+  opts=`tp list --| awk '{print }'| sed -e '' | sed -e :a -e 'N; # s/\n/ /; ta'`
+
+  if [[ ${cur} == --* ]] ; then
+    COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
+    return 0
+  fi
+}
+complete -F _tp tp
diff --git a/custom/xfile.bash b/custom/xfile.bash
new file mode 100644
index 00000000..13c2d263
--- /dev/null
+++ b/custom/xfile.bash
@@ -0,0 +1,9 @@
+#!/usr/bin/env bash
+
+xfile() {
+  [ "$1" ] || {
+    nohup nautilus --no-desktop . >/dev/null 2>&1
+  }
+
+  nohup nautilus --no-desktop $1 >/dev/null 2>&1
+}
diff --git a/plugins/available/alias-completion.plugin.bash b/plugins/available/alias-completion.plugin.bash
index d23779f7..eb368d93 100644
--- a/plugins/available/alias-completion.plugin.bash
+++ b/plugins/available/alias-completion.plugin.bash
@@ -1,5 +1,105 @@
 # shellcheck shell=bash
-# stub for renamed file
+# Load after the other completions to understand what needs to be completed
+# BASH_IT_LOAD_PRIORITY: 365
 
-_enable-completion aliases && _disable-plugin alias-completion
-source "${BASH_IT?}/completion/available/aliases.completion.bash"
+cite about-plugin
+about-plugin 'Automatic completion of aliases'
+
+# References:
+# http://superuser.com/a/437508/119764
+# http://stackoverflow.com/a/1793178/1228454
+
+# This needs to be a plugin so it gets executed after the completions and the aliases have been defined.
+# Bash-it loads its components in the order
+# 1) Aliases
+# 2) Completions
+# 3) Plugins
+# 4) Custom scripts
+
+# Automatically add completion for all aliases to commands having completion functions
+function alias_completion {
+	local namespace="alias_completion"
+	local tmp_file completion_loader alias_name alias_tokens line completions
+	local alias_arg_words new_completion compl_func compl_wrapper
+
+	# parse function based completion definitions, where capture group 2 => function and 3 => trigger
+	local compl_regex='complete( +[^ ]+)* -F ([^ ]+) ("[^"]+"|[^ ]+)'
+	# parse alias definitions, where capture group 1 => trigger, 2 => command, 3 => command arguments
+	local alias_regex="alias( -- | )([^=]+)='(\"[^\"]+\"|[^ ]+)(( +[^ ]+)*)'"
+
+	# create array of function completion triggers, keeping multi-word triggers together
+	eval "completions=($(complete -p | sed -Ene "/$compl_regex/s//'\3'/p"))"
+	((${#completions[@]} == 0)) && return 0
+
+	# create temporary file for wrapper functions and completions
+	tmp_file="$(mktemp -t "${namespace}-${RANDOM}XXXXXX")" || return 1
+
+	completion_loader="$(complete -p -D 2> /dev/null | sed -Ene 's/.* -F ([^ ]*).*/\1/p')"
+
+	# read in "<alias> '<aliased command>' '<command args>'" lines from defined aliases
+	# some aliases do have backslashes that needs to be interpreted
+	# shellcheck disable=SC2162
+	while read line; do
+		eval "alias_tokens=($line)" 2> /dev/null || continue # some alias arg patterns cause an eval parse error
+		# shellcheck disable=SC2154 # see `eval` above
+		alias_name="${alias_tokens[0]}" alias_cmd="${alias_tokens[1]}" alias_args="${alias_tokens[2]# }"
+
+		# skip aliases to pipes, boolean control structures and other command lists
+		# (leveraging that eval errs out if $alias_args contains unquoted shell metacharacters)
+		eval "alias_arg_words=($alias_args)" 2> /dev/null || continue
+		# avoid expanding wildcards
+		read -a alias_arg_words <<< "$alias_args"
+
+		# skip alias if there is no completion function triggered by the aliased command
+		if ! _bash-it-array-contains-element "$alias_cmd" "${completions[@]}"; then
+			if [[ -n "$completion_loader" ]]; then
+				# force loading of completions for the aliased command
+				eval "$completion_loader $alias_cmd"
+				# 124 means completion loader was successful
+				[[ $? -eq 124 ]] || continue
+				completions+=("$alias_cmd")
+			else
+				continue
+			fi
+		fi
+		new_completion="$(complete -p "$alias_cmd" 2> /dev/null)"
+
+		# create a wrapper inserting the alias arguments if any
+		if [[ -n $alias_args ]]; then
+			compl_func="${new_completion/#* -F /}"
+			compl_func="${compl_func%% *}"
+			# avoid recursive call loops by ignoring our own functions
+			if [[ "${compl_func#_"$namespace"::}" == "$compl_func" ]]; then
+				compl_wrapper="_${namespace}::${alias_name}"
+				echo "function $compl_wrapper {
+                        local compl_word=\$2
+                        local prec_word=\$3
+                        # check if prec_word is the alias itself. if so, replace it
+                        # with the last word in the unaliased form, i.e.,
+                        # alias_cmd + ' ' + alias_args.
+                        if [[ \$COMP_LINE == \"\$prec_word \$compl_word\" ]]; then
+                            prec_word='$alias_cmd $alias_args'
+                            prec_word=\${prec_word#* }
+                        fi
+                        (( COMP_CWORD += ${#alias_arg_words[@]} ))
+                        COMP_WORDS=($alias_cmd $alias_args \${COMP_WORDS[@]:1})
+                        (( COMP_POINT -= \${#COMP_LINE} ))
+                        COMP_LINE=\${COMP_LINE/$alias_name/$alias_cmd $alias_args}
+                        (( COMP_POINT += \${#COMP_LINE} ))
+                        $compl_func \"$alias_cmd\" \"\$compl_word\" \"\$prec_word\"
+                    }" >> "$tmp_file"
+				new_completion="${new_completion/ -F $compl_func / -F $compl_wrapper }"
+			fi
+		fi
+
+		# replace completion trigger by alias
+		if [[ -n $new_completion ]]; then
+			new_completion="${new_completion% *} $alias_name"
+			echo "$new_completion" >> "$tmp_file"
+		fi
+	done < <(alias -p | sed -Ene "s/$alias_regex/\2 '\3' '\4'/p")
+	# shellcheck source=/dev/null
+	source "$tmp_file" && command rm -f "$tmp_file"
+}
+
+alias_completion
diff --git a/plugins/available/android.plugin.bash b/plugins/available/android.plugin.bash
new file mode 100644
index 00000000..4c3546b8
--- /dev/null
+++ b/plugins/available/android.plugin.bash
@@ -0,0 +1,12 @@
+cite about-plugin
+about-plugin 'Load Android Development Kit Manager'
+
+CMDLINE_TOOLS=${HOME}/Android/Sdk/cmdline-tools
+if [ -d "${CMDLINE_TOOLS}" ]; then
+    export PATH=$PATH:${CMDLINE_TOOLS}/latest/bin
+fi
+
+# desliga-mobile()
+# {
+#   adb shell "su -c 'reboot -p'"
+# }
diff --git a/plugins/available/arduino.plugin.bash b/plugins/available/arduino.plugin.bash
new file mode 100644
index 00000000..0da5eb83
--- /dev/null
+++ b/plugins/available/arduino.plugin.bash
@@ -0,0 +1,18 @@
+
+cite about-plugin
+about-plugin 'Load Arduino Development Kit Manager'
+
+v=1.8.1
+v=1.8.7
+t=5.4.0-atmel3.6.1-arduino2
+
+if [ -d "/opt/arduino-${v}" ]; then
+  export ARDUINO_DIR=/opt/arduino-${v}
+  export PATH=$PATH:$ARDUINO_DIR
+fi
+if [ -d "${HOME}/developer/Arduino-Makefile" ]; then
+  #export AVR_TOOLS_DIR=/usr
+  export AVR_TOOLS_DIR=${HOME}/.arduino15/packages/arduino/tools/avr-gcc/${t}
+  export ARDMK_DIR=${HOME}/developer/Arduino-Makefile
+fi
+
diff --git a/plugins/available/autojump.plugin.bash b/plugins/available/autojump.plugin.bash
index 3dfa0bca..dc8fbbb4 100644
--- a/plugins/available/autojump.plugin.bash
+++ b/plugins/available/autojump.plugin.bash
@@ -4,11 +4,12 @@ about-plugin 'Autojump configuration, see https://github.com/wting/autojump for
 
 # Only supports the Homebrew variant, Debian and Arch at the moment.
 # Feel free to provide a PR to support other install locations
-# shellcheck disable=SC1090
 if _bash_it_homebrew_check && [[ -s "${BASH_IT_HOMEBREW_PREFIX}/etc/profile.d/autojump.sh" ]]; then
 	source "${BASH_IT_HOMEBREW_PREFIX}/etc/profile.d/autojump.sh"
 elif _command_exists dpkg && dpkg -s autojump &> /dev/null; then
+	# shellcheck disable=SC1090
 	source "$(dpkg-query -S autojump.sh | cut -d' ' -f2)"
 elif _command_exists pacman && pacman -Q autojump &> /dev/null; then
+	# shellcheck disable=SC1090
 	source "$(pacman -Ql autojump | grep autojump.sh | cut -d' ' -f2)"
 fi
diff --git a/plugins/available/bangsh.plugin.bash b/plugins/available/bangsh.plugin.bash
new file mode 100644
index 00000000..9e1bcc7b
--- /dev/null
+++ b/plugins/available/bangsh.plugin.bash
@@ -0,0 +1,4 @@
+cite about-plugin
+about-plugin 'Load Bang.sh - for easy Shell Scripting'
+
+export PATH="$PATH:/home/ivan/developer/scripts/bangsh"
diff --git a/plugins/available/base.plugin.bash b/plugins/available/base.plugin.bash
index 1a905163..6490ab88 100644
--- a/plugins/available/base.plugin.bash
+++ b/plugins/available/base.plugin.bash
@@ -67,7 +67,7 @@ function passgen() {
 
 # Create alias pass to passgen when pass isn't installed or
 # BASH_IT_LEGACY_PASS is true.
-if ! _command_exists pass || [[ "${BASH_IT_LEGACY_PASS:-}" == true ]]; then
+if ! _command_exists pass || [[ "${BASH_IT_LEGACY_PASS:-}" = true ]]; then
 	alias pass=passgen
 fi
 
@@ -120,26 +120,21 @@ function usage() {
 	esac
 }
 
-function t() {
-	about 'todo.sh if available, otherwise one thing todo'
-	param 'if not set, display todo item'
-	param '1: todo text'
-
-	local todotxt="${XDG_STATE_HOME:-~/.local/state}/bash_it/todo.txt"
-
-	if _bash-it-component-item-is-enabled plugin todo; then
-		todo.sh "$@"
-		return
-	elif [[ ! -f "${todotxt}" && -f ~/.t ]]; then
-		mv -vn ~/.t "${todotxt}" # Verbose, so the user knows. Don't overwrite, just in case.
-	fi
-
-	if [[ "$#" -eq 0 ]]; then
-		cat "${todotxt}"
-	else
-		echo "$@" >| "${todotxt}"
-	fi
-}
+# shellcheck disable=SC2144 # the glob matches only one file
+if [[ ! -e "${BASH_IT?}/plugins/enabled/todo.plugin.bash" &&
+	! -e "${BASH_IT?}/plugins/enabled"/*"${BASH_IT_LOAD_PRIORITY_SEPARATOR-}todo.plugin.bash" ]]; then
+	# if user has installed todo plugin, skip this...
+	function t() {
+		about 'one thing todo'
+		param 'if not set, display todo item'
+		param '1: todo text'
+		if [[ "$*" == "" ]]; then
+			cat ~/.t
+		else
+			echo "$*" > ~/.t
+		fi
+	}
+fi
 
 if _command_exists mkisofs; then
 	function mkiso() {
diff --git a/plugins/available/battery.plugin.bash b/plugins/available/battery.plugin.bash
index b38d7f9d..e8e3995f 100644
--- a/plugins/available/battery.plugin.bash
+++ b/plugins/available/battery.plugin.bash
@@ -1,130 +1,149 @@
-# shellcheck shell=bash
+cite about-plugin
 about-plugin 'display info about your battery charge level'
 
-function ac_adapter_connected() {
-	local batteries
-	if _command_exists upower; then
-		IFS=$'\n' read -d '' -ra batteries < <(upower -e | grep -i BAT)
-		upower -i "${batteries[0]:-}" | grep 'state' | grep -q 'charging\|fully-charged'
-	elif _command_exists acpi; then
-		acpi -a | grep -q "on-line"
-	elif _command_exists pmset; then
-		pmset -g batt | grep -q 'AC Power'
-	elif _command_exists ioreg; then
-		ioreg -n AppleSmartBattery -r | grep -q '"ExternalConnected" = Yes'
-	elif _command_exists WMIC; then
-		WMIC Path Win32_Battery Get BatteryStatus /Format:List | grep -q 'BatteryStatus=2'
-	fi
+ac_adapter_connected(){
+  if _command_exists upower;
+  then
+    upower -i $(upower -e | grep -i BAT) | grep 'state' | grep -q 'charging\|fully-charged'
+    return $?
+  elif _command_exists acpi;
+  then
+    acpi -a | grep -q "on-line"
+    return $?
+  elif _command_exists pmset;
+  then
+    pmset -g batt | grep -q 'AC Power'
+    return $?
+  elif _command_exists ioreg;
+  then
+    ioreg -n AppleSmartBattery -r | grep -q '"ExternalConnected" = Yes'
+    return $?
+  elif _command_exists WMIC;
+  then
+    WMIC Path Win32_Battery Get BatteryStatus /Format:List | grep -q 'BatteryStatus=2'
+    return $?
+  fi
 }
 
-function ac_adapter_disconnected() {
-	local batteries
-	if _command_exists upower; then
-		IFS=$'\n' read -d '' -ra batteries < <(upower -e | grep -i BAT)
-		upower -i "${batteries[0]:-}" | grep 'state' | grep -q 'discharging'
-	elif _command_exists acpi; then
-		acpi -a | grep -q "off-line"
-	elif _command_exists pmset; then
-		pmset -g batt | grep -q 'Battery Power'
-	elif _command_exists ioreg; then
-		ioreg -n AppleSmartBattery -r | grep -q '"ExternalConnected" = No'
-	elif _command_exists WMIC; then
-		WMIC Path Win32_Battery Get BatteryStatus /Format:List | grep -q 'BatteryStatus=1'
-	fi
+ac_adapter_disconnected(){
+  if _command_exists upower;
+  then
+    upower -i $(upower -e | grep -i BAT) | grep 'state' | grep -q 'discharging'
+    return $?
+  elif _command_exists acpi;
+  then
+    acpi -a | grep -q "off-line"
+    return $?
+  elif _command_exists pmset;
+  then
+    pmset -g batt | grep -q 'Battery Power'
+    return $?
+  elif _command_exists ioreg;
+  then
+    ioreg -n AppleSmartBattery -r | grep -q '"ExternalConnected" = No'
+    return $?
+  elif _command_exists WMIC;
+  then
+    WMIC Path Win32_Battery Get BatteryStatus /Format:List | grep -q 'BatteryStatus=1'
+    return $?
+  fi
 }
 
-function battery_percentage() {
-	about 'displays battery charge as a percentage of full (100%)'
-	group 'battery'
+battery_percentage(){
+  about 'displays battery charge as a percentage of full (100%)'
+  group 'battery'
 
-	local command_output batteries
+  declare COMMAND_OUTPUT="no"
 
-	if _command_exists upower; then
-		IFS=$'\n' read -d '' -ra batteries < <(upower -e | grep -i BAT)
-		command_output="$(upower --show-info "${batteries[0]:-}" | grep percentage | grep -o '[0-9]\+' | head -1)"
-	elif _command_exists acpi; then
-		command_output=$(acpi -b | awk -F, '/,/{gsub(/ /, "", $0); gsub(/%/,"", $0); print $2}')
-	elif _command_exists pmset; then
-		command_output=$(pmset -g ps | sed -n 's/.*[[:blank:]]+*\(.*%\).*/\1/p' | grep -o '[0-9]\+' | head -1)
-	elif _command_exists ioreg; then
-		command_output=$(ioreg -n AppleSmartBattery -r | awk '$1~/Capacity/{c[$1]=$3} END{OFMT="%05.2f"; max=c["\"MaxCapacity\""]; print (max>0? 100*c["\"CurrentCapacity\""]/max: "?")}' | grep -o '[0-9]\+' | head -1)
-	elif _command_exists WMIC; then
-		command_output=$(WMIC PATH Win32_Battery Get EstimatedChargeRemaining /Format:List | grep -o '[0-9]\+' | head -1)
-	else
-		command_output="no"
-	fi
+  if _command_exists upower;
+  then
+    COMMAND_OUTPUT=$(upower --show-info $(upower --enumerate | grep -i BAT) | grep percentage | grep -o "[0-9]\+" | head -1)
+  elif _command_exists acpi;
+  then
+    COMMAND_OUTPUT=$(acpi -b | awk -F, '/,/{gsub(/ /, "", $0); gsub(/%/,"", $0); print $2}' )
+  elif _command_exists pmset;
+  then
+    COMMAND_OUTPUT=$(pmset -g ps | sed -n 's/.*[[:blank:]]+*\(.*%\).*/\1/p' | grep -o "[0-9]\+" | head -1)
+  elif _command_exists ioreg;
+  then
+    COMMAND_OUTPUT=$(ioreg -n AppleSmartBattery -r | awk '$1~/Capacity/{c[$1]=$3} END{OFMT="%05.2f"; max=c["\"MaxCapacity\""]; print (max>0? 100*c["\"CurrentCapacity\""]/max: "?")}' | grep -o "[0-9]\+" | head -1)
+  elif _command_exists WMIC;
+  then
+    COMMAND_OUTPUT=$(WMIC PATH Win32_Battery Get EstimatedChargeRemaining /Format:List | grep -o '[0-9]\+' | head -1)
+  else
+    COMMAND_OUTPUT="no"
+  fi
 
-	if [[ "${command_output}" != "no" ]]; then
-		printf "%02d" "${command_output:--1}"
-	else
-		echo "${command_output}"
-	fi
+  if [ "${COMMAND_OUTPUT}" != "no" ]; then
+    printf "%02d" "${COMMAND_OUTPUT:--1}"
+  else
+    echo "${COMMAND_OUTPUT}"
+  fi
 }
 
-function battery_charge() {
-	about 'graphical display of your battery charge'
-	group 'battery'
+battery_charge(){
+  about 'graphical display of your battery charge'
+  group 'battery'
 
-	# Full char
-	local f_c='▸'
-	# Depleted char
-	local d_c='▹'
-	local depleted_color="${normal?}"
-	local full_color="${green?}"
-	local half_color="${yellow?}"
-	local danger_color="${red?}"
-	#local battery_output="${depleted_color}${d_c}${d_c}${d_c}${d_c}${d_c}"
-	local battery_percentage
-	battery_percentage=$(battery_percentage)
+  # Full char
+  local F_C='▸'
+  # Depleted char
+  local D_C='▹'
+  local DEPLETED_COLOR="${normal}"
+  local FULL_COLOR="${green}"
+  local HALF_COLOR="${yellow}"
+  local DANGER_COLOR="${red}"
+  local BATTERY_OUTPUT="${DEPLETED_COLOR}${D_C}${D_C}${D_C}${D_C}${D_C}"
+  local BATTERY_PERC=$(battery_percentage)
 
-	case $battery_percentage in
-		no)
-			echo ""
-			;;
-		9*)
-			echo "${full_color}${f_c}${f_c}${f_c}${f_c}${f_c}${normal?}"
-			;;
-		8*)
-			echo "${full_color}${f_c}${f_c}${f_c}${f_c}${half_color}${f_c}${normal?}"
-			;;
-		7*)
-			echo "${full_color}${f_c}${f_c}${f_c}${f_c}${depleted_color}${d_c}${normal?}"
-			;;
-		6*)
-			echo "${full_color}${f_c}${f_c}${f_c}${half_color}${f_c}${depleted_color}${d_c}${normal?}"
-			;;
-		5*)
-			echo "${full_color}${f_c}${f_c}${f_c}${depleted_color}${d_c}${d_c}${normal?}"
-			;;
-		4*)
-			echo "${full_color}${f_c}${f_c}${half_color}${f_c}${depleted_color}${d_c}${d_c}${normal?}"
-			;;
-		3*)
-			echo "${full_color}${f_c}${f_c}${depleted_color}${d_c}${d_c}${d_c}${normal?}"
-			;;
-		2*)
-			echo "${full_color}${f_c}${half_color}${f_c}${depleted_color}${d_c}${d_c}${d_c}${normal?}"
-			;;
-		1*)
-			echo "${full_color}${f_c}${depleted_color}${d_c}${d_c}${d_c}${d_c}${normal?}"
-			;;
-		05)
-			echo "${danger_color}${f_c}${depleted_color}${d_c}${d_c}${d_c}${d_c}${normal?}"
-			;;
-		04)
-			echo "${danger_color}${f_c}${depleted_color}${d_c}${d_c}${d_c}${d_c}${normal?}"
-			;;
-		03)
-			echo "${danger_color}${f_c}${depleted_color}${d_c}${d_c}${d_c}${d_c}${normal?}"
-			;;
-		02)
-			echo "${danger_color}${f_c}${depleted_color}${d_c}${d_c}${d_c}${d_c}${normal?}"
-			;;
-		0*)
-			echo "${half_color}${f_c}${depleted_color}${d_c}${d_c}${d_c}${d_c}${normal?}"
-			;;
-		*)
-			echo "${danger_color}UNPLG${normal?}"
-			;;
-	esac
+  case $BATTERY_PERC in
+    no)
+      echo ""
+    ;;
+    9*)
+      echo "${FULL_COLOR}${F_C}${F_C}${F_C}${F_C}${F_C}${normal}"
+    ;;
+    8*)
+      echo "${FULL_COLOR}${F_C}${F_C}${F_C}${F_C}${HALF_COLOR}${F_C}${normal}"
+    ;;
+    7*)
+      echo "${FULL_COLOR}${F_C}${F_C}${F_C}${F_C}${DEPLETED_COLOR}${D_C}${normal}"
+    ;;
+    6*)
+      echo "${FULL_COLOR}${F_C}${F_C}${F_C}${HALF_COLOR}${F_C}${DEPLETED_COLOR}${D_C}${normal}"
+    ;;
+    5*)
+      echo "${FULL_COLOR}${F_C}${F_C}${F_C}${DEPLETED_COLOR}${D_C}${D_C}${normal}"
+    ;;
+    4*)
+      echo "${FULL_COLOR}${F_C}${F_C}${HALF_COLOR}${F_C}${DEPLETED_COLOR}${D_C}${D_C}${normal}"
+    ;;
+    3*)
+      echo "${FULL_COLOR}${F_C}${F_C}${DEPLETED_COLOR}${D_C}${D_C}${D_C}${normal}"
+    ;;
+    2*)
+      echo "${FULL_COLOR}${F_C}${HALF_COLOR}${F_C}${DEPLETED_COLOR}${D_C}${D_C}${D_C}${normal}"
+    ;;
+    1*)
+      echo "${FULL_COLOR}${F_C}${DEPLETED_COLOR}${D_C}${D_C}${D_C}${D_C}${normal}"
+    ;;
+    05)
+      echo "${DANGER_COLOR}${F_C}${DEPLETED_COLOR}${D_C}${D_C}${D_C}${D_C}${normal}"
+    ;;
+    04)
+      echo "${DANGER_COLOR}${F_C}${DEPLETED_COLOR}${D_C}${D_C}${D_C}${D_C}${normal}"
+    ;;
+    03)
+      echo "${DANGER_COLOR}${F_C}${DEPLETED_COLOR}${D_C}${D_C}${D_C}${D_C}${normal}"
+    ;;
+    02)
+      echo "${DANGER_COLOR}${F_C}${DEPLETED_COLOR}${D_C}${D_C}${D_C}${D_C}${normal}"
+    ;;
+    0*)
+      echo "${HALF_COLOR}${F_C}${DEPLETED_COLOR}${D_C}${D_C}${D_C}${D_C}${normal}"
+    ;;
+    *)
+      echo "${DANGER_COLOR}UNPLG${normal}"
+    ;;
+  esac
 }
diff --git a/plugins/available/blesh.plugin.bash b/plugins/available/blesh.plugin.bash
index 6acd19ff..7b1ce74e 100644
--- a/plugins/available/blesh.plugin.bash
+++ b/plugins/available/blesh.plugin.bash
@@ -10,7 +10,7 @@ fi
 _bash_it_ble_path=${XDG_DATA_HOME:-$HOME/.local/share}/blesh/ble.sh
 if [[ -f $_bash_it_ble_path ]]; then
 	# shellcheck disable=1090
-	source "$_bash_it_ble_path" --attach=prompt
+	source "$_bash_it_ble_path"
 else
 	_log_error "Could not find ble.sh in $_bash_it_ble_path"
 	_log_error "Please install using the following command:"
diff --git a/plugins/available/brew.plugin.bash b/plugins/available/brew.plugin.bash
new file mode 100644
index 00000000..dfeadcf2
--- /dev/null
+++ b/plugins/available/brew.plugin.bash
@@ -0,0 +1,27 @@
+# plugin for brew
+
+cite about-plugin
+about-plugin 'brew plugin for Linux'
+
+# linuxbrew
+
+if [[ -e "${HOME}/.linuxbrew/bin" ]]; then
+
+  # load plenv bin dir into path if it exists
+  pathmunge "${HOME}/.linuxbrew/bin"
+
+fi
+
+if [[ $(which brew) ]]; then
+
+  # init brew
+  #eval "$(brew shellenv)"
+
+  eval $(brew shellenv)
+  # export HOMEBREW_PREFIX="/home/ivan/developer/env/linuxbrew"
+  # export HOMEBREW_CELLAR="/home/ivan/developer/env/linuxbrew/Cellar"
+  # export HOMEBREW_REPOSITORY="/home/ivan/developer/env/linuxbrew/Homebrew"
+  # export PATH="${PATH}:/home/ivan/developer/env/linuxbrew/bin:/home/ivan/developer/env/linuxbrew/sbin"
+  # export MANPATH="/home/ivan/developer/env/linuxbrew/share/man${MANPATH+:$MANPATH}:"
+  # export INFOPATH="/home/ivan/developer/env/linuxbrew/share/info:${INFOPATH:-}"
+fi
diff --git a/plugins/available/cabal.plugin.bash b/plugins/available/cabal.plugin.bash
new file mode 100644
index 00000000..63e9f7f5
--- /dev/null
+++ b/plugins/available/cabal.plugin.bash
@@ -0,0 +1,26 @@
+cite about-plugin
+about-plugin 'load pyenv, if you are using it'
+
+export PYENV_ROOT="$HOME/.pyenv"
+pathmunge "$PYENV_ROOT/bin"
+
+[[ `which pyenv 2>/dev/null` ]] && eval "$(pyenv init - bash)"
+
+#Load pyenv virtualenv if the virtualenv plugin is installed.
+if pyenv virtualenv-init - &> /dev/null; then
+  eval "$(pyenv virtualenv-init - bash)"
+fi
+about-plugin 'Load cabal Development Kit Manager'
+# cabal
+
+if [ -d "/opt/cabal/bin" ]; then
+  export PATH=/opt/cabal/bin:$PATH
+fi
+
+if [ -d "/opt/ghc/bin" ]; then
+  export PATH=/opt/ghc/bin:$PATH
+fi
+
+if [ -d "$HOME/.cabal/bin" ]; then
+  export PATH=$HOME/.cabal/bin:$PATH
+fi
diff --git a/plugins/available/cmd-returned-notify.plugin.bash b/plugins/available/cmd-returned-notify.plugin.bash
index 88c07722..d9be5e4e 100644
--- a/plugins/available/cmd-returned-notify.plugin.bash
+++ b/plugins/available/cmd-returned-notify.plugin.bash
@@ -2,15 +2,15 @@
 cite about-plugin
 about-plugin 'Alert (BEL) when process ends after a threshold of seconds'
 
-function precmd_return_notification() {
-	local command_start="${COMMAND_DURATION_START_SECONDS:=0}"
-	local current_time="${EPOCHREALTIME:-$SECONDS}"
-	local -i command_duration="$((${current_time%.*} - ${command_start%.*}))"
-	if [[ "${command_duration}" -gt "${NOTIFY_IF_COMMAND_RETURNS_AFTER:-5}" ]]; then
-		printf '\a'
-	fi
-	return 0
+precmd_return_notification() {
+	export LAST_COMMAND_DURATION=$(($(date +%s) - ${LAST_COMMAND_TIME:=$(date +%s)}))
+	[[ ${LAST_COMMAND_DURATION} -gt ${NOTIFY_IF_COMMAND_RETURNS_AFTER:-5} ]] && echo -e "\a"
+	export LAST_COMMAND_TIME=
 }
 
-safe_append_prompt_command 'precmd_return_notification'
-safe_append_preexec '_command_duration_pre_exec'
+preexec_return_notification() {
+	[[ -z "${LAST_COMMAND_TIME}" ]] && LAST_COMMAND_TIME=$(date +%s)
+}
+
+precmd_functions+=(precmd_return_notification)
+preexec_functions+=(preexec_return_notification)
diff --git a/plugins/available/dart.plugin.bash b/plugins/available/dart.plugin.bash
new file mode 100644
index 00000000..0bc9910e
--- /dev/null
+++ b/plugins/available/dart.plugin.bash
@@ -0,0 +1,7 @@
+cite about-plugin
+about-plugin 'Load Dart interpreter'
+
+export PATH="$PATH":"$HOME/.pub-cache/bin"
+# if [ -e "/usr/lib/dart/bin" ]; then
+#   pathmunge "/usr/lib/dart/bin"
+# fi
diff --git a/plugins/available/dirs.plugin.bash b/plugins/available/dirs.plugin.bash
index 55d2e88a..2c1adf7a 100644
--- a/plugins/available/dirs.plugin.bash
+++ b/plugins/available/dirs.plugin.bash
@@ -1,4 +1,3 @@
-# shellcheck shell=bash
 # Directory stack navigation:
 #
 # Add to stack with: pu /path/to/directory
@@ -33,90 +32,76 @@ alias pu="pushd"
 alias po="popd"
 
 function dirs-help() {
-	about 'directory navigation alias usage'
-	group 'dirs'
-
-	echo "Directory Navigation Alias Usage"
-	echo
-	echo "Use the power of directory stacking to move"
-	echo "between several locations with ease."
-	echo
-	echo "d	: Show directory stack."
-	echo "po	: Remove current location from stack."
-	echo "pc	: Adds current location to stack."
-	echo "pu <dir>: Adds given location to stack."
-	echo "1	: Change to stack location 1."
-	echo "2	: Change to stack location 2."
-	echo "3	: Change to stack location 3."
-	echo "4	: Change to stack location 4."
-	echo "5	: Change to stack location 5."
-	echo "6	: Change to stack location 6."
-	echo "7	: Change to stack location 7."
-	echo "8	: Change to stack location 8."
-	echo "9	: Change to stack location 9."
+  about 'directory navigation alias usage'
+  group 'dirs'
+
+  echo "Directory Navigation Alias Usage"
+  echo
+  echo "Use the power of directory stacking to move"
+  echo "between several locations with ease."
+  echo
+  echo "d	: Show directory stack."
+  echo "po	: Remove current location from stack."
+  echo "pc	: Adds current location to stack."
+  echo "pu <dir>: Adds given location to stack."
+  echo "1	: Change to stack location 1."
+  echo "2	: Change to stack location 2."
+  echo "3	: Change to stack location 3."
+  echo "4	: Change to stack location 4."
+  echo "5	: Change to stack location 5."
+  echo "6	: Change to stack location 6."
+  echo "7	: Change to stack location 7."
+  echo "8	: Change to stack location 8."
+  echo "9	: Change to stack location 9."
 }
 
 # Add bookmarking functionality
 # Usage:
 
-: "${BASH_IT_DIRS_BKS:=${XDG_STATE_HOME:-${HOME}/.local/state}/bash_it/dirs}"
-if [[ -f "${BASH_IT_DIRS_BKS?}" ]]; then
-	# shellcheck disable=SC1090
-	source "${BASH_IT_DIRS_BKS?}"
+if [ ! -f ~/.dirs ]; then  # if doesn't exist, create it
+    touch ~/.dirs
 else
-	mkdir -p "${BASH_IT_DIRS_BKS%/*}"
-	if [[ -f ~/.dirs ]]; then
-		mv -vn ~/.dirs "${BASH_IT_DIRS_BKS?}"
-		# shellcheck disable=SC1090
-		source "${BASH_IT_DIRS_BKS?}"
-	else
-		touch "${BASH_IT_DIRS_BKS?}"
-	fi
+    source ~/.dirs
 fi
 
-alias L='cat "${BASH_IT_DIRS_BKS?}"'
+alias L='cat ~/.dirs'
 
 # Goes to destination dir, otherwise stay in the dir
-function G() {
-	about 'goes to destination dir'
-	param '1: directory'
-	example '$ G ..'
-	group 'dirs'
+G () {
+    about 'goes to destination dir'
+    param '1: directory'
+    example '$ G ..'
+    group 'dirs'
 
-	cd "${1:-${PWD}}" || return
+    cd "${1:-${PWD}}" ;
 }
 
-function S() {
-	about 'save a bookmark'
-	param '1: bookmark name'
-	example '$ S mybkmrk'
-	group 'dirs'
-
-	[[ $# -eq 1 ]] || {
-		echo "${FUNCNAME[0]} function requires 1 argument"
-		return 1
-	}
-
-	sed "/$1/d" "${BASH_IT_DIRS_BKS?}" > "${BASH_IT_DIRS_BKS?}.new"
-	command mv "${BASH_IT_DIRS_BKS?}.new" "${BASH_IT_DIRS_BKS?}"
-	echo "$1"=\""${PWD}"\" >> "${BASH_IT_DIRS_BKS?}"
-	# shellcheck disable=SC1090
-	source "${BASH_IT_DIRS_BKS?}"
+S () {
+    about 'save a bookmark'
+    param '1: bookmark name'
+    example '$ S mybkmrk'
+    group 'dirs'
+
+    [[ $# -eq 1 ]] || { echo "${FUNCNAME[0]} function requires 1 argument"; return 1; }
+
+    sed "/$@/d" ~/.dirs > ~/.dirs1;
+    \mv ~/.dirs1 ~/.dirs;
+    echo "$@"=\""${PWD}"\" >> ~/.dirs;
+    source ~/.dirs ;
 }
 
-function R() {
-	about 'remove a bookmark'
-	param '1: bookmark name'
-	example '$ R mybkmrk'
-	group 'dirs'
+R () {
+    about 'remove a bookmark'
+    param '1: bookmark name'
+    example '$ R mybkmrk'
+    group 'dirs'
 
-	[[ $# -eq 1 ]] || {
-		echo "${FUNCNAME[0]} function requires 1 argument"
-		return 1
-	}
+    [[ $# -eq 1 ]] || { echo "${FUNCNAME[0]} function requires 1 argument"; return 1; }
 
-	sed "/$1/d" "${BASH_IT_DIRS_BKS?}" > "${BASH_IT_DIRS_BKS?}.new"
-	command mv "${BASH_IT_DIRS_BKS?}.new" "${BASH_IT_DIRS_BKS?}"
+    sed "/$@/d" ~/.dirs > ~/.dirs1;
+    \mv ~/.dirs1 ~/.dirs;
 }
 
-alias U='source "${BASH_IT_DIRS_BKS?}"' # Update bookmark stack
+alias U='source ~/.dirs' 	# Update bookmark stack
+# Set the Bash option so that no '$' is required when using the above facility
+shopt -s cdable_vars
diff --git a/plugins/available/fzf.plugin.bash b/plugins/available/fzf.plugin.bash
index 21182ac2..c4f5ea84 100644
--- a/plugins/available/fzf.plugin.bash
+++ b/plugins/available/fzf.plugin.bash
@@ -4,15 +4,14 @@
 cite about-plugin
 about-plugin 'load fzf, if you are using it'
 
+_command_exists fzf || return
+
 if [ -r ~/.fzf.bash ] ; then
   source ~/.fzf.bash
 elif [ -r "${XDG_CONFIG_HOME:-$HOME/.config}"/fzf/fzf.bash ] ; then
   source "${XDG_CONFIG_HOME:-$HOME/.config}"/fzf/fzf.bash
 fi
 
-# No need to continue if the command is not present
-_command_exists fzf || return
-
 if [ -z ${FZF_DEFAULT_COMMAND+x}  ] && _command_exists fd ; then
   export FZF_DEFAULT_COMMAND='fd --type f'
 fi
diff --git a/plugins/available/ghcup.plugin.bash b/plugins/available/ghcup.plugin.bash
new file mode 100644
index 00000000..450c9863
--- /dev/null
+++ b/plugins/available/ghcup.plugin.bash
@@ -0,0 +1,10 @@
+cite about-plugin
+about-plugin 'load ghcup, if you are using it'
+
+export GHCUP_ROOT="$HOME/.ghcup"
+pathmunge "$GHCUP_ROOT/bin"
+
+if [ -f "/home/ivan/.ghcup/env" ]; then
+    source "/home/ivan/.ghcup/env"
+fi
+
diff --git a/plugins/available/gif.plugin.bash b/plugins/available/gif.plugin.bash
index a04ff5c7..49c36e4c 100644
--- a/plugins/available/gif.plugin.bash
+++ b/plugins/available/gif.plugin.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite about-plugin
 about-plugin 'video to gif, gif to WebM helper functions'
 
 # Based loosely on:
@@ -12,310 +12,287 @@ about-plugin 'video to gif, gif to WebM helper functions'
 # Optional: if lossy is not important, Ubuntu has gifsicle packaged for apt-get, instead of giflossy
 # Optional: gifski (from `brew install gifski` or github.com/ImageOptim/gifski)
 #           for high quality huge files.
-function v2gif() {
-	about 'Converts a .mov/.avi/.mp4 file into an into an animated GIF.'
-	group 'gif'
-	param '1: MOV/AVI/MP4 file name(s)'
-	param '2: -w <num> ; Optional: max width in pixels'
-	param '3: -l <num> ; Optional: extra lossy level for smaller files (80-200 make sense, needs giflossy instead of gifsicle)'
-	param '4: -h       ; Optional: high quality using gifski (installed seperately) - overrides "--lossy" above!'
-	param '5: -d       ; Optional: delete the original video file if succeeded'
-	param '6: -t       ; Optional: Tag the result with quality stamp for comparison use'
-	param '7: -f <num> ; Optional: Change number of frames per second (default 10 or original FPS if mediainfo installed)'
-	param '8: -a <num> ; Optional: Alert if resulting file is over <num> kilobytes (default is 5000, 0 turns off)'
-	param '9: -m       ; Optional: Also create a WebM file (will one day replace GIF, Smaller and higher quality than mp4)'
-	example '$ v2gif foo.mov'
-	example '$ v2gif foo.mov -w 600'
-	example '$ v2gif -l 100 -d *.mp4'
-	example '$ v2gif -dh *.avi'
-	example '$ v2gif -thw 600 *.avi *.mov'
-
-	local convert ffmpeg mediainfo gifsicle getopt args gifski out_size
-
-	convert="$(type -p convert)"
-	[[ -x "$convert" ]] || {
-		echo "No convert found!"
-		return 2
-	}
-	ffmpeg="$(type -p ffmpeg)"
-	[[ -x "$ffmpeg" ]] || {
-		echo "No ffmpeg found!"
-		return 2
-	}
-	mediainfo="$(type -p mediainfo)"
-	[[ -x "$mediainfo" ]] || {
-		echo "No mediainfo found!"
-		return 2
-	}
-	gifsicle="$(type -p gifsicle)"
-	[[ -x "$gifsicle" ]] || {
-		echo "No gifsicle found!"
-		return 2
-	}
-	getopt="$(type -p getopt)"
-
-	if [[ "$OSTYPE" == "darwin"* ]]; then
-		# Getopt on BSD is incompatible with GNU
-		getopt=/usr/local/opt/gnu-getopt/bin/getopt
-		[[ -x "$getopt" ]] || {
-			echo "No GNU-getopt found!"
-			return 2
-		}
-	fi
-
-	# Parse the options
-	args=$("$getopt" -l "alert:" -l "lossy:" -l "width:" -l del,delete -l high -l tag -l "fps:" -l webm -o "a:l:w:f:dhmt" -- "$@") || {
-		echo 'Terminating...' >&2
-		return 2
-	}
-
-	eval set -- "$args"
-	local use_gifski=""
-	local opt_del_after=""
-	local maxsize=""
-	local lossiness=""
-	local maxwidthski=""
-	local giftagopt=""
-	local giftag=""
-	local defaultfps=10
-	local infps=""
-	local fps=""
-	local make_webm=""
-	local alert=5000
-	while [[ $# -ge 1 ]]; do
-		case "$1" in
-			--)
-				# No more options left.
-				shift
-				break
-				;;
-			-d | --del | --delete)
-				# Delete after
-				opt_del_after="true"
-				shift
-				;;
-			-h | --high)
-				#High Quality, use gifski
-				gifski="$(type -p gifski)"
-				[[ -x "$gifski" ]] || {
-					echo "No gifski found!"
-					return 2
-				}
-				use_gifski=true
-				giftag="${giftag}-h"
-				shift
-				;;
-			-w | --width)
-				maxsize="-vf scale=$2:-1"
-				maxwidthski="-W $2"
-				giftag="${giftag}-w$2"
-				shift 2
-				;;
-			-t | --tag)
-				# mark with a quality tag
-				giftagopt="true"
-				shift
-				;;
-			-l | --lossy)
-				# Use giflossy parameter
-				lossiness="--lossy=$2"
-				giftag="${giftag}-l$2"
-				shift 2
-				;;
-			-f | --fps)
-				# select fps
-				infps="$2"
-				giftag="${giftag}-f$2"
-				shift 2
-				;;
-			-a | --alert)
-				# set size alert
-				alert="$2"
-				shift 2
-				;;
-			-m | --webm)
-				# set size alert
-				make_webm="true"
-				shift
-				;;
-		esac
-	done
-
-	if [[ -z "$*" ]]; then
-		echo "$(tput setaf 1)No input files given. Example: v2gif file [file...] [-w <max width (pixels)>] [-l <lossy level>] $(tput sgr 0)"
-		echo "-d/--del/--delete Delete original vid if done suceessfully (and file not over the size limit)"
-		echo "-h/--high         High Quality - use Gifski instead of gifsicle"
-		echo "-w/--width N      Lock maximum gif width to N pixels, resize if necessary"
-		echo "-t/--tag          Add a tag to the output gif describing the options used (useful for comparing several options)"
-		echo "-l/--lossy N      Use the Giflossy parameter for gifsicle (If your version supports it)"
-		echo "-f/--fps N        Override autodetection of incoming vid FPS (useful for downsampling)"
-		echo "-a/--alert N      Alert if over N kilobytes (Defaults to 5000)"
-		echo "-m/--webm         Also create a webm file"
-		return 1
-	fi
-
-	# Prepare the quality tag if requested.
-	[[ -z "$giftag" ]] && giftag="-default"
-	[[ -z "$giftagopt" ]] && giftag=""
-
-	for file; do
-
-		local output_file="${file%.*}${giftag}.gif"
-		local del_after=$opt_del_after
-
-		if [[ -n "$make_webm" ]]; then
-			$ffmpeg -loglevel panic -i "$file" \
-				-c:v libvpx -crf 4 -threads 0 -an -b:v 2M -auto-alt-ref 0 \
-				-quality best -loop 0 "${file%.*}.webm" || return 2
-		fi
-
-		# Set FPS to match the video if possible, otherwise fallback to default.
-		if [[ -n "$infps" ]]; then
-			fps=$infps
-		else
-			fps=$defaultfps
-			if [[ -x "$mediainfo" ]]; then
-				fps=$($mediainfo "$file" | grep "Frame rate   " | sed 's/.*: \([0-9.]\+\) .*/\1/' | head -1)
-				[[ -z "$fps" ]] && fps=$($mediainfo "$file" | grep "Minimum frame rate" | sed 's/.*: \([0-9.]\+\) .*/\1/' | head -1)
-			fi
-		fi
-
-		echo "$(tput setaf 2)Creating '$output_file' at $fps FPS ...$(tput sgr 0)"
-
-		if [[ "$use_gifski" = "true" ]]; then
-			# I trust @pornel to do his own resizing optimization choices
-			$ffmpeg -loglevel panic -i "$file" -r "$fps" -vcodec png v2gif-tmp-%05d.png \
-				&& $gifski v2gif-tmp-*.png "$maxwidthski" --fps "$(printf "%.0f" "$fps")" -o "$output_file" || return 2
-		else
-			$ffmpeg -loglevel panic -i "$file" "$maxsize" -r "$fps" -vcodec png v2gif-tmp-%05d.png \
-				&& $convert +dither -layers Optimize v2gif-tmp-*.png GIF:- \
-				| $gifsicle "$lossiness" --no-warnings --colors 256 --delay="$(echo "100/$fps" | bc)" --loop --optimize=3 --multifile - > "$output_file" || return 2
-		fi
-
-		rm v2gif-tmp-*.png
-
-		# Checking if the file is bigger than Twitter likes and warn
-		if [[ $alert -gt 0 ]]; then
-			out_size=$(wc --bytes < "$output_file")
-			if [[ $out_size -gt $((alert * 1000)) ]]; then
-				echo "$(tput setaf 3)Warning: '$output_file' is $((out_size / 1000))kb.$(tput sgr 0)"
-				[[ "$del_after" == "true" ]] && echo "$(tput setaf 3)Warning: Keeping '$file' even though --del requested.$(tput sgr 0)"
-				del_after=""
-			fi
-		fi
-
-		[[ "$del_after" = "true" ]] && rm "$file"
-
-	done
-
-	echo "$(tput setaf 2)Done.$(tput sgr 0)"
+function v2gif {
+  about 'Converts a .mov/.avi/.mp4 file into an into an animated GIF.'
+  group 'gif'
+  param '1: MOV/AVI/MP4 file name(s)'
+  param '2: -w <num> ; Optional: max width in pixels'
+  param '3: -l <num> ; Optional: extra lossy level for smaller files (80-200 make sense, needs giflossy instead of gifsicle)'
+  param '4: -h       ; Optional: high quality using gifski (installed seperately) - overrides "--lossy" above!'
+  param '5: -d       ; Optional: delete the original video file if succeeded'
+  param '6: -t       ; Optional: Tag the result with quality stamp for comparison use'
+  param '7: -f <num> ; Optional: Change number of frames per second (default 10 or original FPS if mediainfo installed)'
+  param '8: -a <num> ; Optional: Alert if resulting file is over <num> kilobytes (default is 5000, 0 turns off)'
+  param '9: -m       ; Optional: Also create a WebM file (will one day replace GIF, Smaller and higher quality than mp4)'
+  example '$ v2gif foo.mov'
+  example '$ v2gif foo.mov -w 600'
+  example '$ v2gif -l 100 -d *.mp4'
+  example '$ v2gif -dh *.avi'
+  example '$ v2gif -thw 600 *.avi *.mov'
+
+  local convert=$(which convert)     ; [[ -x "$convert" ]]   || { echo "No convert found!" ; return 2 ;}
+  local ffmpeg=$(which ffmpeg)       ; [[ -x "$ffmpeg" ]]    || { echo "No ffmpeg found!" ; return 2 ;}
+  local mediainfo=$(which mediainfo) ; [[ -x "$mediainfo" ]] || { echo "No mediainfo found!" ; return 2 ;}
+  local gifsicle=$(which gifsicle)   ; [[ -x "$gifsicle" ]]  || { echo "No gifsicle found!" ; return 2 ;}
+  local getopt=$(which getopt)
+
+  if [[ "$OSTYPE" == "darwin"* ]] ; then
+  # Getopt on BSD is incompatible with GNU
+    getopt=/usr/local/opt/gnu-getopt/bin/getopt
+    [[ -x "$getopt" ]] || { echo "No GNU-getopt found!" ; return 2 ;}
+  fi
+
+  # Parse the options
+  local args=$($getopt -l "alert:" -l "lossy:" -l "width:" -l del,delete -l high -l tag -l "fps:" -l webm -o "a:l:w:f:dhmt" -- "$@")
+
+  if [ $? -ne 0 ]; then
+    echo 'Terminating...' >&2
+    return 2
+  fi
+
+  eval set -- "$args"
+  local use_gifski=""
+  local opt_del_after=""
+  local maxsize=""
+  local lossiness=""
+  local maxwidthski=""
+  local giftagopt=""
+  local giftag=""
+  local defaultfps=10
+  local infps=""
+  local fps=""
+  local make_webm=""
+  local alert=5000
+  while [ $# -ge 1 ]; do
+    case "$1" in
+      --)
+        # No more options left.
+        shift
+        break
+        ;;
+      -d|--del|--delete)
+        # Delete after
+        opt_del_after="true"
+        shift
+        ;;
+      -h|--high)
+        #High Quality, use gifski
+        local gifski=$(which gifski) ; [[ -x "$gifski" ]] || { echo "No gifski found!" ; return 2 ; }
+        use_gifski=true
+        giftag="${giftag}-h"
+        shift
+        ;;
+      -w|--width)
+        maxsize="-vf scale=$2:-1"
+        maxwidthski="-W $2"
+        giftag="${giftag}-w$2"
+        shift 2
+        ;;
+      -t|--tag)
+        # mark with a quality tag
+        giftagopt="true"
+        shift
+        ;;
+      -l|--lossy)
+        # Use giflossy parameter
+        lossiness="--lossy=$2"
+        giftag="${giftag}-l$2"
+        shift 2
+        ;;
+      -f|--fps)
+        # select fps
+        infps="$2"
+        giftag="${giftag}-f$2"
+        shift 2
+        ;;
+      -a|--alert)
+        # set size alert
+        alert="$2"
+        shift 2
+        ;;
+      -m|--webm)
+        # set size alert
+        make_webm="true"
+        shift
+        ;;
+    esac
+  done
+
+  if [[ -z "$*" ]]; then
+    echo "$(tput setaf 1)No input files given. Example: v2gif file [file...] [-w <max width (pixels)>] [-l <lossy level>] $(tput sgr 0)"
+    echo "-d/--del/--delete Delete original vid if done suceessfully (and file not over the size limit)"
+    echo "-h/--high         High Quality - use Gifski instead of gifsicle"
+    echo "-w/--width N      Lock maximum gif width to N pixels, resize if necessary"
+    echo "-t/--tag          Add a tag to the output gif describing the options used (useful for comparing several options)"
+    echo "-l/--lossy N      Use the Giflossy parameter for gifsicle (If your version supports it)"
+    echo "-f/--fps N        Override autodetection of incoming vid FPS (useful for downsampling)"
+    echo "-a/--alert N      Alert if over N kilobytes (Defaults to 5000)"
+    echo "-m/--webm         Also create a webm file"
+    return 1
+  fi
+
+  # Prepare the quality tag if requested.
+  [[ -z "$giftag" ]] && giftag="-default"
+  [[ -z "$giftagopt" ]] && giftag=""
+
+  for file ; do
+
+    local output_file="${file%.*}${giftag}.gif"
+    local del_after=$opt_del_after
+
+    if [[ "$make_webm" ]] ; then
+      $ffmpeg -loglevel panic -i "$file" \
+        -c:v libvpx -crf 4 -threads 0 -an -b:v 2M -auto-alt-ref 0 \
+        -quality best -loop 0 "${file%.*}.webm" || return 2
+    fi
+
+    # Set FPS to match the video if possible, otherwise fallback to default.
+    if [[ "$infps" ]] ; then
+      fps=$infps
+    else
+      fps=$defaultfps
+      if [[ -x $mediainfo ]] ; then
+        fps=$($mediainfo "$file" | grep "Frame rate   " |sed 's/.*: \([0-9.]\+\) .*/\1/' | head -1)
+        [[ -z "$fps" ]] && fps=$($mediainfo "$file" | grep "Minimum frame rate" |sed 's/.*: \([0-9.]\+\) .*/\1/' | head -1)
+      fi
+    fi
+
+    echo "$(tput setaf 2)Creating '$output_file' at $fps FPS ...$(tput sgr 0)"
+
+    if [[ "$use_gifski" = "true" ]] ; then
+      # I trust @pornel to do his own resizing optimization choices
+      $ffmpeg -loglevel panic -i "$file" -r $fps -vcodec png v2gif-tmp-%05d.png && \
+        $gifski v2gif-tmp-*.png $maxwidthski --fps $(printf "%.0f" $fps) -o "$output_file" || return 2
+    else
+      $ffmpeg -loglevel panic -i "$file" $maxsize -r $fps -vcodec png v2gif-tmp-%05d.png && \
+        $convert +dither -layers Optimize v2gif-tmp-*.png GIF:- | \
+        $gifsicle $lossiness --no-warnings --colors 256 --delay=$(echo "100/$fps"|bc) --loop --optimize=3 --multifile - > "$output_file" || return 2
+    fi
+
+    rm v2gif-tmp-*.png
+
+    # Checking if the file is bigger than Twitter likes and warn
+    if [[ $alert -gt 0 ]] ; then
+      local out_size=$(wc --bytes < "$output_file")
+      if [[ $out_size -gt $(( alert * 1000 )) ]] ; then
+        echo "$(tput setaf 3)Warning: '$output_file' is $((out_size/1000))kb.$(tput sgr 0)"
+        [[ "$del_after" == "true" ]] && echo "$(tput setaf 3)Warning: Keeping '$file' even though --del requested.$(tput sgr 0)"
+        del_after=""
+      fi
+    fi
+
+    [[ "$del_after" = "true" ]] && rm "$file"
+
+  done
+
+  echo "$(tput setaf 2)Done.$(tput sgr 0)"
 }
 
 function any2webm() {
-	about 'Converts an movies and Animated GIF files into an into a modern quality WebM video.'
-	group 'gif'
-	param '1: GIF/video file name(s)'
-	param '2: -s <WxH> ; Optional: set <W>idth and <H>eight in pixels'
-	param '3: -d       ; Optional: delete the original file if succeeded'
-	param '4: -t       ; Optional: Tag the result with quality stamp for comparison use'
-	param '5: -f <num> ; Optional: Change number of frames per second'
-	param '6: -b <num> ; Optional: Set Bandwidth (quality/size of resulting file), Defaults to 2M (bits/sec, accepts fractions)"'
-	param '7: -a <num> ; Optional: Alert if resulting file is over <num> kilobytes (default is 5000, 0 turns off)'
-	example '$ any2webm foo.gif'
-	example '$ any2webm *.mov -b 1.5M -s 600x480'
-
-	local args out_size
-
-	# Parse the options
-	args=$(getopt -l alert -l "bandwidth:" -l "width:" -l del,delete -l tag -l "fps:" -l webm -o "a:b:w:f:dt" -- "$@") || {
-		echo 'Terminating...' >&2
-		return 2
-	}
-
-	eval set -- "$args"
-	local opt_del_after=""
-	local size=""
-	local webmtagopt=""
-	local webmtag=""
-	local defaultfps=10
-	local fps=""
-	local bandwidth="2M"
-	local alert=5000
-	while [[ $# -ge 1 ]]; do
-		case "$1" in
-			--)
-				# No more options left.
-				shift
-				break
-				;;
-			-d | --del | --delete)
-				# Delete after
-				opt_del_after="true"
-				shift
-				;;
-			-s | --size)
-				size="-s $2"
-				webmtag="${webmtag}-s$2"
-				shift 2
-				;;
-			-t | --tag)
-				# mark with a quality tag
-				webmtagopt="true"
-				shift
-				;;
-			-f | --fps)
-				# select fps
-				fps="-r $2"
-				webmtag="${webmtag}-f$2"
-				shift 2
-				;;
-			-b | --bandwidth)
-				# select bandwidth
-				bandwidth="$2"
-				webmtag="${webmtag}-b$2"
-				shift 2
-				;;
-			-a | --alert)
-				# set size alert
-				alert="$2"
-				shift 2
-				;;
-		esac
-	done
-
-	if [[ -z "$*" ]]; then
-		echo "$(tput setaf 1)No input files given. Example: any2webm file [file...] [-w <max width (pixels)>] < $(tput sgr 0)"
-		return 1
-	fi
-
-	# Prepare the quality tag if requested.
-	[[ -z "$webmtag" ]] && webmtag="-default"
-	[[ -z "$webmtagopt" ]] && webmtag=""
-
-	for file; do
-
-		local output_file="${file%.*}${webmtag}.webm"
-		local del_after=$opt_del_after
-
-		echo "$(tput setaf 2)Creating '$output_file' ...$(tput sgr 0)"
-
-		$ffmpeg -loglevel panic -i "$file" \
-			-c:v libvpx -crf 4 -threads 0 -an -b:v "$bandwidth" -auto-alt-ref 0 \
-			-quality best "$fps" "$size" -loop 0 -pix_fmt yuva420p "$output_file" || return 2
-
-		# Checking if the file is bigger than Twitter likes and warn
-		if [[ $alert -gt 0 ]]; then
-			out_size=$(wc --bytes < "$output_file")
-			if [[ $out_size -gt $((alert * 1000)) ]]; then
-				echo "$(tput setaf 3)Warning: '$output_file' is $((out_size / 1000))kb.$(tput sgr 0)"
-				[[ "$del_after" == "true" ]] && echo "$(tput setaf 3)Warning: Keeping '$file' even though --del requested.$(tput sgr 0)"
-				del_after=""
-			fi
-		fi
-
-		[[ "$del_after" = "true" ]] && rm "$file"
-
-	done
-
-	echo "$(tput setaf 2)Done.$(tput sgr 0)"
+  about 'Converts an movies and Animated GIF files into an into a modern quality WebM video.'
+  group 'gif'
+  param '1: GIF/video file name(s)'
+  param '2: -s <WxH> ; Optional: set <W>idth and <H>eight in pixels'
+  param '3: -d       ; Optional: delete the original file if succeeded'
+  param '4: -t       ; Optional: Tag the result with quality stamp for comparison use'
+  param '5: -f <num> ; Optional: Change number of frames per second'
+  param '6: -b <num> ; Optional: Set Bandwidth (quality/size of resulting file), Defaults to 2M (bits/sec, accepts fractions)"'
+  param '7: -a <num> ; Optional: Alert if resulting file is over <num> kilobytes (default is 5000, 0 turns off)'
+  example '$ any2webm foo.gif'
+  example '$ any2webm *.mov -b 1.5M -s 600x480'
+
+  # Parse the options
+  local args=$(getopt -l alert -l "bandwidth:" -l "width:" -l del,delete -l tag -l "fps:" -l webm -o "a:b:w:f:dt" -- "$@")
+
+  if [ $? -ne 0 ]; then
+    echo 'Terminating...' >&2
+    return 2
+  fi
+
+  eval set -- "$args"
+  local opt_del_after=""
+  local size=""
+  local webmtagopt=""
+  local webmtag=""
+  local defaultfps=10
+  local fps=""
+  local bandwidth="2M"
+  local alert=5000
+  while [ $# -ge 1 ]; do
+    case "$1" in
+      --)
+        # No more options left.
+        shift
+        break
+        ;;
+      -d|--del|--delete)
+        # Delete after
+        opt_del_after="true"
+        shift
+        ;;
+      -s|--size)
+        size="-s $2"
+        webmtag="${webmtag}-s$2"
+        shift 2
+        ;;
+      -t|--tag)
+        # mark with a quality tag
+        webmtagopt="true"
+        shift
+        ;;
+      -f|--fps)
+        # select fps
+        fps="-r $2"
+        webmtag="${webmtag}-f$2"
+        shift 2
+        ;;
+      -b|--bandwidth)
+        # select bandwidth
+        bandwidth="$2"
+        webmtag="${webmtag}-b$2"
+        shift 2
+        ;;
+      -a|--alert)
+        # set size alert
+        alert="$2"
+        shift 2
+        ;;
+    esac
+  done
+
+  if [[ -z "$*" ]]; then
+    echo "$(tput setaf 1)No input files given. Example: any2webm file [file...] [-w <max width (pixels)>] < $(tput sgr 0)"
+    return 1
+  fi
+
+  # Prepare the quality tag if requested.
+  [[ -z "$webmtag" ]] && webmtag="-default"
+  [[ -z "$webmtagopt" ]] && webmtag=""
+
+  for file ; do
+
+    local output_file="${file%.*}${webmtag}.webm"
+    local del_after=$opt_del_after
+
+    echo "$(tput setaf 2)Creating '$output_file' ...$(tput sgr 0)"
+
+    $ffmpeg -loglevel panic -i "$file" \
+      -c:v libvpx -crf 4 -threads 0 -an -b:v $bandwidth -auto-alt-ref 0 \
+      -quality best $fps $size -loop 0 -pix_fmt yuva420p "$output_file" || return 2
+
+    # Checking if the file is bigger than Twitter likes and warn
+    if [[ $alert -gt 0 ]] ; then
+      local out_size=$(wc --bytes < "$output_file")
+      if [[ $out_size -gt $(( alert * 1000 )) ]] ; then
+        echo "$(tput setaf 3)Warning: '$output_file' is $((out_size/1000))kb.$(tput sgr 0)"
+        [[ "$del_after" == "true" ]] && echo "$(tput setaf 3)Warning: Keeping '$file' even though --del requested.$(tput sgr 0)"
+        del_after=""
+      fi
+    fi
+
+    [[ "$del_after" = "true" ]] && rm "$file"
+
+  done
+
+  echo "$(tput setaf 2)Done.$(tput sgr 0)"
 }
diff --git a/plugins/available/git-subrepo.plugin.bash b/plugins/available/git-subrepo.plugin.bash
index 6eb8d7c4..085a69b4 100644
--- a/plugins/available/git-subrepo.plugin.bash
+++ b/plugins/available/git-subrepo.plugin.bash
@@ -1,7 +1,6 @@
-# shellcheck shell=bash
+# Load git-subrepo if you are using it, and initialize completions
+
+cite about-plugin
 about-plugin 'load git-subrepo if you are using it, and initialize completions'
 
-if [[ -s "${GIT_SUBREPO_ROOT:=$HOME/.git-subrepo}/init" ]]; then
-	# shellcheck disable=SC1091
-	source "$GIT_SUBREPO_ROOT/init"
-fi
+[[ -e "${GIT_SUBREPO_ROOT:=~/.git-subrepo}/init" ]] && source "$GIT_SUBREPO_ROOT/init"
diff --git a/plugins/available/goenv.plugin.bash b/plugins/available/goenv.plugin.bash
index 17e4a0ff..daa320e5 100644
--- a/plugins/available/goenv.plugin.bash
+++ b/plugins/available/goenv.plugin.bash
@@ -24,6 +24,10 @@ if ! _command_exists goenv && [[ -x "$GOENV_ROOT/bin/goenv" ]]; then
 	pathmunge "$GOENV_ROOT/bin"
 fi
 
+if test -d "$GOPATH/bin"; then
+    pathmunge "$GOPATH/bin"
+fi
+
 # Initialize goenv
 eval "$(goenv init - bash)"
 
diff --git a/plugins/available/gradle.plugin.bash b/plugins/available/gradle.plugin.bash
index 8dec1313..59050aee 100644
--- a/plugins/available/gradle.plugin.bash
+++ b/plugins/available/gradle.plugin.bash
@@ -1,12 +1,27 @@
 cite about-plugin
 about-plugin 'Add a gw command to use gradle wrapper if present, else use system gradle'
 
+v=7.0
+if [ -d "/opt/gradle/gradle-$v" ]; then
+  GRADLE_HOME=/opt/gradle/gradle-$v
+  export PATH=$PATH:$GRADLE_HOME/bin
+fi
+
 function gw() {
   local file="gradlew"
-  local result
+  local curr_path="${PWD}"
+  local result="gradle"
 
-  result="$(_bash-it-find-in-ancestor "${file}")"
+  # Search recursively upwards for file.
+  until [[ "${curr_path}" == "/" ]]; do
+    if [[ -e "${curr_path}/${file}" ]]; then
+      result="${curr_path}/${file}"
+      break
+    else
+      curr_path=$(dirname "${curr_path}")
+    fi
+  done
 
   # Call gradle
-  "${result:-gradle}" $*
+  "${result}" $*
 }
diff --git a/plugins/available/groovy.plugin.bash b/plugins/available/groovy.plugin.bash
new file mode 100644
index 00000000..4d5b3dc8
--- /dev/null
+++ b/plugins/available/groovy.plugin.bash
@@ -0,0 +1,10 @@
+cite about-plugin
+about-plugin 'enable groovy'
+
+# groovy
+if [ -d "/opt/groovy" ]; then
+  v=3.0.7
+  export GROOVY_HOME="/opt/groovy/groovy-${v}"
+  export PATH="$PATH:${GROOVY_HOME}/bin"
+fi
+
diff --git a/plugins/available/history-search.plugin.bash b/plugins/available/history-search.plugin.bash
index 96941993..ea02eb74 100644
--- a/plugins/available/history-search.plugin.bash
+++ b/plugins/available/history-search.plugin.bash
@@ -1,4 +1,5 @@
 # shellcheck shell=bash
+cite about-plugin
 about-plugin 'search history using the prefix already entered'
 
 # enter a few characters and press UpArrow/DownArrow
diff --git a/plugins/available/history-substring-search.plugin.bash b/plugins/available/history-substring-search.plugin.bash
index dde32720..e0e37f43 100644
--- a/plugins/available/history-substring-search.plugin.bash
+++ b/plugins/available/history-substring-search.plugin.bash
@@ -1,4 +1,5 @@
 # shellcheck shell=bash
+cite about-plugin
 about-plugin 'search history using the substring already entered'
 
 # enter a few characters and press UpArrow/DownArrow
diff --git a/plugins/available/history.plugin.bash b/plugins/available/history.plugin.bash
index d9e930c3..08ca8de6 100644
--- a/plugins/available/history.plugin.bash
+++ b/plugins/available/history.plugin.bash
@@ -1,26 +1,29 @@
 # shellcheck shell=bash
+cite about-plugin
 about-plugin 'improve history handling with sane defaults'
 
-# Append the history list to the file named by the value of the HISTFILE
-# variable when the shell exits, rather than overwriting the file.
+# append to bash_history if Terminal.app quits
 shopt -s histappend
 
-# 'ignorespace': don't save command lines which begin with a space to history
-# 'erasedups' (alternative 'ignoredups'): don't save duplicates to history
-# 'autoshare': automatically share history between multiple running shells
-: "${HISTCONTROL:=ignorespace:erasedups:autoshare}"
+# erase duplicates; alternative option: export HISTCONTROL=ignoredups
+export HISTCONTROL=${HISTCONTROL:-ignorespace:erasedups}
 
 # resize history to 100x the default (500)
-: "${HISTSIZE:=50000}"
+export HISTSIZE=${HISTSIZE:-50000}
 
-function top-history() {
+top-history() {
 	about 'print the name and count of the most commonly run tools'
 
-	# - Make sure formatting doesn't interfer with our parsing
-	# - Use awk to count how many times the first command on each line has been called
-	# - Truncate to 10 lines
-	# - Print in column format
-	HISTTIMEFORMAT='' history \
+	if [[ -n $HISTTIMEFORMAT ]]; then
+		# To parse history we need a predictable format, which HISTTIMEFORMAT
+		# gets in the way of. So we unset it and set a trap to guarantee the
+		# user's environment returns to normal even if the pipeline below fails.
+		# shellcheck disable=SC2064
+		trap "export HISTTIMEFORMAT='$HISTTIMEFORMAT'" RETURN
+		unset HISTTIMEFORMAT
+	fi
+
+	history \
 		| awk '{
 				a[$2]++
 			}END{
diff --git a/plugins/available/java.plugin.bash b/plugins/available/java.plugin.bash
index 2a80a99a..98e46247 100644
--- a/plugins/available/java.plugin.bash
+++ b/plugins/available/java.plugin.bash
@@ -1,11 +1,11 @@
-# shellcheck shell=bash
+cite about-plugin
 about-plugin 'Java and JAR helper functions'
 
 function jar_manifest {
-	about "extracts the specified JAR file's MANIFEST file and prints it to stdout"
-	group 'java'
-	param '1: JAR file to extract the MANIFEST from'
-	example 'jar_manifest lib/foo.jar'
+  about "extracts the specified JAR file's MANIFEST file and prints it to stdout"
+  group 'java'
+  param '1: JAR file to extract the MANIFEST from'
+  example 'jar_manifest lib/foo.jar'
 
-	unzip -c "${1:?${FUNCNAME[0]}: JAR file must be specified}" META-INF/MANIFEST.MF
+  unzip -c $1 META-INF/MANIFEST.MF
 }
diff --git a/plugins/available/jbang.plugin.bash b/plugins/available/jbang.plugin.bash
new file mode 100644
index 00000000..d0cc3141
--- /dev/null
+++ b/plugins/available/jbang.plugin.bash
@@ -0,0 +1,10 @@
+# Load jbang, if you are using it
+
+cite about-plugin
+about-plugin 'load jbang, if you are using it'
+
+pathmunge "$HOME"/.jbang/bin
+# Add Jbang to environment
+# alias j!=jbang
+# export PATH="$HOME/.jbang/bin:$PATH"
+
diff --git a/plugins/available/jekyll.plugin.bash b/plugins/available/jekyll.plugin.bash
index d818b076..c340c432 100644
--- a/plugins/available/jekyll.plugin.bash
+++ b/plugins/available/jekyll.plugin.bash
@@ -1,288 +1,367 @@
-# shellcheck shell=bash
 cite about-plugin
 about-plugin 'manage your jekyll site'
 
-function editpost() {
-	about 'edit a post'
-	param '1: site directory'
-	group 'jekyll'
-
-	local SITE site POST DATE TITLE POSTS
-	local -i COUNTER=1 POST_TO_EDIT ret
-	if [[ -z "${1:-}" ]]; then
-		echo "Error: no site specified."
-		echo "The site is the name of the directory your project is in."
-		return 1
-	fi
-
-	for site in "${SITES[@]:-}"; do
-		if [[ "${site##*/}" == "$1" ]]; then
-			SITE="${site}"
-			break
-		fi
-	done
-
-	if [[ -z "${SITE:-}" ]]; then
-		echo "No such site."
-		return 1
-	fi
-
-	pushd "${SITE}/_posts" > /dev/null || return
-
-	for POST in *; do
-		DATE="$(echo "${POST}" | grep -oE "[0-9]{4}-[0-9]{1,2}-[0-9]{1,2}")"
-		TITLE="$(grep -oE "title: (.+)" < "${POST}")"
-		TITLE="${TITLE/title: /}"
-		echo "${COUNTER}) 	${DATE}	${TITLE}"
-		POSTS[COUNTER]="$POST"
-		COUNTER="$((COUNTER + 1))"
-	done > >(less)
-	read -rp "Number of post to edit: " POST_TO_EDIT
-	"${JEKYLL_EDITOR:-${VISUAL:-${EDITOR:-${ALTERNATE_EDITOR:-nano}}}}" "${POSTS[POST_TO_EDIT]}"
-	ret="$?"
-	popd > /dev/null || return "$ret"
-	return "$ret"
+editpost() {
+  about 'edit a post'
+  param '1: site directory'
+  group 'jekyll'
+
+  unset SITE
+  if [ -z "$1" ]
+  then
+    echo "Error: no site specified."
+    echo "The site is the name of the directory your project is in."
+    return 1
+  fi
+
+  for site in ${SITES[@]}
+  do
+    if [ "${site##*/}" = "$1" ]
+    then
+      SITE=$site
+      break
+    fi
+  done
+
+  if [ -z "$SITE" ]
+  then
+    echo "No such site."
+    return 1
+  fi
+
+  builtin cd "$SITE/_posts"
+
+  COUNTER=1
+  NUMBER="$RANDOM"
+  TMPFILE="/tmp/editpost-$NUMBER"
+
+  for POST in *
+  do
+    DATE=`echo $POST | grep -oE "[0-9]{4}-[0-9]{1,2}-[0-9]{1,2}"`
+    TITLE=`cat $POST | grep -oE "title: (.+)"`
+    TITLE=`echo $TITLE | sed 's/title: //'`
+    echo "$COUNTER) 	$DATE	$TITLE" >> "$TMPFILE"
+    POSTS[$COUNTER]=$POST
+    COUNTER=`expr $COUNTER + 1`
+  done
+  less $TMPFILE
+  read -p "Number of post to edit: " POST_TO_EDIT
+  if [ -z "$JEKYLL_EDITOR" ]
+  then
+    nano "${POSTS[$POST_TO_EDIT]}"
+  else
+    "$JEKYLL_EDITOR" "${POSTS[$POST_TO_EDIT]}"
+  fi
 }
 
-function newpost() {
-	about 'create a new post'
-	param '1: site directory'
-	group 'jekyll'
-
-	local SITE site FNAME_POST_TITLE FNAME YAML_DATE
-	local JEKYLL_FORMATTING FNAME_DATE OPTIONS OPTION POST_TYPE POST_TITLE
-	local -i loc=0 ret
-	if [[ -z "${1:-}" ]]; then
-		echo "Error: no site specified."
-		echo "The site is the name of the directory your project is in."
-		return 1
-	fi
-
-	if [[ -z "${SITE}" ]]; then
-		echo "No such site."
-		return 1
-	fi
-
-	for site in "${SITES[@]}"; do
-		if [[ "${site##*/}" == "$1" ]]; then
-			SITE="$site"
-			JEKYLL_FORMATTING="${MARKUPS[loc]}"
-			break
-		fi
-		loc=$((loc + 1))
-	done
-
-	# Change directory into the local jekyll root
-	pushd "${SITE}/_posts" > /dev/null || return
-
-	# Get the date for the new post's filename
-	FNAME_DATE="$(date "+%Y-%m-%d")"
-
-	# If the user is using markdown or textile formatting, let them choose what type of post they want. Sort of like Tumblr.
-	OPTIONS=('Text' 'Quote' 'Image' 'Audio' 'Video' 'Link')
-
-	if [[ $JEKYLL_FORMATTING == "markdown" || $JEKYLL_FORMATTING == "textile" ]]; then
-		select OPTION in "${OPTIONS[@]}"; do
-			POST_TYPE="${OPTION}"
-			break
-		done
-	fi
-
-	# Get the title for the new post
-	read -rp "Enter title of the new post: " POST_TITLE
-
-	# Convert the spaces in the title to hyphens for use in the filename
-	FNAME_POST_TITLE="${POST_TITLE/ /-}"
-
-	# Now, put it all together for the full filename
-	FNAME="$FNAME_DATE-$FNAME_POST_TITLE.$JEKYLL_FORMATTING"
-
-	# And, finally, create the actual post file. But we're not done yet...
-	{
-		# Write a little stuff to the file for the YAML Front Matter
-		echo "---"
-
-		# Now we have to get the date, again. But this time for in the header (YAML Front Matter) of the file
-		YAML_DATE="$(date "+%B %d %Y %X")"
-
-		# Echo the YAML Formatted date to the post file
-		echo "date: $YAML_DATE"
-
-		# Echo the original post title to the YAML Front Matter header
-		echo "title: $POST_TITLE"
-
-		# And, now, echo the "post" layout to the YAML Front Matter header
-		echo "layout: post"
-
-		# Close the YAML Front Matter Header
-		echo "---"
-
-		echo
-	} > "${FNAME}"
-
-	# Generate template text based on the post type
-	if [[ $JEKYLL_FORMATTING == "markdown" ]]; then
-		case $POST_TYPE in
-			"Text")
-				true
-				;;
-			"Quote")
-				echo "> Quote"
-				echo
-				echo "&mdash; Author"
-				;;
-			"Image")
-				echo "![Alternate Text](/path/to/image/or/url)"
-				;;
-			"Audio")
-				echo "<html><audio src=\"/path/to/audio/file\" controls=\"controls\"></audio></html>"
-				;;
-			"Video")
-				echo "<html><video src=\"/path/to/video\" controls=\"controls\"></video></html>"
-				;;
-			"Link")
-				echo "[link][1]"
-				echo
-				echo "> Quote"
-				echo
-				echo "[1]: url"
-				;;
-		esac
-	elif [[ $JEKYLL_FORMATTING == "textile" ]]; then
-		case $POST_TYPE in
-			"Text")
-				true
-				;;
-			"Quote")
-				echo "bq. Quote"
-				echo
-				echo "&mdash; Author"
-				;;
-			"Image")
-				echo "!url(alt text)"
-				;;
-			"Audio")
-				echo "<html><audio src=\"/path/to/audio/file\" controls=\"controls\"></audio></html>"
-				;;
-			"Video")
-				echo "<html><video src=\"/path/to/video\" controls=\"controls\"></video></html>"
-				;;
-			"Link")
-				echo "\"Site\":url"
-				echo
-				echo "bq. Quote"
-				;;
-		esac
-	fi >> "${FNAME}"
-
-	# Open the file in your favorite editor
-	"${JEKYLL_EDITOR:-${VISUAL:-${EDITOR:-${ALTERNATE_EDITOR:-nano}}}}" "${FNAME}"
-	ret="$?"
-	popd > /dev/null || return "$ret"
-	return "$ret"
+newpost() {
+  about 'create a new post'
+  param '1: site directory'
+  group 'jekyll'
+
+  unset SITE
+  if [ -z "$1" ]
+  then
+    echo "Error: no site specified."
+    echo "The site is the name of the directory your project is in."
+    return 1
+  fi
+
+  if [ -z "$SITE" ]
+  then
+    echo "No such site."
+    return 1
+  fi
+
+  loc=0
+
+  for site in ${SITES[@]}
+  do
+    if [ "${site##*/}" = "$1" ]
+    then
+      SITE=$site
+      JEKYLL_FORMATTING=${MARKUPS[$loc]}
+      break
+    fi
+    loc=$(($loc+1))
+  done
+
+  # 'builtin cd' into the local jekyll root
+
+  builtin cd "$SITE/_posts"
+
+  # Get the date for the new post's filename
+
+  FNAME_DATE=$(date "+%Y-%m-%d")
+
+  # If the user is using markdown or textile formatting, let them choose what type of post they want. Sort of like Tumblr.
+
+  OPTIONS="Text Quote Image Audio Video Link"
+
+  if [ $JEKYLL_FORMATTING = "markdown" -o $JEKYLL_FORMATTING = "textile" ]
+  then
+    select OPTION in $OPTIONS
+    do
+      if [[ $OPTION = "Text" ]]
+      then
+        POST_TYPE="Text"
+        break
+      fi
+
+      if [[ $OPTION = "Quote" ]]
+      then
+        POST_TYPE="Quote"
+        break
+      fi
+
+      if [[ $OPTION = "Image" ]]
+      then
+        POST_TYPE="Image"
+        break
+      fi
+
+      if [[ $OPTION = "Audio" ]]
+      then
+        POST_TYPE="Audio"
+        break
+      fi
+
+      if [[ $OPTION = "Video" ]]
+      then
+        POST_TYPE="Video"
+        break
+      fi
+
+      if [[ $OPTION = "Link" ]]
+      then
+        POST_TYPE="Link"
+        break
+      fi
+    done
+  fi
+
+  # Get the title for the new post
+
+  read -p "Enter title of the new post: " POST_TITLE
+
+  # Convert the spaces in the title to hyphens for use in the filename
+
+  FNAME_POST_TITLE=`echo $POST_TITLE | tr ' ' "-"`
+
+  # Now, put it all together for the full filename
+
+  FNAME="$FNAME_DATE-$FNAME_POST_TITLE.$JEKYLL_FORMATTING"
+
+  # And, finally, create the actual post file. But we're not done yet...
+
+  touch "$FNAME"
+
+  # Write a little stuff to the file for the YAML Front Matter
+
+  echo "---" >> $FNAME
+
+  # Now we have to get the date, again. But this time for in the header (YAML Front Matter) of
+  # the file
+
+  YAML_DATE=$(date "+%B %d %Y %X")
+
+  # Echo the YAML Formatted date to the post file
+
+  echo "date: $YAML_DATE" >> $FNAME
+
+  # Echo the original post title to the YAML Front Matter header
+
+  echo "title: $POST_TITLE" >> $FNAME
+
+  # And, now, echo the "post" layout to the YAML Front Matter header
+
+  echo "layout: post" >> $FNAME
+
+  # Close the YAML Front Matter Header
+
+  echo "---" >> $FNAME
+  echo >> $FNAME
+
+  # Generate template text based on the post type
+
+  if [[ $JEKYLL_FORMATTING = "markdown" ]]
+  then
+    if [[ $POST_TYPE = "Text" ]]
+    then
+      true
+    fi
+
+    if [[ $POST_TYPE = "Quote" ]]
+    then
+      echo "> Quote" >> $FNAME
+      echo >> $FNAME
+      echo "&mdash; Author" >> $FNAME
+    fi
+
+    if [[ $POST_TYPE = "Image" ]]
+    then
+      echo "![Alternate Text](/path/to/image/or/url)" >> $FNAME
+    fi
+
+    if [[ $POST_TYPE = "Audio" ]]
+    then
+      echo "<html><audio src=\"/path/to/audio/file\" controls=\"controls\"></audio></html>" >> $FNAME
+    fi
+
+    if [[ $POST_TYPE = "Video" ]]
+    then
+      echo "<html><video src=\"/path/to/video\" controls=\"controls\"></video></html>" >> $FNAME
+    fi
+
+    if [[ $POST_TYPE = "Link" ]]
+    then
+      echo "[link][1]" >> $FNAME
+      echo >> $FNAME
+      echo "> Quote" >> $FNAME
+      echo >> $FNAME
+      echo "[1]: url" >> $FNAME
+    fi
+  fi
+
+  if [[ $JEKYLL_FORMATTING = "textile" ]]
+  then
+    if [[ $POST_TYPE = "Text" ]]
+    then
+      true
+    fi
+
+    if [[ $POST_TYPE = "Quote" ]]
+    then
+      echo "bq. Quote" >> $FNAME
+      echo >> $FNAME
+      echo "&mdash; Author" >> $FNAME
+    fi
+
+    if [[ $POST_TYPE = "Image" ]]
+    then
+      echo "!url(alt text)" >> $FNAME
+    fi
+
+    if [[ $POST_TYPE = "Audio" ]]
+    then
+      echo "<html><audio src=\"/path/to/audio/file\" controls=\"controls\"></audio></html>" >> $FNAME
+    fi
+
+    if [[ $POST_TYPE = "Video" ]]
+    then
+      echo "<html><video src=\"/path/to/video\" controls=\"controls\"></video></html>" >> $FNAME
+    fi
+
+    if [[ $POST_TYPE = "Link" ]]
+    then
+      echo "\"Site\":url" >> $FNAME
+      echo >> $FNAME
+      echo "bq. Quote" >> $FNAME
+    fi
+  fi
+
+  # Open the file in your favorite editor
+
+  "$JEKYLL_EDITOR" $FNAME
 }
 
 function testsite() {
-	about 'launches local jekyll server'
-	param '1: site directory'
-	group 'jekyll'
-
-	local SITE site
-	local -i ret
-	if [[ -z "${1:-}" ]]; then
-		echo "Error: no site specified."
-		echo "The site is the name of the directory your project is in."
-		return 1
-	fi
-
-	for site in "${SITES[@]}"; do
-		if [[ "${site##*/}" == "$1" ]]; then
-			SITE="$site"
-			break
-		fi
-	done
-
-	if [[ -z "${SITE}" ]]; then
-		echo "No such site."
-		return 1
-	fi
-
-	pushd "${SITE}" > /dev/null || return
-	jekyll --server --auto
-	ret="$?"
-	popd > /dev/null || return "$ret"
-	return "$ret"
+  about 'launches local jekyll server'
+  param '1: site directory'
+  group 'jekyll'
+
+  unset SITE
+  if [ -z "$1" ]
+  then
+    echo "Error: no site specified."
+    echo "The site is the name of the directory your project is in."
+    return 1
+  fi
+
+  for site in ${SITES[@]}
+  do
+    if [ "${site##*/}" = "$1" ]
+    then
+      SITE=$site
+      break
+    fi
+  done
+
+  if [ -z "$SITE" ]
+  then
+    echo "No such site."
+    return 1
+  fi
+
+  builtin cd $SITE
+  jekyll --server --auto
 }
 
 function buildsite() {
-	about 'builds site'
-	param '1: site directory'
-	group 'jekyll'
-
-	local SITE site
-	local -i ret
-	if [[ -z "${1:-}" ]]; then
-		echo "Error: no site specified."
-		echo "The site is the name of the directory your project is in."
-		return 1
-	fi
-
-	for site in "${SITES[@]}"; do
-		if [[ "${site##*/}" == "$1" ]]; then
-			SITE="$site"
-			break
-		fi
-	done
-
-	if [[ -z "${SITE}" ]]; then
-		echo "No such site."
-		return 1
-	fi
-
-	pushd "${SITE}" > /dev/null || return
-	rm -rf _site
-	jekyll --no-server
-	ret="$?"
-	popd > /dev/null || return "$ret"
-	return "$ret"
+  about 'builds site'
+  param '1: site directory'
+  group 'jekyll'
+
+  unset SITE
+  if [ -z "$1" ]
+  then
+    echo "Error: no site specified."
+    echo "The site is the name of the directory your project is in."
+    return 1
+  fi
+
+  for site in ${SITES[@]}
+  do
+    if [ "${site##*/}" = "$1" ]
+    then
+      SITE=$site
+      break
+    fi
+  done
+
+  if [ -z "$SITE" ]
+  then
+    echo "No such site."
+    return 1
+  fi
+
+  builtin cd $SITE
+  rm -rf _site
+  jekyll --no-server
 }
 
 function deploysite() {
-	about 'rsyncs site to remote host'
-	param '1: site directory'
-	group 'jekyll'
-
-	local SITE site REMOTE
-	local -i loc=0 ret
-	if [[ -z "${1:-}" ]]; then
-		echo "Error: no site specified."
-		echo "The site is the name of the directory your project is in."
-		return 1
-	fi
-
-	for site in "${SITES[@]}"; do
-		if [[ "${site##*/}" == "$1" ]]; then
-			SITE="$site"
-			# shellcheck disable=SC2153 # who knows
-			REMOTE="${REMOTES[loc]}"
-			break
-		fi
-		loc=$((loc + 1))
-	done
-
-	if [[ -z "${SITE}" ]]; then
-		echo "No such site."
-		return 1
-	fi
-
-	pushd "${SITE}" > /dev/null || return
-	rsync -rz "${REMOTE?}"
-	ret="$?"
-	popd > /dev/null || return "$ret"
-	return "$ret"
+  about 'rsyncs site to remote host'
+  param '1: site directory'
+  group 'jekyll'
+
+  unset SITE
+  if [ -z "$1" ]
+  then
+    echo "Error: no site specified."
+    echo "The site is the name of the directory your project is in."
+    return 1
+  fi
+
+  loc=0
+
+  for site in ${SITES[@]}
+  do
+    if [ "${site##*/}" = "$1" ]
+    then
+      SITE=$site
+      REMOTE=${REMOTES[$loc]}
+      break
+    fi
+    loc=$(($loc+1))
+  done
+
+  if [ -z "$SITE" ]
+  then
+    echo "No such site."
+    return 1
+  fi
+
+  builtin cd $SITE
+  rsync -rz $REMOTE
 }
-
-# Load the Jekyll config
-if [[ -s "$HOME/.jekyllconfig" ]]; then
-	source "$HOME/.jekyllconfig"
-fi
diff --git a/plugins/available/keycode.plugin.bash b/plugins/available/keycode.plugin.bash
new file mode 100644
index 00000000..c074e85d
--- /dev/null
+++ b/plugins/available/keycode.plugin.bash
@@ -0,0 +1,52 @@
+cite about-plugin
+about-plugin 'caps lock virando grave'
+
+# use xev para ver keycode ...
+# ----------------------------------------------------------------------------
+# dead + _ + key => key + space
+# xmodmap -e 'eycode 194  = dead_grave'
+
+# 1 2 [3] 4 5
+#xmodmap -e 'keycode 194  = grave'       # `
+
+# 1 2 3 [4] 5
+#xmodmap -e 'keycode 195  = asciitilde '       # ~
+
+# 1 2 3 4 [5]
+#xmodmap -e 'keycode 196  = asciicircum'  # ^
+
+## caps lock virando grave
+
+if [[ ! -f /tmp/keycode ]]; then
+# apago o caps lock
+xmodmap -e 'clear lock'
+#xmodmap -e 'keycode 66 = grave acute dead_grave'
+xmodmap -e 'keycode 66 = tab iso_left_tab iso_left_tab'
+
+echo on > /tmp/keycode
+fi
+
+# <caps lock>        : `
+# <shift><caps lock> : ´
+
+## caps lock virando grave e dead_grave
+#xmodmap -e 'keycode 66 = grave'  # `
+#xmodmap -e 'keycode 66 = dead_acute'  # `
+## <caps lock> retorna grave
+## <shift><caps lock> retorna retorna dead_grave
+
+# botões especiais
+# ================
+
+#_____________________________________________________________________-
+# [carta] [home] [msn] [fone] <1,2,3,4,5,*> [>/||] [|<<] [>>|] [#]
+# <esc>  [f1]  .......................................    [f12]
+# [papel]
+# [foto]      teclado
+# [lupa+]
+# [lupa]
+#_____________________________________________________________________-
+
+# [papel]
+# keycode 243 (keysym 0x1008ff5b, xf86documents)
+#xmodmap -e 'keycode 243 = acute grave dead_grave'
diff --git a/plugins/available/latex.plugin.bash b/plugins/available/latex.plugin.bash
index 474f4abc..6ebb70d3 100644
--- a/plugins/available/latex.plugin.bash
+++ b/plugins/available/latex.plugin.bash
@@ -1,19 +1,9 @@
-# shellcheck shell=bash
-about-plugin 'add MacTeX to PATH'
-
-_bash_it_plugin_latex_paths=(
-	# Standard locations
-	/usr/local/texbin
-	# MacOS locations
-	/Library/TeX/texbin
-)
+cite about-plugin
+about-plugin 'use mactex'
 
 # add mactex to the path if its present
-for _bash_it_plugin_latex_path in "${_bash_it_plugin_latex_paths[@]}"; do
-	if [[ -d "$_bash_it_plugin_latex_path/" ]]; then
-		pathmunge "$_bash_it_plugin_latex_path" after && break
-	fi
-done
-
-# Cleanup
-unset "${!_bash_it_plugin_latex_@}"
+MACTEX_PATH=/usr/local/texlive/2009/bin/universal-darwin
+if [[ -d  $MACTEX_PATH ]]; then
+  pathmunge $MACTEX_PATH after
+fi
+unset MACTEX_PATH
diff --git a/plugins/available/luaenv.plugin.bash b/plugins/available/luaenv.plugin.bash
new file mode 100644
index 00000000..1e2efade
--- /dev/null
+++ b/plugins/available/luaenv.plugin.bash
@@ -0,0 +1,12 @@
+cite about-plugin
+about-plugin 'load luaenv, if you are using it'
+
+export luaenv_ROOT="$HOME/.luaenv"
+pathmunge "$luaenv_ROOT/bin"
+
+[[ `which luaenv 2>/dev/null` ]] && eval "$(luaenv init - bash)"
+
+#Load luaenv virtualenv if the virtualenv plugin is installed.
+if luaenv virtualenv-init - &> /dev/null; then
+  eval "$(luaenv virtualenv-init - bash)"
+fi
diff --git a/plugins/available/man.plugin.bash b/plugins/available/man.plugin.bash
index b981565f..473f04fd 100644
--- a/plugins/available/man.plugin.bash
+++ b/plugins/available/man.plugin.bash
@@ -1,14 +1,10 @@
-# shellcheck shell=bash
+cite about-plugin
 about-plugin 'colorize man pages for better readability'
 
-: "${LESS_TERMCAP_mb:=$'\e[1;32m'}"
-: "${LESS_TERMCAP_md:=$'\e[1;32m'}"
-: "${LESS_TERMCAP_me:=$'\e[0m'}"
-: "${LESS_TERMCAP_se:=$'\e[0m'}"
-: "${LESS_TERMCAP_so:=$'\e[01;33m'}"
-: "${LESS_TERMCAP_ue:=$'\e[0m'}"
-: "${LESS_TERMCAP_us:=$'\e[1;4;31m'}"
-
-: "${LESS:=}"
-export "${!LESS_TERMCAP@}"
-export LESS="R${LESS#-}"
+export LESS_TERMCAP_mb=$'\e[1;32m'
+export LESS_TERMCAP_md=$'\e[1;32m'
+export LESS_TERMCAP_me=$'\e[0m'
+export LESS_TERMCAP_se=$'\e[0m'
+export LESS_TERMCAP_so=$'\e[01;33m'
+export LESS_TERMCAP_ue=$'\e[0m'
+export LESS_TERMCAP_us=$'\e[1;4;31m'
diff --git a/plugins/available/ndenv.plugin.bash b/plugins/available/ndenv.plugin.bash
new file mode 100644
index 00000000..c1b4f902
--- /dev/null
+++ b/plugins/available/ndenv.plugin.bash
@@ -0,0 +1,12 @@
+cite about-plugin
+about-plugin 'load ndenv, if you are using it'
+
+export ndenv_ROOT="$HOME/.ndenv"
+pathmunge "$ndenv_ROOT/bin"
+
+[[ `which ndenv 2>/dev/null` ]] && eval "$(ndenv init - bash)"
+
+#Load ndenv virtualenv if the virtualenv plugin is installed.
+if ndenv virtualenv-init - &> /dev/null; then
+  eval "$(ndenv virtualenv-init - bash)"
+fi
diff --git a/plugins/available/nginx.plugin.bash b/plugins/available/nginx.plugin.bash
index 8d75a881..c540a23a 100644
--- a/plugins/available/nginx.plugin.bash
+++ b/plugins/available/nginx.plugin.bash
@@ -1,55 +1,66 @@
-# shellcheck shell=bash
+cite about-plugin
 about-plugin 'manage your nginx service'
 
-pathmunge "${NGINX_PATH:=/opt/nginx}/sbin" after
-export NGINX_PATH
+export NGINX_PATH='/opt/nginx'
+pathmunge $NGINX_PATH/sbin after
 
 function nginx_reload() {
-	about 'reload your nginx config'
-	group 'nginx'
-
-	local FILE="${NGINX_PATH?}/logs/nginx.pid"
-	if [[ -s $FILE ]]; then
-		echo "Reloading NGINX..."
-		read -r PID < "${FILE}"
-		sudo kill -HUP "${PID?}"
-	else
-		echo "Nginx pid file not found"
-		return 0
-	fi
+  about 'reload your nginx config'
+  group 'nginx'
+
+  FILE="${NGINX_PATH}/logs/nginx.pid"
+  if [ -e $FILE ]; then
+    echo "Reloading NGINX..."
+    PID=`cat $NGINX_PATH/logs/nginx.pid`
+    sudo kill -HUP $PID
+  else
+    echo "Nginx pid file not found"
+    return 0
+  fi
 }
 
 function nginx_stop() {
-	about 'stop nginx'
-	group 'nginx'
-
-	local FILE="${NGINX_PATH?}/logs/nginx.pid"
-	if [[ -s $FILE ]]; then
-		echo "Stopping NGINX..."
-		read -r PID < "${FILE}"
-		sudo kill -INT "${PID?}"
-	else
-		echo "Nginx pid file not found"
-		return 0
-	fi
+  about 'stop nginx'
+  group 'nginx'
+
+  FILE="${NGINX_PATH}/logs/nginx.pid"
+  if [ -e $FILE ]; then
+    echo "Stopping NGINX..."
+    PID=`cat $NGINX_PATH/logs/nginx.pid`
+    sudo kill -INT $PID
+  else
+    echo "Nginx pid file not found"
+    return 0
+  fi
 }
 
 function nginx_start() {
-	about 'start nginx'
-	group 'nginx'
-
-	local FILE="${NGINX_PATH?}/sbin/nginx"
-	if [[ -x $FILE ]]; then
-		echo "Starting NGINX..."
-		sudo "${FILE}"
-	else
-		echo "Couldn't start nginx"
-	fi
+  about 'start nginx'
+  group 'nginx'
+
+  FILE="${NGINX_PATH}/sbin/nginx"
+  if [ -e $FILE ]; then
+    echo "Starting NGINX..."
+    sudo $NGINX_PATH/sbin/nginx
+  else
+    echo "Couldn't start nginx"
+  fi
 }
 
 function nginx_restart() {
-	about 'restart nginx'
-	group 'nginx'
+  about 'restart nginx'
+  group 'nginx'
 
-	nginx_stop && nginx_start
+  FILE="${NGINX_PATH}/logs/nginx.pid"
+  if [ -e $FILE ]; then
+    echo "Stopping NGINX..."
+    PID=`cat $NGINX_PATH/logs/nginx.pid`
+    sudo kill -INT $PID
+    sleep 1
+    echo "Starting NGINX..."
+    sudo $NGINX_PATH/sbin/nginx
+  else
+    echo "Nginx pid file not found"
+    return 0
+  fi
 }
diff --git a/plugins/available/osx-timemachine.plugin.bash b/plugins/available/osx-timemachine.plugin.bash
index e30d37bd..3d7ff00c 100644
--- a/plugins/available/osx-timemachine.plugin.bash
+++ b/plugins/available/osx-timemachine.plugin.bash
@@ -1,95 +1,84 @@
-# shellcheck shell=bash
+cite about-plugin
 about-plugin 'OS X Time Machine functions'
 
-if [[ "${OSTYPE}" != 'darwin'* ]]; then
-	_log_warning "This plugin only works with Mac OS X"
-	return 1
-fi
-
 function time-machine-destination() {
-	group "osx-timemachine"
-	about "Shows the OS X Time Machine destination/mount point"
+  group "osx-timemachine"
+  about "Shows the OS X Time Machine destination/mount point"
 
-	tmutil destinationinfo | grep "Mount Point" | sed -e 's/Mount Point   : \(.*\)/\1/g'
+  echo $(tmutil destinationinfo | grep "Mount Point" | sed -e 's/Mount Point   : \(.*\)/\1/g')
 }
 
 function time-machine-list-machines() {
-	group "osx-timemachine"
-	about "Lists the OS X Time Machine machines on the backup volume"
+  group "osx-timemachine"
+  about "Lists the OS X Time Machine machines on the backup volume"
 
-	local tmdest
-	tmdest="$(time-machine-destination)/Backups.backupdb"
+  local tmdest="$(time-machine-destination)/Backups.backupdb"
 
-	find "$tmdest" -maxdepth 1 -mindepth 1 -type d | grep -v "/\." | while read -r line; do
-		echo "${line##*/}"
-	done
+  find "$tmdest" -maxdepth 1 -mindepth 1 -type d | grep -v "/\." | while read line ; do
+    echo "${line##*/}"
+  done
 }
 
 function time-machine-list-all-backups() {
-	group "osx-timemachine"
-	about "Shows all of the backups for the specified machine"
-	param "1: Machine name (optional)"
-	example "time-machine-list-all-backups my-laptop"
-
-	# Use the local hostname if none provided
-	local COMPUTERNAME BACKUP_LOCATION
-	COMPUTERNAME=${1:-$(scutil --get ComputerName)}
-	BACKUP_LOCATION="$(time-machine-destination)/Backups.backupdb/$COMPUTERNAME"
-
-	find "$BACKUP_LOCATION" -maxdepth 1 -mindepth 1 -type d | while read -r line; do
-		echo "$line"
-	done
+  group "osx-timemachine"
+  about "Shows all of the backups for the specified machine"
+  param "1: Machine name (optional)"
+  example "time-machine-list-all-backups my-laptop"
+
+  # Use the local hostname if none provided
+  local COMPUTERNAME=${1:-$(scutil --get ComputerName)}
+  local BACKUP_LOCATION="$(time-machine-destination)/Backups.backupdb/$COMPUTERNAME"
+
+  find "$BACKUP_LOCATION" -maxdepth 1 -mindepth 1 -type d | while read line ; do
+    echo "$line"
+  done
 }
 
 function time-machine-list-old-backups() {
-	group "osx-timemachine"
-	about "Shows all of the backups for the specified machine, except for the most recent backup"
-	param "1: Machine name (optional)"
-	example "time-machine-list-old-backups my-laptop"
-
-	# Use the local hostname if none provided
-	local COMPUTERNAME BACKUP_LOCATION
-	COMPUTERNAME=${1:-$(scutil --get ComputerName)}
-	BACKUP_LOCATION="$(time-machine-destination)/Backups.backupdb/$COMPUTERNAME"
-
-	# List all but the most recent one
-	find "$BACKUP_LOCATION" -maxdepth 1 -mindepth 1 -type d -name 2\* | sed \$d | while read -r line; do
-		echo "$line"
-	done
+  group "osx-timemachine"
+  about "Shows all of the backups for the specified machine, except for the most recent backup"
+  param "1: Machine name (optional)"
+  example "time-machine-list-old-backups my-laptop"
+
+  # Use the local hostname if none provided
+  local COMPUTERNAME=${1:-$(scutil --get ComputerName)}
+  local BACKUP_LOCATION="$(time-machine-destination)/Backups.backupdb/$COMPUTERNAME"
+
+  # List all but the most recent one
+  find "$BACKUP_LOCATION" -maxdepth 1 -mindepth 1 -type d -name 2\* | sed \$d | while read line ; do
+    echo "$line"
+  done
 }
 
 # Taken from here: http://stackoverflow.com/a/30547074/1228454
 function _tm_startsudo() {
-	local -x SUDO_COMMAND="plugin/osx-timemachine: keep 'sudo' token alive during long-run 'tmutil' commands"
-	sudo "-${SUDO_ASKPASS:+A}v" # validate without running a command, using `ssh-askpass` if available.
-	(while sudo "-${SUDO_ASKPASS:+A}v"; do
-		sleep 50
-	done) &
-	SUDO_PID="$!"
-	trap _tm_stopsudo SIGINT SIGTERM
+    sudo -v
+    ( while true; do sudo -v; sleep 50; done; ) &
+    SUDO_PID="$!"
+    trap _tm_stopsudo SIGINT SIGTERM
 }
 function _tm_stopsudo() {
-	kill "$SUDO_PID"
-	trap - SIGINT SIGTERM
-	sudo -k
+    kill "$SUDO_PID"
+    trap - SIGINT SIGTERM
+    sudo -k
 }
 
 function time-machine-delete-old-backups() {
-	group "osx-timemachine"
-	about "Deletes all of the backups for the specified machine, with the exception of the most recent one"
-	param "1: Machine name (optional)"
-	example "time-machine-delete-old-backups my-laptop"
+  group "osx-timemachine"
+  about "Deletes all of the backups for the specified machine, with the exception of the most recent one"
+  param "1: Machine name (optional)"
+  example "time-machine-delete-old-backups my-laptop"
 
-	# Use the local hostname if none provided
-	local COMPUTERNAME=${1:-$(scutil --get ComputerName)} _old_backup
+  # Use the local hostname if none provided
+  local COMPUTERNAME=${1:-$(scutil --get ComputerName)}
 
-	# Ask for sudo credentials only once
-	_tm_startsudo
+  # Ask for sudo credentials only once
+  _tm_startsudo
 
-	while read -r _old_backup; do
-		# Delete the backup
-		sudo tmutil delete "$_old_backup"
-	done <<< "$(time-machine-list-old-backups "$COMPUTERNAME")"
+  echo "$(time-machine-list-old-backups "$COMPUTERNAME")" | while read i ; do
+    # Delete the backup
+    sudo tmutil delete "$i"
+  done
 
-	_tm_stopsudo
+  _tm_stopsudo
 }
diff --git a/plugins/available/osx.plugin.bash b/plugins/available/osx.plugin.bash
index 139f58a1..ca1f66b8 100644
--- a/plugins/available/osx.plugin.bash
+++ b/plugins/available/osx.plugin.bash
@@ -1,21 +1,23 @@
-# shellcheck shell=bash
+cite about-plugin
 about-plugin 'osx-specific functions'
 
-if [[ "${OSTYPE}" != 'darwin'* ]]; then
-	_log_warning "This plugin only works with Mac OS X."
-	return 1
-fi
-
 # OS X: Open new tabs in same directory
-if _is_function update_terminal_cwd; then
-	safe_append_prompt_command 'update_terminal_cwd'
+if [[ $OSTYPE == 'darwin'* ]]; then
+  if type update_terminal_cwd > /dev/null 2>&1 ; then
+    if ! [[ $PROMPT_COMMAND =~ (^|;)update_terminal_cwd($|;) ]] ; then
+      PROMPT_COMMAND="${PROMPT_COMMAND%;};update_terminal_cwd"
+      declared="$(declare -p PROMPT_COMMAND)"
+      [[ "$declared" =~ \ -[aAilrtu]*x[aAilrtu]*\  ]] 2>/dev/null
+      [[ $? -eq 0 ]] && export PROMPT_COMMAND
+    fi
+  fi
 fi
 
 function tab() {
-	about 'opens a new terminal tab'
-	group 'osx'
+  about 'opens a new terminal tab'
+  group 'osx'
 
-	osascript 2> /dev/null << EOF
+  osascript 2>/dev/null <<EOF
     tell application "System Events"
       tell process "Terminal" to keystroke "t" using command down
     end
@@ -28,105 +30,147 @@ EOF
 
 # renames the current os x terminal tab title
 function tabname {
-	printf '%b' "\e]1;$1\a"
+  printf "\e]1;$1\a"
 }
 
 # renames the current os x terminal window title
 function winname {
-	printf '%b' "\e]2;$1\a"
+  printf "\e]2;$1\a"
+}
+
+# this one switches your os x dock between 2d and 3d
+# thanks to savier.zwetschge.org
+function dock-switch() {
+    about 'switch dock between 2d and 3d'
+    param '1: "2d" or "3d"'
+    example '$ dock-switch 2d'
+    group 'osx'
+
+    if [[ "$OSTYPE" = 'darwin'* ]]; then
+
+        if [[ $1 = 3d ]] ; then
+            defaults write com.apple.dock no-glass -boolean NO
+            killall Dock
+
+        elif [[ $1 = 2d ]] ; then
+            defaults write com.apple.dock no-glass -boolean YES
+            killall Dock
+
+        else
+            echo "usage:"
+            echo "dock-switch 2d"
+            echo "dock-switch 3d."
+        fi
+    else
+        echo "Sorry, this only works on Mac OS X"
+    fi
 }
 
-function pman() {
-	about 'view man documentation in Preview'
-	param '1: man page to view'
-	example '$ pman bash'
-	group 'osx'
-	man -t "${1}" | open -fa 'Preview'
+function pman ()
+{
+    about 'view man documentation in Preview'
+    param '1: man page to view'
+    example '$ pman bash'
+    group 'osx'
+    man -t "${1}" | open -fa $PREVIEW
 }
 
-function pri() {
-	about 'display information about Ruby classes, modules, or methods, in Preview'
-	param '1: Ruby method, module, or class'
-	example '$ pri Array'
-	group 'osx'
-	ri -T "${1}" | open -fa 'Preview'
+function pri ()
+{
+    about 'display information about Ruby classes, modules, or methods, in Preview'
+    param '1: Ruby method, module, or class'
+    example '$ pri Array'
+    group 'osx'
+    ri -T "${1}" | open -fa $PREVIEW
 }
 
 # Download a file and open it in Preview
 function prevcurl() {
-	about 'download a file and open it in Preview'
-	param '1: url'
-	group 'osx'
-
-	curl "$*" | open -fa 'Preview'
+  about 'download a file and open it in Preview'
+  param '1: url'
+  group 'osx'
+
+  if [[ ! $OSTYPE = 'darwin'* ]]
+  then
+    echo "This function only works with Mac OS X"
+    return 1
+  fi
+  curl "$*" | open -fa $PREVIEW
 }
 
 function refresh-launchpad() {
-	about 'Reset launchpad layout in macOS'
-	example '$ refresh-launchpad'
-	group 'osx'
-
-	defaults write com.apple.dock ResetLaunchPad -bool TRUE
-	killall Dock
+  about 'Reset launchpad layout in macOS'
+  example '$ refresh-launchpad'
+  group 'osx'
+
+  if [[ "$OSTYPE" = 'darwin'* ]];then
+    defaults write com.apple.dock ResetLaunchPad -bool TRUE
+    killall Dock
+  else
+    echo "Sorry, this only works on Mac OS X"
+  fi
 }
 
-function list-jvms() {
-	about 'List java virtual machines and their states in macOS'
-	example 'list-jvms'
-	group 'osx'
-
-	local JVMS_DIR="/Library/Java/JavaVirtualMachines"
-	# The following variables are intended to impact the enclosing scope, not local.
-	JVMS=("${JVMS_DIR}"/*)
-	JVMS_STATES=()
-
-	# Map state of JVM
-	for ((i = 0; i < ${#JVMS[@]}; i++)); do
-		if [[ -f "${JVMS[i]}/Contents/Info.plist" ]]; then
-			JVMS_STATES[i]=enabled
-		else
-			JVMS_STATES[i]=disabled
-		fi
-		printf '%s\t%s\t%s\n' "${i}" "${JVMS[i]##*/}" "${JVMS_STATES[i]}"
-	done
+function list-jvms(){
+  about 'List java virtual machines and their states in macOS'
+  example 'list-jvms'
+  group 'osx'
+
+  JVMS_DIR="/Library/Java/JavaVirtualMachines"
+  JVMS=( $(ls ${JVMS_DIR}) )
+  JVMS_STATES=()
+
+  # Map state of JVM
+  for (( i = 0; i < ${#JVMS[@]}; i++ )); do
+    if [[ -f "${JVMS_DIR}/${JVMS[$i]}/Contents/Info.plist" ]]; then
+      JVMS_STATES[${i}]=enabled
+    else
+      JVMS_STATES[${i}]=disabled
+    fi
+      echo "${i} ${JVMS[$i]} ${JVMS_STATES[$i]}"
+  done
 }
 
-function pick-default-jvm() {
-	about 'Pick the default Java Virtual Machines in system-wide scope in macOS'
-	example 'pick-default-jvm'
-
-	# Declare variables
-	local JVMS JVMS_STATES
-	local DEFAULT_JVM_DIR DEFAULT_JVM OPTION
-
-	# Call function for listing
-	list-jvms
-
-	# OPTION for default jdk and set variables
-	while [[ ! "$OPTION" =~ ^[0-9]+$ || OPTION -ge "${#JVMS[@]}" ]]; do
-		read -rp "Enter Default JVM: " OPTION
-		if [[ ! "$OPTION" =~ ^[0-9]+$ ]]; then
-			echo "Please enter a number"
-		fi
-
-		if [[ OPTION -ge "${#JVMS[@]}" ]]; then
-			echo "Please select one of the displayed JVMs"
-		fi
-	done
-
-	DEFAULT_JVM_DIR="${JVMS[OPTION]}"
-	DEFAULT_JVM="${JVMS[OPTION]##*/}"
-
-	# Disable all jdk
-	for ((i = 0; i < ${#JVMS[@]}; i++)); do
-		if [[ "${JVMS[i]}" != "${DEFAULT_JVM_DIR}" && -f "${JVMS[i]}/Contents/Info.plist" ]]; then
-			sudo mv "${JVMS[i]}/Contents/Info.plist" "${JVMS[i]}/Contents/Info.plist.disable"
-		fi
-	done
-
-	# Enable default jdk
-	if [[ -f "${DEFAULT_JVM_DIR}/Contents/Info.plist.disable" ]]; then
-		sudo mv -vn "${DEFAULT_JVM_DIR}/Contents/Info.plist.disable" "${DEFAULT_JVM_DIR}/Contents/Info.plist" \
-			&& echo "Enabled ${DEFAULT_JVM} as default JVM"
-	fi
+function pick-default-jvm(){
+  about 'Pick the default Java Virtual Machines in system-wide scope in macOS'
+  example 'pick-default-jvm'
+
+  # Call function for listing
+  list-jvms
+
+  # Declare variables
+  local DEFAULT_JVM_DIR=""
+  local DEFAULT_JVM=""
+  local OPTION=""
+
+  # OPTION for default jdk and set variables
+  while [[ ! "$OPTION" =~ ^[0-9]+$ || OPTION -ge "${#JVMS[@]}" ]]; do
+    read -p "Enter Default JVM: "  OPTION
+      if [[ ! "$OPTION" =~ ^[0-9]+$  ]]; then
+        echo "Please enter a number"
+      fi
+
+      if [[ OPTION -ge "${#JVMS[@]}" ]]; then
+        echo "Please select one of the displayed JVMs"
+      fi
+  done
+
+  DEFAULT_JVM_DIR="${JVMS_DIR}/${JVMS[$OPTION]}"
+  DEFAULT_JVM="${JVMS[$OPTION]}"
+
+  # Disable all jdk
+  for (( i = 0; i < ${#JVMS[@]}; i++ )); do
+    if [[ -f "${JVMS_DIR}/${JVMS[$i]}/Contents/Info.plist" ]]; then
+      sudo mv "${JVMS_DIR}/${JVMS[$i]}/Contents/Info.plist" "${JVMS_DIR}/${JVMS[$i]}/Contents/Info.plist.disable"
+    fi
+  done
+
+  # Enable default jdk
+  if [[ -f "${DEFAULT_JVM_DIR}/Contents/Info.plist.disable" ]]; then
+    sudo mv "${DEFAULT_JVM_DIR}/Contents/Info.plist.disable" "${DEFAULT_JVM_DIR}/Contents/Info.plist"
+    echo "Enabled ${DEFAULT_JVM} as default JVM"
+  fi
 }
+
+# Make this backwards compatible
+alias pcurl='prevcurl'
diff --git a/plugins/available/pandoc.plugin.bash b/plugins/available/pandoc.plugin.bash
new file mode 100644
index 00000000..d28376c3
--- /dev/null
+++ b/plugins/available/pandoc.plugin.bash
@@ -0,0 +1,11 @@
+# plugin for npandoc
+
+cite about-plugin
+about-plugin 'pandoc plugin for node'
+
+if [[ `which pandoc` ]] ; then
+
+  # init pandoc
+  eval "$(pandoc --bash-completion)"
+
+fi
diff --git a/plugins/available/perl5.plugin.bash b/plugins/available/perl5.plugin.bash
new file mode 100644
index 00000000..6f7d7cb2
--- /dev/null
+++ b/plugins/available/perl5.plugin.bash
@@ -0,0 +1,16 @@
+# Load perl5, if you are using it
+
+cite about-plugin
+about-plugin 'load perl5, if you are using it'
+
+pathmunge "$HOME"/perl5/bin
+PERL5LIB="/home/ivan/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
+PERL_LOCAL_LIB_ROOT="/home/ivan/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
+PERL_MB_OPT="--install_base \"/home/ivan/perl5\""; export PERL_MB_OPT;
+PERL_MM_OPT="INSTALL_BASE=/home/ivan/perl5"; export PERL_MM_OPT;
+
+# PATH="/home/ivan/perl5/bin${PATH:+:${PATH}}"; export PATH;
+# PERL5LIB="/home/ivan/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
+# PERL_LOCAL_LIB_ROOT="/home/ivan/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
+# PERL_MB_OPT="--install_base \"/home/ivan/perl5\""; export PERL_MB_OPT;
+# PERL_MM_OPT="INSTALL_BASE=/home/ivan/perl5"; export PERL_MM_OPT;
diff --git a/plugins/available/plenv.plugin.bash b/plugins/available/plenv.plugin.bash
index 79a9cf49..1da2d61b 100644
--- a/plugins/available/plenv.plugin.bash
+++ b/plugins/available/plenv.plugin.bash
@@ -1,16 +1,18 @@
-# shellcheck shell=bash
-#
 # plugin for plenv
 
 cite about-plugin
 about-plugin 'plenv plugin for Perl'
 
-if [[ -d "${HOME}/.plenv/bin" ]]; then
-	# load plenv bin dir into path if it exists
-	pathmunge "${HOME}/.plenv/bin"
+if [[ -e "${HOME}/.plenv/bin" ]] ; then
+
+  # load plenv bin dir into path if it exists
+  pathmunge "${HOME}/.plenv/bin"
+
 fi
 
-if _command_exists plenv; then
-	# init plenv
-	eval "$(plenv init - bash)"
+if [[ `which plenv` ]] ; then
+
+  # init plenv
+  eval "$(plenv init - bash)"
+
 fi
diff --git a/plugins/available/projects.plugin.bash b/plugins/available/projects.plugin.bash
index 34fa001e..775ec813 100644
--- a/plugins/available/projects.plugin.bash
+++ b/plugins/available/projects.plugin.bash
@@ -1,57 +1,75 @@
-# shellcheck shell=bash
-about-plugin 'quickly navigate configured project paths'
-
-: "${BASH_IT_PROJECT_PATHS:=$HOME/Projects:$HOME/src:$HOME/work}"
-
-function pj() {
-	about 'navigate quickly to your various project directories'
-	group 'projects'
-
-	local proj="${1?${FUNCNAME[0]}: project name required}"
-	local cmd PS3 dest d
-	local -a dests
-
-	if [[ "$proj" == "open" ]]; then
-		shift
-		proj="${1}"
-		cmd="${EDITOR?}"
-	fi
-
-	# collect possible destinations to account for directories
-	# with the same name in project directories
-	IFS=':' read -ra dests <<< "${BASH_IT_PROJECT_PATHS?${FUNCNAME[0]}: project working folders must be configured}"
-	for d in "${!dests[@]}"; do
-		if [[ ! -d "${dests[d]}/${proj}" ]]; then
-			unset 'dests[d]'
-		fi
-	done
-
-	case ${#dests[@]} in
-		0)
-			_log_error "BASH_IT_PROJECT_PATHS must contain at least one existing location"
-			return 1
-			;;
-		1)
-			dest="${dests[*]}/${proj}"
-			;;
-		*)
-			PS3="Multiple project directories found. Please select one: "
-			dests+=("cancel")
-			select d in "${dests[@]}"; do
-				case $d in
-					"cancel")
-						return
-						;;
-					*)
-						dest="${d}/${proj}"
-						break
-						;;
-				esac
-			done
-			;;
-	esac
-
-	"${cmd:-cd}" "${dest}"
+cite about-plugin
+about-plugin 'quickly navigate configured paths with `pj` and `pjo`. example: "export PROJECT_PATHS=~/projects:~/work/projects"'
+
+function pj {
+about 'navigate quickly to your various project directories'
+group 'projects'
+
+
+if [ -z "$PROJECT_PATHS" ]; then
+  echo "error: PROJECT_PATHS not set"
+  return 1
+fi
+
+
+local cmd
+local dest
+local -a dests
+
+
+if [ "$1" == "open" ]; then
+  shift
+  cmd="$EDITOR"
+fi
+cmd="${cmd:-cd}"
+
+
+if [ -z "$1" ]; then
+  echo "error: no project provided"
+  return 1
+fi
+
+
+# collect possible destinations to account for directories
+# with the same name in project directories
+for i in ${PROJECT_PATHS//:/$'\n'}; do
+  if [ -d "$i"/"$1" ]; then
+    dests+=("$i/$1")
+  fi
+done
+
+
+# when multiple destinations are found, present a menu
+if [ ${#dests[@]} -eq 0 ]; then
+  echo "error: no such project '$1'"
+  return 1
+
+elif [ ${#dests[@]} -eq 1 ]; then
+  dest="${dests[0]}"
+
+elif [ ${#dests[@]} -gt 1 ]; then
+  PS3="Multiple project directories found. Please select one: "
+  dests+=("cancel")
+  select d in "${dests[@]}"; do
+    case $d in
+      "cancel")
+        return
+        ;;
+      *)
+        dest=$d
+        break
+        ;;
+    esac
+  done
+
+else
+  echo "error: please report this error"
+  return 1 # should never reach this
+
+fi
+
+
+$cmd "$dest"
 }
 
 alias pjo="pj open"
diff --git a/plugins/available/proxy.plugin.bash b/plugins/available/proxy.plugin.bash
index 985d77b4..f2458e3f 100644
--- a/plugins/available/proxy.plugin.bash
+++ b/plugins/available/proxy.plugin.bash
@@ -1,7 +1,8 @@
-# shellcheck shell=bash
+cite about-plugin
 about-plugin 'Proxy Tools'
 
-function disable-proxy() {
+disable-proxy ()
+{
 	about 'Disables proxy settings for Bash, npm and SSH'
 	group 'proxy'
 
@@ -19,17 +20,18 @@ function disable-proxy() {
 	svn-disable-proxy
 }
 
-function enable-proxy() {
+enable-proxy ()
+{
 	about 'Enables proxy settings for Bash, npm and SSH'
 	group 'proxy'
 
-	export http_proxy="${BASH_IT_HTTP_PROXY:-}"
-	export https_proxy="${BASH_IT_HTTPS_PROXY:-}"
-	export HTTP_PROXY="${http_proxy:-}"
-	export HTTPS_PROXY="${https_proxy:-}"
-	export ALL_PROXY="${http_proxy:-}"
-	export no_proxy="${BASH_IT_NO_PROXY:-}"
-	export NO_PROXY="${no_proxy:-}"
+	export http_proxy=$BASH_IT_HTTP_PROXY
+	export https_proxy=$BASH_IT_HTTPS_PROXY
+	export HTTP_PROXY=$http_proxy
+	export HTTPS_PROXY=$https_proxy
+	export ALL_PROXY=$http_proxy
+	export no_proxy=$BASH_IT_NO_PROXY
+	export NO_PROXY=$no_proxy
 	echo "Enabled proxy environment variables"
 
 	npm-enable-proxy
@@ -37,25 +39,27 @@ function enable-proxy() {
 	svn-enable-proxy
 }
 
-function enable-proxy-alt() {
+enable-proxy-alt ()
+{
 	about 'Enables alternate proxy settings for Bash, npm and SSH'
 	group 'proxy'
 
-	export http_proxy="${BASH_IT_HTTP_PROXY_ALT:-}"
-	export https_proxy="${BASH_IT_HTTPS_PROXY_ALT:-}"
-	export HTTP_PROXY="${http_proxy:-}"
-	export HTTPS_PROXY="${https_proxy:-}"
-	export ALL_PROXY="${http_proxy:-}"
-	export no_proxy="${BASH_IT_NO_PROXY:-}"
-	export NO_PROXY="${no_proxy:-}"
+	export http_proxy=$BASH_IT_HTTP_PROXY_ALT
+	export https_proxy=$BASH_IT_HTTPS_PROXY_ALT
+	export HTTP_PROXY=$http_proxy
+	export HTTPS_PROXY=$https_proxy
+	export ALL_PROXY=$http_proxy
+	export no_proxy=$BASH_IT_NO_PROXY
+	export NO_PROXY=$no_proxy
 	echo "Enabled alternate proxy environment variables"
 
-	npm-enable-proxy "${http_proxy:-}" "${https_proxy:-}"
+	npm-enable-proxy $http_proxy $https_proxy
 	ssh-enable-proxy
-	svn-enable-proxy "${http_proxy:-}"
+	svn-enable-proxy $http_proxy
 }
 
-function show-proxy() {
+show-proxy ()
+{
 	about 'Shows the proxy settings for Bash, Git, npm and SSH'
 	group 'proxy'
 
@@ -71,7 +75,8 @@ function show-proxy() {
 	ssh-show-proxy
 }
 
-function proxy-help() {
+proxy-help ()
+{
 	about 'Provides an overview of the bash-it proxy configuration'
 	group 'proxy'
 
@@ -92,7 +97,8 @@ EOF
 	bash-it-show-proxy
 }
 
-function bash-it-show-proxy() {
+bash-it-show-proxy ()
+{
 	about 'Shows the bash-it proxy settings'
 	group 'proxy'
 
@@ -104,25 +110,27 @@ function bash-it-show-proxy() {
 	env | grep -e "BASH_IT.*PROXY"
 }
 
-function npm-show-proxy() {
+npm-show-proxy ()
+{
 	about 'Shows the npm proxy settings'
 	group 'proxy'
 
-	if _command_exists npm; then
+	if $(command -v npm &> /dev/null) ; then
 		echo ""
 		echo "npm"
 		echo "==="
-		echo "npm HTTP  proxy: $(npm config get proxy)"
-		echo "npm HTTPS proxy: $(npm config get https-proxy)"
-		echo "npm proxy exceptions: $(npm config get noproxy)"
+		echo "npm HTTP  proxy: " `npm config get proxy`
+		echo "npm HTTPS proxy: " `npm config get https-proxy`
+		echo "npm proxy exceptions: " `npm config get noproxy`
 	fi
 }
 
-function npm-disable-proxy() {
+npm-disable-proxy ()
+{
 	about 'Disables npm proxy settings'
 	group 'proxy'
 
-	if _command_exists npm; then
+	if $(command -v npm &> /dev/null) ; then
 		npm config delete proxy
 		npm config delete https-proxy
 		npm config delete noproxy
@@ -130,104 +138,113 @@ function npm-disable-proxy() {
 	fi
 }
 
-function npm-enable-proxy() {
+npm-enable-proxy ()
+{
 	about 'Enables npm proxy settings'
 	group 'proxy'
 
-	local my_http_proxy="${1:-${BASH_IT_HTTP_PROXY:-}}"
-	local my_https_proxy="${2:-${BASH_IT_HTTPS_PROXY:-}}"
-	local my_no_proxy="${3:-${BASH_IT_NO_PROXY:-}}"
+	local my_http_proxy=${1:-$BASH_IT_HTTP_PROXY}
+	local my_https_proxy=${2:-$BASH_IT_HTTPS_PROXY}
+	local my_no_proxy=${3:-$BASH_IT_NO_PROXY}
 
-	if _command_exists npm; then
-		npm config set proxy "${my_http_proxy:?}" || return
-		npm config set https-proxy "${my_https_proxy:?}" || return
-		npm config set noproxy "${my_no_proxy:-}" || return
+	if $(command -v npm &> /dev/null) ; then
+		npm config set proxy $my_http_proxy
+		npm config set https-proxy $my_https_proxy
+		npm config set noproxy $my_no_proxy
 		echo "Enabled npm proxy settings"
 	fi
 }
 
-function git-global-show-proxy() {
+git-global-show-proxy ()
+{
 	about 'Shows global Git proxy settings'
 	group 'proxy'
 
-	if _command_exists git; then
+	if $(command -v git &> /dev/null) ; then
 		echo ""
 		echo "Git (Global Settings)"
 		echo "====================="
-		echo "Git (Global) HTTP  proxy: $(git config --global --get http.proxy)"
-		echo "Git (Global) HTTPS proxy: $(git config --global --get https.proxy)"
+		echo "Git (Global) HTTP  proxy: " `git config --global --get http.proxy`
+		echo "Git (Global) HTTPS proxy: " `git config --global --get https.proxy`
 	fi
 }
 
-function git-global-disable-proxy() {
+git-global-disable-proxy ()
+{
 	about 'Disables global Git proxy settings'
 	group 'proxy'
 
-	if _command_exists git; then
+	if $(command -v git &> /dev/null) ; then
 		git config --global --unset-all http.proxy
 		git config --global --unset-all https.proxy
 		echo "Disabled global Git proxy settings"
 	fi
 }
 
-function git-global-enable-proxy() {
+git-global-enable-proxy ()
+{
 	about 'Enables global Git proxy settings'
 	group 'proxy'
 
-	if _command_exists git; then
+	if $(command -v git &> /dev/null) ; then
 		git-global-disable-proxy
 
-		git config --global --add http.proxy "${BASH_IT_HTTP_PROXY:?}"
-		git config --global --add https.proxy "${BASH_IT_HTTPS_PROXY:?}"
+		git config --global --add http.proxy $BASH_IT_HTTP_PROXY
+		git config --global --add https.proxy $BASH_IT_HTTPS_PROXY
 		echo "Enabled global Git proxy settings"
 	fi
 }
 
-function git-show-proxy() {
+git-show-proxy ()
+{
 	about 'Shows current Git project proxy settings'
 	group 'proxy'
 
-	if _command_exists git; then
+	if $(command -v git &> /dev/null) ; then
 		echo "Git Project Proxy Settings"
 		echo "====================="
-		echo "Git HTTP  proxy: $(git config --get http.proxy)"
-		echo "Git HTTPS proxy: $(git config --get https.proxy)"
+		echo "Git HTTP  proxy: " `git config --get http.proxy`
+		echo "Git HTTPS proxy: " `git config --get https.proxy`
 	fi
 }
 
-function git-disable-proxy() {
+git-disable-proxy ()
+{
 	about 'Disables current Git project proxy settings'
 	group 'proxy'
 
-	if _command_exists git; then
+	if $(command -v git &> /dev/null) ; then
 		git config --unset-all http.proxy
 		git config --unset-all https.proxy
 		echo "Disabled Git project proxy settings"
 	fi
 }
 
-function git-enable-proxy() {
+git-enable-proxy ()
+{
 	about 'Enables current Git project proxy settings'
 	group 'proxy'
 
-	if _command_exists git; then
+	if $(command -v git &> /dev/null) ; then
 		git-disable-proxy
 
-		git config --add http.proxy "${BASH_IT_HTTP_PROXY:?}"
-		git config --add https.proxy "${BASH_IT_HTTPS_PROXY:?}"
+		git config --add http.proxy $BASH_IT_HTTP_PROXY
+		git config --add https.proxy $BASH_IT_HTTPS_PROXY
 		echo "Enabled Git project proxy settings"
 	fi
 }
 
-function svn-show-proxy() {
+
+svn-show-proxy ()
+{
 	about 'Shows SVN proxy settings'
 	group 'proxy'
 
-	if _command_exists svn && _command_exists python2; then
+	if $(command -v svn &> /dev/null) && $(command -v python2 &> /dev/null) ; then
 		echo ""
 		echo "SVN Proxy Settings"
 		echo "=================="
-		python2 - << END
+		python2 - <<END
 import ConfigParser, os
 config = ConfigParser.ConfigParser()
 config.read(os.path.expanduser('~/.subversion/servers'))
@@ -248,12 +265,13 @@ END
 	fi
 }
 
-function svn-disable-proxy() {
+svn-disable-proxy ()
+{
 	about 'Disables SVN proxy settings'
 	group 'proxy'
 
-	if _command_exists svn_command_exists python2; then
-		python2 - << END
+	if $(command -v svn &> /dev/null) && $(command -v python2 &> /dev/null) ; then
+		python2 - <<END
 import ConfigParser, os
 config = ConfigParser.ConfigParser()
 config.read(os.path.expanduser('~/.subversion/servers'))
@@ -276,14 +294,15 @@ END
 	fi
 }
 
-function svn-enable-proxy() {
+svn-enable-proxy ()
+{
 	about 'Enables SVN proxy settings'
 	group 'proxy'
 
-	if _command_exists svn _command_exists python2; then
-		local my_http_proxy="${1:-${BASH_IT_HTTP_PROXY:-}}"
+	if $(command -v svn &> /dev/null) && $(command -v python2 &> /dev/null) ; then
+		local my_http_proxy=${1:-$BASH_IT_HTTP_PROXY}
 
-		python2 - "${my_http_proxy:?}" "${BASH_IT_NO_PROXY:-}" << END
+		python2 - "$my_http_proxy" "$BASH_IT_NO_PROXY" <<END
 import ConfigParser, os, sys, urlparse
 pieces = urlparse.urlparse(sys.argv[1])
 host = pieces.hostname
@@ -312,11 +331,12 @@ END
 	fi
 }
 
-function ssh-show-proxy() {
+ssh-show-proxy ()
+{
 	about 'Shows SSH config proxy settings (from ~/.ssh/config)'
 	group 'proxy'
 
-	if [ -f ~/.ssh/config ]; then
+	if [ -f ~/.ssh/config ] ; then
 		echo ""
 		echo "SSH Config Enabled in ~/.ssh/config"
 		echo "==================================="
@@ -348,22 +368,25 @@ function ssh-show-proxy() {
 	fi
 }
 
-function ssh-disable-proxy() {
+ssh-disable-proxy ()
+{
 	about 'Disables SSH config proxy settings'
 	group 'proxy'
 
-	if [ -f ~/.ssh/config ]; then
-		sed -e's/^.*ProxyCommand/#	ProxyCommand/' "${BASH_IT_SED_I_PARAMETERS[@]}" ~/.ssh/config
+	if [ -f ~/.ssh/config ] ; then
+		sed -e's/^.*ProxyCommand/#	ProxyCommand/' "${BASH_IT_SED_I_PARAMETERS[@]}"  ~/.ssh/config
 		echo "Disabled SSH config proxy settings"
 	fi
 }
 
-function ssh-enable-proxy() {
+
+ssh-enable-proxy ()
+{
 	about 'Enables SSH config proxy settings'
 	group 'proxy'
 
-	if [ -f ~/.ssh/config ]; then
-		sed -e's/#	ProxyCommand/	ProxyCommand/' "${BASH_IT_SED_I_PARAMETERS[@]}" ~/.ssh/config
+	if [ -f ~/.ssh/config ] ; then
+		sed -e's/#	ProxyCommand/	ProxyCommand/' "${BASH_IT_SED_I_PARAMETERS[@]}"  ~/.ssh/config
 		echo "Enabled SSH config proxy settings"
 	fi
 }
diff --git a/plugins/available/pyenv.plugin.bash b/plugins/available/pyenv.plugin.bash
index 05d28478..9457f835 100644
--- a/plugins/available/pyenv.plugin.bash
+++ b/plugins/available/pyenv.plugin.bash
@@ -1,34 +1,13 @@
-# shellcheck shell=bash
 cite about-plugin
 about-plugin 'load pyenv, if you are using it'
 
-# https://github.com/pyenv/pyenv
+export PYENV_ROOT="$HOME/.pyenv"
+pathmunge "$PYENV_ROOT/bin"
 
-# Load after basher
-# BASH_IT_LOAD_PRIORITY: 260
+[[ `which pyenv 2>/dev/null` ]] && eval "$(pyenv init --path)"
+[[ `which pyenv 2>/dev/null` ]] && eval "$(pyenv init -)"
 
-# Don't modify the environment if we can't find the tool:
-# - Check if in $PATH already
-# - Check if installed manually to $PYENV_ROOT
-# - Check if installed manually to $HOME
-_command_exists pyenv \
-	|| [[ -n "$PYENV_ROOT" && -x "$PYENV_ROOT/bin/pyenv" ]] \
-	|| [[ -x "$HOME/.pyenv/bin/pyenv" ]] \
-	|| return 0
-
-# Set PYENV_ROOT, if not already set
-export PYENV_ROOT="${PYENV_ROOT:-$HOME/.pyenv}"
-
-# Add PYENV_ROOT/bin to PATH, if that's where it's installed
-if ! _command_exists pyenv && [[ -x "$PYENV_ROOT/bin/pyenv" ]]; then
-	pathmunge "$PYENV_ROOT/bin"
-fi
-
-# Initialize pyenv
-pathmunge "$PYENV_ROOT/shims"
-eval "$(pyenv init - bash)"
-
-# Load pyenv virtualenv if the virtualenv plugin is installed.
+#Load pyenv virtualenv if the virtualenv plugin is installed.
 if pyenv virtualenv-init - &> /dev/null; then
-	eval "$(pyenv virtualenv-init - bash)"
+  eval "$(pyenv virtualenv-init - bash)"
 fi
diff --git a/plugins/available/python.plugin.bash b/plugins/available/python.plugin.bash
index bd644e8b..77fa7dd6 100644
--- a/plugins/available/python.plugin.bash
+++ b/plugins/available/python.plugin.bash
@@ -1,32 +1,31 @@
-# shellcheck shell=bash
+cite about-plugin
 about-plugin 'alias "shttp" to SimpleHTTPServer'
 
-if _command_exists python3; then
-	alias shttp='python3 -m http.server'
-elif _command_exists python; then
-	alias shttp='python -m http.server'
+if [[ "$OSTYPE" == 'linux'* ]]
+then
+  alias shttp='python2 -m SimpleHTTPServer'
 else
-	_log_warning "Unable to load 'plugin/python' due to being unable to find a working 'python'"
-	return 1
+  alias shttp='python -m SimpleHTTPServer'
 fi
 
 function pyedit() {
-	about 'opens python module in your EDITOR'
-	param '1: python module to open'
-	example '$ pyedit requests'
-	group 'python'
+    about 'opens python module in your EDITOR'
+    param '1: python module to open'
+    example '$ pyedit requests'
+    group 'python'
 
-	xpyc="$(python -c "import os, sys; f = open(os.devnull, 'w'); sys.stderr = f; module = __import__('$1'); sys.stdout.write(module.__file__)")"
+    xpyc=`python -c "import os, sys; f = open(os.devnull, 'w'); sys.stderr = f; module = __import__('$1'); sys.stdout.write(module.__file__)"`
 
-	if [[ "$xpyc" == "" ]]; then
-		echo "Python module $1 not found"
-		return 1
-	elif [[ "$xpyc" == *__init__.py* ]]; then
-		xpydir="${xpyc%/*}"
-		echo "$EDITOR $xpydir"
-		${VISUAL:-${EDITOR:-${ALTERNATE_EDITOR:-nano}}} "$xpydir"
-	else
-		echo "$EDITOR ${xpyc%.*}.py"
-		${VISUAL:-${EDITOR:-${ALTERNATE_EDITOR:-nano}}} "${xpyc%.*}.py"
-	fi
+    if [[ "$xpyc" == "" ]]; then
+        echo "Python module $1 not found"
+        return -1
+
+    elif [[ $xpyc == *__init__.py* ]]; then
+        xpydir=`dirname $xpyc`;
+        echo "$EDITOR $xpydir";
+        $EDITOR "$xpydir";
+    else
+        echo "$EDITOR ${xpyc%.*}.py";
+        $EDITOR "${xpyc%.*}.py";
+    fi
 }
diff --git a/plugins/available/rakudobrew.plugin.bash b/plugins/available/rakudobrew.plugin.bash
new file mode 100644
index 00000000..98ff09da
--- /dev/null
+++ b/plugins/available/rakudobrew.plugin.bash
@@ -0,0 +1,9 @@
+# Load rakudobrew, if you are using it
+
+cite about-plugin
+about-plugin 'load rakudobrew, if you are using it'
+
+pathmunge "$HOME"/.rakudobrew/bin
+[ -x `which rakudobrew` ] && eval "$(rakudobrew init Bash)"
+
+#[ -d "$HOME"/.rakudobrew/plugins/ruby-build ] && pathmunge "$HOME"/.rakudobrew/plugins/ruby-build/bin
diff --git a/plugins/available/roo.plugin.bash b/plugins/available/roo.plugin.bash
new file mode 100644
index 00000000..00ea6638
--- /dev/null
+++ b/plugins/available/roo.plugin.bash
@@ -0,0 +1,9 @@
+cite about-plugin
+about-plugin 'load roo, if you are using it'
+
+# roo
+if [ -d "/opt/spring-roo" ]; then
+  export ROO_HOME="/opt/spring-roo"
+  export PATH="$PATH:$ROO_HOME/bin"
+fi
+
diff --git a/plugins/available/rustup.plugin.bash b/plugins/available/rustup.plugin.bash
new file mode 100644
index 00000000..0a32671d
--- /dev/null
+++ b/plugins/available/rustup.plugin.bash
@@ -0,0 +1,18 @@
+# plugin for rustup
+
+cite about-plugin
+about-plugin 'rustup plugin for rust'
+
+if [[ -e "${HOME}/.cargo/bin" ]] ; then
+
+  # load rustup bin dir into path if it exists
+  pathmunge "${HOME}/.cargo/bin"
+
+fi
+
+if [[ `which rustup` ]] ; then
+
+  # init rustup
+  eval "$(rustup completions bash)"
+
+fi
diff --git a/plugins/available/todo.plugin.bash b/plugins/available/todo.plugin.bash
index 6b495274..cf1479e2 100644
--- a/plugins/available/todo.plugin.bash
+++ b/plugins/available/todo.plugin.bash
@@ -1,6 +1,12 @@
-# shellcheck shell=bash
+#!/bin/bash
+cite about-plugin
 about-plugin 'Todo.txt integration'
 
 # you may override any of the exported variables below in your .bash_profile
-: "${TODOTXT_DEFAULT_ACTION:=ls}"
-export TODOTXT_DEFAULT_ACTION
+
+if [ -z "$TODOTXT_DEFAULT_ACTION" ]; then
+  # typing 't' by itself will list current todos
+  export TODOTXT_DEFAULT_ACTION=ls
+fi
+
+alias t='todo.sh'
diff --git a/plugins/available/xterm.plugin.bash b/plugins/available/xterm.plugin.bash
index 740460e4..b8747a25 100644
--- a/plugins/available/xterm.plugin.bash
+++ b/plugins/available/xterm.plugin.bash
@@ -30,11 +30,7 @@ precmd_xterm_title() {
 }
 
 preexec_xterm_title() {
-	local command_line="${BASH_COMMAND:-${1:-}}"
-	local directory_name short_command
-	directory_name="$(_short-dirname)"
-	short_command="$(_short-command "${command_line}")"
-	set_xterm_title "${short_command} {${directory_name}} (${SHORT_USER:-${USER}}@${SHORT_HOSTNAME:-${HOSTNAME}})"
+	set_xterm_title "$(_short-command "${1:-}") {$(_short-dirname)} (${SHORT_USER:-${USER}}@${SHORT_HOSTNAME:-${HOSTNAME}})"
 }
 
 case "${TERM:-dumb}" in
diff --git a/themes/.nvimlog b/themes/.nvimlog
new file mode 100644
index 00000000..e69de29b
diff --git a/themes/90210/90210.theme.bash b/themes/90210/90210.theme.bash
index 6b94427a..3db3f17b 100644
--- a/themes/90210/90210.theme.bash
+++ b/themes/90210/90210.theme.bash
@@ -1,21 +1,20 @@
 # shellcheck shell=bash
 # shellcheck disable=SC2034 # Expected behavior for themes.
+# shellcheck disable=SC2154 #TODO: fix these all.
 
-SCM_THEME_PROMPT_DIRTY=" ${red?}✗"
-SCM_THEME_PROMPT_CLEAN=" ${bold_green?}✓"
+SCM_THEME_PROMPT_DIRTY=" ${red}✗"
+SCM_THEME_PROMPT_CLEAN=" ${bold_green}✓"
 SCM_THEME_PROMPT_PREFIX=" |"
-SCM_THEME_PROMPT_SUFFIX="${green?}|"
+SCM_THEME_PROMPT_SUFFIX="${green}|"
 
-GIT_THEME_PROMPT_DIRTY=" ${red?}✗"
-GIT_THEME_PROMPT_CLEAN=" ${bold_green?}✓"
-GIT_THEME_PROMPT_PREFIX=" ${green?}|"
-GIT_THEME_PROMPT_SUFFIX="${green?}|"
+GIT_THEME_PROMPT_DIRTY=" ${red}✗"
+GIT_THEME_PROMPT_CLEAN=" ${bold_green}✓"
+GIT_THEME_PROMPT_PREFIX=" ${green}|"
+GIT_THEME_PROMPT_SUFFIX="${green}|"
 
 # Nicely formatted terminal prompt
 function prompt_command() {
-	local scm_prompt_info
-	scm_prompt_info="$(scm_prompt_info)"
-	PS1="\n${bold_black?}[${blue?}\@${bold_black?}]-${bold_black?}[${green?}\u${yellow?}@${green?}\h${bold_black?}]-${bold_black?}[${purple?}\w${bold_black?}]-${scm_prompt_info?}\n${reset_color?}\$ "
+	PS1="\n${bold_black}[${blue}\@${bold_black}]-${bold_black}[${green}\u${yellow}@${green}\h${bold_black}]-${bold_black}[${purple}\w${bold_black}]-$(scm_prompt_info)\n${reset_color}\$ "
 }
 
 safe_append_prompt_command prompt_command
diff --git a/themes/atomic/atomic.theme.bash b/themes/atomic/atomic.theme.bash
index c59dbdc9..03dc9e95 100644
--- a/themes/atomic/atomic.theme.bash
+++ b/themes/atomic/atomic.theme.bash
@@ -1,5 +1,6 @@
 # shellcheck shell=bash
 # shellcheck disable=SC2034 # Expected behavior for themes.
+# shellcheck disable=SC2154 #TODO: fix these all.
 
 # Atomic Bash Prompt for Bash-it
 # By lfelipe base on the theme brainy of MunifTanjim
@@ -28,48 +29,48 @@ Face="\342\230\273"
 ## Parsers ##
 #############
 
-function ____atomic_top_left_parse() {
-	local ifs_old="${IFS}"
-	local IFS="|"
+____atomic_top_left_parse() {
+	ifs_old="${IFS}"
+	IFS="|"
 	read -r -a args <<< "$@"
 	IFS="${ifs_old}"
-	if [[ -n "${args[3]:-}" ]]; then
-		_TOP_LEFT+="${args[2]?}${args[3]?}"
+	if [ -n "${args[3]}" ]; then
+		_TOP_LEFT+="${args[2]}${args[3]}"
 	fi
-	_TOP_LEFT+="${args[0]?}${args[1]:-}"
-	if [[ -n "${args[4]:-}" ]]; then
-		_TOP_LEFT+="${args[2]?}${args[4]?}"
+	_TOP_LEFT+="${args[0]}${args[1]}"
+	if [ -n "${args[4]}" ]; then
+		_TOP_LEFT+="${args[2]}${args[4]}"
 	fi
 	_TOP_LEFT+=""
 }
 
-function ____atomic_top_right_parse() {
-	local ifs_old="${IFS}"
-	local IFS="|"
+____atomic_top_right_parse() {
+	ifs_old="${IFS}"
+	IFS="|"
 	read -r -a args <<< "$@"
 	IFS="${ifs_old}"
 	_TOP_RIGHT+=" "
-	if [[ -n "${args[3]:-}" ]]; then
-		_TOP_RIGHT+="${args[2]?}${args[3]?}"
+	if [ -n "${args[3]}" ]; then
+		_TOP_RIGHT+="${args[2]}${args[3]}"
 	fi
-	_TOP_RIGHT+="${args[0]?}${args[1]:-}"
-	if [[ -n "${args[4]:-}" ]]; then
-		_TOP_RIGHT+="${args[2]?}${args[4]?}"
+	_TOP_RIGHT+="${args[0]}${args[1]}"
+	if [ -n "${args[4]}" ]; then
+		_TOP_RIGHT+="${args[2]}${args[4]}"
 	fi
 	__TOP_RIGHT_LEN=$((__TOP_RIGHT_LEN + ${#args[1]} + ${#args[3]} + ${#args[4]} + 1))
 	((__SEG_AT_RIGHT += 1))
 }
 
-function ____atomic_bottom_parse() {
-	local ifs_old="${IFS}"
-	local IFS="|"
+____atomic_bottom_parse() {
+	ifs_old="${IFS}"
+	IFS="|"
 	read -r -a args <<< "$@"
 	IFS="${ifs_old}"
-	_BOTTOM+="${args[0]?}${args[1]?${FUNCNAME[0]}}"
-	[[ ${#args[1]} -gt 0 ]] && _BOTTOM+=" "
+	_BOTTOM+="${args[0]}${args[1]}"
+	[ ${#args[1]} -gt 0 ] && _BOTTOM+=" "
 }
 
-function ____atomic_top() {
+____atomic_top() {
 	_TOP_LEFT=""
 	_TOP_RIGHT=""
 	__TOP_RIGHT_LEN=0
@@ -77,7 +78,7 @@ function ____atomic_top() {
 
 	for seg in ${___ATOMIC_TOP_LEFT}; do
 		info="$(___atomic_prompt_"${seg}")"
-		[[ -n "${info}" ]] && ____atomic_top_left_parse "${info}"
+		[ -n "${info}" ] && ____atomic_top_left_parse "${info}"
 	done
 
 	___cursor_right="\e[500C"
@@ -85,21 +86,21 @@ function ____atomic_top() {
 
 	for seg in ${___ATOMIC_TOP_RIGHT}; do
 		info="$(___atomic_prompt_"${seg}")"
-		[[ -n "${info}" ]] && ____atomic_top_right_parse "${info}"
+		[ -n "${info}" ] && ____atomic_top_right_parse "${info}"
 	done
 
-	[[ $__TOP_RIGHT_LEN -gt 0 ]] && __TOP_RIGHT_LEN=$((__TOP_RIGHT_LEN - 0))
+	[ $__TOP_RIGHT_LEN -gt 0 ] && __TOP_RIGHT_LEN=$((__TOP_RIGHT_LEN - 0))
 	___cursor_adjust="\e[${__TOP_RIGHT_LEN}D"
 	_TOP_LEFT+="${___cursor_adjust}"
 
 	printf "%s%s" "${_TOP_LEFT}" "${_TOP_RIGHT}"
 }
 
-function ____atomic_bottom() {
+____atomic_bottom() {
 	_BOTTOM=""
 	for seg in $___ATOMIC_BOTTOM; do
 		info="$(___atomic_prompt_"${seg}")"
-		[[ -n "${info}" ]] && ____atomic_bottom_parse "${info}"
+		[ -n "${info}" ] && ____atomic_bottom_parse "${info}"
 	done
 	printf "\n%s" "${_BOTTOM}"
 }
@@ -108,96 +109,95 @@ function ____atomic_bottom() {
 ## Segments ##
 ##############
 
-function ___atomic_prompt_user_info() {
-	local color="${white?}" box
-	local info="${IYellow}\u${IRed}@${IGreen}\h"
-	box="${normal?}${LineA?}\$([[ \$? != 0 ]] && echo \"${BIWhite?}[${IRed?}${SX?}${BIWhite?}]${normal?}${Line?}\")${Line?}${BIWhite?}[|${BIWhite?}]${normal?}${Line?}"
+___atomic_prompt_user_info() {
+	color=$white
+	box="${normal}${LineA}\$([[ \$? != 0 ]] && echo \"${BIWhite}[${IRed}${SX}${BIWhite}]${normal}${Line}\")${Line}${BIWhite}[|${BIWhite}]${normal}${Line}"
+	info="${IYellow}\u${IRed}@${IGreen}\h"
 
-	printf "%s|%s|%s|%s" "${color}" "${info}" "${white?}" "${box}"
+	printf "%s|%s|%s|%s" "${color}" "${info}" "${white}" "${box}"
 }
 
-function ___atomic_prompt_dir() {
-	local color="${IRed?}"
-	local box="[|]${normal}"
-	local info="\w"
-	printf "%s|%s|%s|%s" "${color}" "${info}" "${bold_white?}" "${box}"
+___atomic_prompt_dir() {
+	color=${IRed}
+	box="[|]${normal}"
+	info="\w"
+	printf "%s|%s|%s|%s" "${color}" "${info}" "${bold_white}" "${box}"
 }
 
-function ___atomic_prompt_scm() {
-	[[ "${THEME_SHOW_SCM:-}" != "true" ]] && return
-	local color="${bold_green?}" box info
-	box="${Line?}[${IWhite?}$(scm_char)] "
+___atomic_prompt_scm() {
+	[ "${THEME_SHOW_SCM}" != "true" ] && return
+	color=$bold_green
+	box="${Line}[${IWhite}$(scm_char)] "
 	info="$(scm_prompt_info)"
-	printf "%s|%s|%s|%s" "${color}" "${info}" "${bold_white?}" "${box}"
+	printf "%s|%s|%s|%s" "${color}" "${info}" "${bold_white}" "${box}"
 }
 
-function ___atomic_prompt_python() {
-	[[ "${THEME_SHOW_PYTHON:-}" != "true" ]] && return
-	local color="${bold_yellow?}"
-	local box="[|]" info
+___atomic_prompt_python() {
+	[ "${THEME_SHOW_PYTHON}" != "true" ] && return
+	color=$bold_yellow
+	box="[|]"
 	info="$(python_version_prompt)"
-	printf "%s|%s|%s|%s" "${color}" "${info}" "${bold_blue?}" "${box}"
+	printf "%s|%s|%s|%s" "${color}" "${info}" "${bold_blue}" "${box}"
 }
 
-function ___atomic_prompt_ruby() {
-	[[ "${THEME_SHOW_RUBY:-}" != "true" ]] && return
-	local color="${bold_white?}"
-	local box="[|]" info
+___atomic_prompt_ruby() {
+	[ "${THEME_SHOW_RUBY}" != "true" ] && return
+	color=$bold_white
+	box="[|]"
 	info="rb-$(ruby_version_prompt)"
-	printf "%s|%s|%s|%s" "${color}" "${info}" "${bold_red?}" "${box}"
+	printf "%s|%s|%s|%s" "${color}" "${info}" "${bold_red}" "${box}"
 }
 
-function ___atomic_prompt_todo() {
-	[[ "${THEME_SHOW_TODO:-}" != "true" ||
-		-z "$(which todo.sh)" ]] && return
-	local color="${bold_white?}"
-	local box="[|]" info
+___atomic_prompt_todo() {
+	[ "${THEME_SHOW_TODO}" != "true" ] \
+		|| [ -z "$(which todo.sh)" ] && return
+	color=$bold_white
+	box="[|]"
 	info="t:$(todo.sh ls | grep -E "TODO: [0-9]+ of ([0-9]+)" | awk '{ print $4 }')"
-	printf "%s|%s|%s|%s" "${color}" "${info}" "${bold_green?}" "${box}"
+	printf "%s|%s|%s|%s" "${color}" "${info}" "${bold_green}" "${box}"
 }
 
-function ___atomic_prompt_clock() {
-	[[ "${THEME_SHOW_CLOCK:-}" != "true" ]] && return
-	local color="${THEME_CLOCK_COLOR:-}"
-	local box="[|]" info
+___atomic_prompt_clock() {
+	[ "${THEME_SHOW_CLOCK}" != "true" ] && return
+	color=$THEME_CLOCK_COLOR
+	box="[|]"
 	info="$(date +"${THEME_CLOCK_FORMAT}")"
-	printf "%s|%s|%s|%s" "${color}" "${info}" "${bold_white?}" "${box}"
+	printf "%s|%s|%s|%s" "${color}" "${info}" "${bold_white}" "${box}"
 }
 
-function ___atomic_prompt_battery() {
-	local batp box info
+___atomic_prompt_battery() {
 	! _command_exists battery_percentage \
-		|| [[ "${THEME_SHOW_BATTERY:-}" != "true" ]] \
-		|| [[ "$(battery_percentage)" = "no" ]] && return
+		|| [ "${THEME_SHOW_BATTERY}" != "true" ] \
+		|| [ "$(battery_percentage)" = "no" ] && return
 
 	batp=$(battery_percentage)
-	if [[ "$batp" -eq 50 || "$batp" -gt 50 ]]; then
-		color="${bold_green?}"
-	elif [[ "$batp" -lt 50 && "$batp" -gt 25 ]]; then
-		color="${bold_yellow?}"
-	elif [[ "$batp" -eq 25 || "$batp" -lt 25 ]]; then
-		color="${IRed?}"
+	if [ "$batp" -eq 50 ] || [ "$batp" -gt 50 ]; then
+		color=$bold_green
+	elif [ "$batp" -lt 50 ] && [ "$batp" -gt 25 ]; then
+		color=$bold_yellow
+	elif [ "$batp" -eq 25 ] || [ "$batp" -lt 25 ]; then
+		color=$IRed
 	fi
 	box="[|]"
 	ac_adapter_connected && info="+"
 	ac_adapter_disconnected && info="-"
 	info+=$batp
-	[[ "$batp" -eq 100 || "$batp" -gt 100 ]] && info="AC"
-	printf "%s|%s|%s|%s" "${color}" "${info}" "${bold_white?}" "${box}"
+	[ "$batp" -eq 100 ] || [ "$batp" -gt 100 ] && info="AC"
+	printf "%s|%s|%s|%s" "${color}" "${info}" "${bold_white}" "${box}"
 }
 
-function ___atomic_prompt_exitcode() {
-	[[ "${THEME_SHOW_EXITCODE:-}" != "true" ]] && return
-	local color="${bold_purple?}"
-	[[ "${exitcode?}" -ne 0 ]] && printf "%s|%s" "${color}" "${exitcode}"
+___atomic_prompt_exitcode() {
+	[ "${THEME_SHOW_EXITCODE}" != "true" ] && return
+	color=$bold_purple
+	[ "$exitcode" -ne 0 ] && printf "%s|%s" "${color}" "${exitcode}"
 }
 
-function ___atomic_prompt_char() {
-	local color="${white?}"
-	local prompt_char="${__ATOMIC_PROMPT_CHAR_PS1?}"
-	if [[ "${THEME_SHOW_SUDO:-}" == "true" ]]; then
+___atomic_prompt_char() {
+	color=$white
+	prompt_char="${__ATOMIC_PROMPT_CHAR_PS1}"
+	if [ "${THEME_SHOW_SUDO}" == "true" ]; then
 		if sudo -vn 1> /dev/null 2>&1; then
-			prompt_char="${__ATOMIC_PROMPT_CHAR_PS1_SUDO?}"
+			prompt_char="${__ATOMIC_PROMPT_CHAR_PS1_SUDO}"
 		fi
 	fi
 	printf "%s|%s" "${color}" "${prompt_char}"
@@ -207,17 +207,19 @@ function ___atomic_prompt_char() {
 ## cli ##
 #########
 
-function __atomic_show() {
-	local _seg="${1?}"
+__atomic_show() {
+	typeset _seg=${1:-}
+	shift
 	export "THEME_SHOW_${_seg}"=true
 }
 
-function __atomic_hide() {
-	local _seg="${1?}"
+__atomic_hide() {
+	typeset _seg=${1:-}
+	shift
 	export "THEME_SHOW_${_seg}"=false
 }
 
-function _atomic_completion() {
+_atomic_completion() {
 	local cur _action actions segments
 	COMPREPLY=()
 	cur="${COMP_WORDS[COMP_CWORD]}"
@@ -237,26 +239,22 @@ function _atomic_completion() {
 	return 0
 }
 
-function atomic() {
-	local action="${1?}"
+atomic() {
+	typeset action=${1:-}
 	shift
-	local segs=("${@?}")
-	local func
-	case "${action}" in
+	typeset segs=${*:-}
+	typeset func
+	case $action in
 		show)
 			func=__atomic_show
 			;;
 		hide)
 			func=__atomic_hide
 			;;
-		*)
-			_log_error "${FUNCNAME[0]}: unknown action '${action}'"
-			return 1
-			;;
 	esac
-	for seg in "${segs[@]}"; do
-		seg="$(printf "%s" "${seg}" | tr '[:lower:]' '[:upper:]')"
-		"${func}" "${seg}"
+	for seg in ${segs}; do
+		seg=$(printf "%s" "${seg}" | tr '[:lower:]' '[:upper:]')
+		$func "${seg}"
 	done
 }
 
@@ -266,55 +264,55 @@ complete -F _atomic_completion atomic
 ## Variables ##
 ###############
 
-SCM_THEME_PROMPT_PREFIX=""
-SCM_THEME_PROMPT_SUFFIX=""
+export SCM_THEME_PROMPT_PREFIX=""
+export SCM_THEME_PROMPT_SUFFIX=""
 
-RBENV_THEME_PROMPT_PREFIX=""
-RBENV_THEME_PROMPT_SUFFIX=""
-RBFU_THEME_PROMPT_PREFIX=""
-RBFU_THEME_PROMPT_SUFFIX=""
-RVM_THEME_PROMPT_PREFIX=""
-RVM_THEME_PROMPT_SUFFIX=""
+export RBENV_THEME_PROMPT_PREFIX=""
+export RBENV_THEME_PROMPT_SUFFIX=""
+export RBFU_THEME_PROMPT_PREFIX=""
+export RBFU_THEME_PROMPT_SUFFIX=""
+export RVM_THEME_PROMPT_PREFIX=""
+export RVM_THEME_PROMPT_SUFFIX=""
 
-SCM_THEME_PROMPT_DIRTY=" ${bold_red}✗${normal}"
-SCM_THEME_PROMPT_CLEAN=" ${bold_green}✓${normal}"
+export SCM_THEME_PROMPT_DIRTY=" ${bold_red}✗${normal}"
+export SCM_THEME_PROMPT_CLEAN=" ${bold_green}✓${normal}"
 
-: "${THEME_SHOW_SUDO:="true"}"
-: "${THEME_SHOW_SCM:="true"}"
-: "${THEME_SHOW_RUBY:="false"}"
-: "${THEME_SHOW_PYTHON:="false"}"
-: "${THEME_SHOW_CLOCK:="true"}"
-: "${THEME_SHOW_TODO:="false"}"
-: "${THEME_SHOW_BATTERY:="true"}"
-: "${THEME_SHOW_EXITCODE:="false"}"
+THEME_SHOW_SUDO=${THEME_SHOW_SUDO:-"true"}
+THEME_SHOW_SCM=${THEME_SHOW_SCM:-"true"}
+THEME_SHOW_RUBY=${THEME_SHOW_RUBY:-"false"}
+THEME_SHOW_PYTHON=${THEME_SHOW_PYTHON:-"false"}
+THEME_SHOW_CLOCK=${THEME_SHOW_CLOCK:-"true"}
+THEME_SHOW_TODO=${THEME_SHOW_TODO:-"false"}
+THEME_SHOW_BATTERY=${THEME_SHOW_BATTERY:-"true"}
+THEME_SHOW_EXITCODE=${THEME_SHOW_EXITCODE:-"false"}
 
-: "${THEME_CLOCK_COLOR:=${BICyan?}}"
-: "${THEME_CLOCK_FORMAT:="%a %b %d - %H:%M"}"
+THEME_CLOCK_COLOR=${THEME_CLOCK_COLOR:-"${BICyan}"}
+THEME_CLOCK_FORMAT=${THEME_CLOCK_FORMAT:-"%a %b %d - %H:%M"}
 
-__ATOMIC_PROMPT_CHAR_PS1=${THEME_PROMPT_CHAR_PS1:-"${normal?}${LineB?}${bold_white?}${Circle?}"}
-__ATOMIC_PROMPT_CHAR_PS2=${THEME_PROMPT_CHAR_PS2:-"${normal?}${LineB?}${bold_white?}${Circle?}"}
+__ATOMIC_PROMPT_CHAR_PS1=${THEME_PROMPT_CHAR_PS1:-"${normal}${LineB}${bold_white}${Circle}"}
+__ATOMIC_PROMPT_CHAR_PS2=${THEME_PROMPT_CHAR_PS2:-"${normal}${LineB}${bold_white}${Circle}"}
 
-__ATOMIC_PROMPT_CHAR_PS1_SUDO=${THEME_PROMPT_CHAR_PS1_SUDO:-"${normal?}${LineB?}${bold_red?}${Face?}"}
-__ATOMIC_PROMPT_CHAR_PS2_SUDO=${THEME_PROMPT_CHAR_PS2_SUDO:-"${normal?}${LineB?}${bold_red?}${Face?}"}
+__ATOMIC_PROMPT_CHAR_PS1_SUDO=${THEME_PROMPT_CHAR_PS1_SUDO:-"${normal}${LineB}${bold_red}${Face}"}
+__ATOMIC_PROMPT_CHAR_PS2_SUDO=${THEME_PROMPT_CHAR_PS2_SUDO:-"${normal}${LineB}${bold_red}${Face}"}
 
-: "${___ATOMIC_TOP_LEFT:="user_info dir scm"}"
-: "${___ATOMIC_TOP_RIGHT:="exitcode python ruby todo clock battery"}"
-: "${___ATOMIC_BOTTOM:="char"}"
+___ATOMIC_TOP_LEFT=${___ATOMIC_TOP_LEFT:-"user_info dir scm"}
+___ATOMIC_TOP_RIGHT=${___ATOMIC_TOP_RIGHT:-"exitcode python ruby todo clock battery"}
+___ATOMIC_BOTTOM=${___ATOMIC_BOTTOM:-"char"}
 
 ############
 ## Prompt ##
 ############
 
-function __atomic_ps1() {
-	printf "%s%s%s" "$(____atomic_top)" "$(____atomic_bottom)" "${normal?}"
+__atomic_ps1() {
+	printf "%s%s%s" "$(____atomic_top)" "$(____atomic_bottom)" "${normal}"
 }
 
-function __atomic_ps2() {
-	color="${bold_white?}"
-	printf "%s%s%s" "${color}" "${__ATOMIC_PROMPT_CHAR_PS2?}  " "${normal?}"
+__atomic_ps2() {
+	color=$bold_white
+	printf "%s%s%s" "${color}" "${__ATOMIC_PROMPT_CHAR_PS2}  " "${normal}"
 }
 
-function _atomic_prompt() {
+_atomic_prompt() {
 	exitcode="$?"
 
 	PS1="$(__atomic_ps1)"
diff --git a/themes/bakke/bakke.theme.bash b/themes/bakke/bakke.theme.bash
index a3670b07..d7bfbbe8 100644
--- a/themes/bakke/bakke.theme.bash
+++ b/themes/bakke/bakke.theme.bash
@@ -1,15 +1,16 @@
 # shellcheck shell=bash
 # shellcheck disable=SC2034 # Expected behavior for themes.
+# shellcheck disable=SC2154 #TODO: fix these all.
 
-SCM_THEME_PROMPT_DIRTY=" ${red?}✗"
-SCM_THEME_PROMPT_CLEAN=" ${bold_green?}✓"
+SCM_THEME_PROMPT_DIRTY=" ${red}✗"
+SCM_THEME_PROMPT_CLEAN=" ${bold_green}✓"
 SCM_THEME_PROMPT_PREFIX=" |"
-SCM_THEME_PROMPT_SUFFIX="${green?}|"
+SCM_THEME_PROMPT_SUFFIX="${green}|"
 
-GIT_THEME_PROMPT_DIRTY=" ${red?}✗"
-GIT_THEME_PROMPT_CLEAN=" ${bold_green?}✓"
-GIT_THEME_PROMPT_PREFIX=" ${green?}|"
-GIT_THEME_PROMPT_SUFFIX="${green?}|"
+GIT_THEME_PROMPT_DIRTY=" ${red}✗"
+GIT_THEME_PROMPT_CLEAN=" ${bold_green}✓"
+GIT_THEME_PROMPT_PREFIX=" ${green}|"
+GIT_THEME_PROMPT_SUFFIX="${green}|"
 
 RVM_THEME_PROMPT_PREFIX="|"
 RVM_THEME_PROMPT_SUFFIX="|"
@@ -18,10 +19,7 @@ function prompt_command() {
 	#PS1="${bold_cyan}$(scm_char)${green}$(scm_prompt_info)${purple}$(ruby_version_prompt) ${yellow}\h ${reset_color}in ${green}\w ${reset_color}\n${green}→${reset_color} "
 	#PS1="\n${purple}\h: ${reset_color} ${green}\w\n${bold_cyan}$(scm_char)${green}$(scm_prompt_info) ${green}→${reset_color} "
 	#PS1="\n${cyan}\h: ${reset_color} ${yellow}\w\n${red}$(scm_char)${red}$(scm_prompt_info) ${green}→${reset_color} "
-	local virtualenv_prompt scm_prompt_info
-	virtualenv_prompt="$(virtualenv_prompt)"
-	scm_prompt_info="$(scm_prompt_info)"
-	PS1="\n${cyan?}\h:${virtualenv_prompt} ${reset_color?} ${yellow?}\w ${green?}${scm_prompt_info}\n${reset_color?}→ "
+	PS1="\n${cyan}\h:$(virtualenv_prompt) ${reset_color} ${yellow}\w ${green}$(scm_prompt_info)\n${reset_color}→ "
 }
 
 safe_append_prompt_command prompt_command
diff --git a/themes/barbuk/barbuk.theme.bash b/themes/barbuk/barbuk.theme.bash
index 6e6eb88a..b614d148 100644
--- a/themes/barbuk/barbuk.theme.bash
+++ b/themes/barbuk/barbuk.theme.bash
@@ -1,11 +1,8 @@
 # shellcheck shell=bash
 # shellcheck disable=SC2034 # Expected behavior for themes.
-
-# Prompt defaut configuration
-BARBUK_PROMPT=${BARBUK_PROMPT:="git-uptream-remote-logo ssh path scm python_venv ruby node terraform cloud duration exit"}
+# shellcheck disable=SC2154 #TODO: fix these all.
 
 # Theme custom glyphs
-# SCM
 SCM_GIT_CHAR_GITLAB=${BARBUK_GITLAB_CHAR:='  '}
 SCM_GIT_CHAR_BITBUCKET=${BARBUK_BITBUCKET_CHAR:='  '}
 SCM_GIT_CHAR_GITHUB=${BARBUK_GITHUB_CHAR:='  '}
@@ -13,20 +10,13 @@ SCM_GIT_CHAR_DEFAULT=${BARBUK_GIT_DEFAULT_CHAR:='  '}
 SCM_GIT_CHAR_ICON_BRANCH=${BARBUK_GIT_BRANCH_ICON:=''}
 SCM_HG_CHAR=${BARBUK_HG_CHAR:='☿ '}
 SCM_SVN_CHAR=${BARBUK_SVN_CHAR:='⑆ '}
-# Exit code
 EXIT_CODE_ICON=${BARBUK_EXIT_CODE_ICON:=' '}
-# Programming and tools
 PYTHON_VENV_CHAR=${BARBUK_PYTHON_VENV_CHAR:=' '}
-RUBY_CHAR=${BARBUK_RUBY_CHAR:=' '}
-NODE_CHAR=${BARBUK_NODE_CHAR:=' '}
-TERRAFORM_CHAR=${BARBUK_TERRAFORM_CHAR:="❲t❳ "}
-# Cloud
-AWS_PROFILE_CHAR=${BARBUK_AWS_PROFILE_CHAR:=" aws "}
-SCALEWAY_PROFILE_CHAR=${BARBUK_SCALEWAY_PROFILE_CHAR:=" scw "}
-GCLOUD_CHAR=${BARBUK_GCLOUD_CHAR:=" google "}
+COMMAND_DURATION_ICON=${BARBUK_COMMAND_DURATION_ICON:-"$bold_blue  "}
 
 # Command duration
 COMMAND_DURATION_MIN_SECONDS=${COMMAND_DURATION_MIN_SECONDS:-1}
+COMMAND_DURATION_COLOR="$normal"
 
 # Ssh user and hostname display
 SSH_INFO=${BARBUK_SSH_INFO:=true}
@@ -34,32 +24,24 @@ HOST_INFO=${BARBUK_HOST_INFO:=long}
 
 # Bash-it default glyphs customization
 SCM_NONE_CHAR=
-SCM_THEME_PROMPT_DIRTY=" ${bold_red?}✗"
-SCM_THEME_PROMPT_CLEAN=" ${bold_green?}✓"
+SCM_THEME_PROMPT_DIRTY=" ${bold_red}✗"
+SCM_THEME_PROMPT_CLEAN=" ${bold_green}✓"
 SCM_THEME_PROMPT_PREFIX="|"
-SCM_THEME_PROMPT_SUFFIX="${green?}| "
-SCM_GIT_BEHIND_CHAR="${bold_red?}↓${normal?}"
-SCM_GIT_AHEAD_CHAR="${bold_green?}↑${normal?}"
+SCM_THEME_PROMPT_SUFFIX="${green}| "
+SCM_GIT_BEHIND_CHAR="${bold_red}↓${normal}"
+SCM_GIT_AHEAD_CHAR="${bold_green}↑${normal}"
 SCM_GIT_UNTRACKED_CHAR="⌀"
-SCM_GIT_UNSTAGED_CHAR="${bold_yellow?}•${normal?}"
-SCM_GIT_STAGED_CHAR="${bold_green?}+${normal?}"
-GIT_THEME_PROMPT_DIRTY=" ${bold_red?}✗"
-GIT_THEME_PROMPT_CLEAN=" ${bold_green?}✓"
-GIT_THEME_PROMPT_PREFIX="${cyan?}"
-GIT_THEME_PROMPT_SUFFIX="${cyan?}"
-SCM_THEME_BRANCH_TRACK_PREFIX="${normal?} ⤏  ${cyan?}"
+SCM_GIT_UNSTAGED_CHAR="${bold_yellow}•${normal}"
+SCM_GIT_STAGED_CHAR="${bold_green}+${normal}"
+GIT_THEME_PROMPT_DIRTY=" ${bold_red}✗"
+GIT_THEME_PROMPT_CLEAN=" ${bold_green}✓"
+GIT_THEME_PROMPT_PREFIX="${cyan}"
+GIT_THEME_PROMPT_SUFFIX="${cyan}"
+SCM_THEME_BRANCH_TRACK_PREFIX="${normal} ⤏  ${cyan}"
 SCM_THEME_CURRENT_USER_PREFFIX='  '
 SCM_GIT_SHOW_CURRENT_USER=false
-NVM_THEME_PROMPT_PREFIX=''
-NVM_THEME_PROMPT_SUFFIX=''
-RVM_THEME_PROMPT_PREFIX=''
-RVM_THEME_PROMPT_SUFFIX=''
-RBENV_THEME_PROMPT_PREFIX=' '
-RBENV_THEME_PROMPT_SUFFIX=''
-RBFU_THEME_PROMPT_PREFIX=''
-RBFU_THEME_PROMPT_SUFFIX=''
-
-function __git-uptream-remote-logo_prompt() {
+
+function _git-uptream-remote-logo {
 	[[ "$(_git-upstream)" == "" ]] && SCM_GIT_CHAR="$SCM_GIT_CHAR_DEFAULT"
 
 	local remote remote_domain
@@ -75,72 +57,36 @@ function __git-uptream-remote-logo_prompt() {
 		bitbucket) SCM_GIT_CHAR="$SCM_GIT_CHAR_BITBUCKET" ;;
 		*) SCM_GIT_CHAR="$SCM_GIT_CHAR_DEFAULT" ;;
 	esac
-
-	echo "${purple?}$(scm_char)"
 }
 
-function git_prompt_info() {
+function git_prompt_info {
 	git_prompt_vars
-	echo -e "on $SCM_GIT_CHAR_ICON_BRANCH $SCM_PREFIX$SCM_BRANCH$SCM_STATE$SCM_GIT_AHEAD$SCM_GIT_BEHIND$SCM_GIT_STASH$SCM_SUFFIX "
+	echo -e " on $SCM_GIT_CHAR_ICON_BRANCH $SCM_PREFIX$SCM_BRANCH$SCM_STATE$SCM_GIT_AHEAD$SCM_GIT_BEHIND$SCM_GIT_STASH$SCM_SUFFIX"
 }
 
-function __exit_prompt() {
-	if [[ "$exit_code" -ne 0 ]]; then
-		echo "${purple?}${EXIT_CODE_ICON}${yellow?}${exit_code}${bold_orange?} "
+function _exit-code {
+	if [[ "$1" -ne 0 ]]; then
+		exit_code=" ${purple}${EXIT_CODE_ICON}${yellow}${exit_code}${bold_orange}"
 	else
-		echo "${bold_green}"
-	fi
-}
-
-function __aws_profile_prompt() {
-	if [[ -n "${AWS_PROFILE}" ]]; then
-		echo -n "${bold_purple?}${AWS_PROFILE_CHAR}${normal?}${AWS_PROFILE} "
-	fi
-}
-
-function __scaleway_profile_prompt() {
-	if [[ -n "${SCW_PROFILE}" ]]; then
-		echo -n "${bold_purple?}${SCALEWAY_PROFILE_CHAR}${normal?}${SCW_PROFILE} "
+		exit_code="${bold_green}"
 	fi
 }
 
-function __gcloud_prompt() {
-	local active_gcloud_account=""
+function _prompt {
+	local exit_code="$?" wrap_char=' ' dir_color=$green ssh_info='' python_venv='' host command_duration=
 
-	active_gcloud_account="$(active_gcloud_account_prompt)"
-	[[ -n "${active_gcloud_account}" ]] && echo "${bold_purple?}${GCLOUD_CHAR}${normal?}${active_gcloud_account} "
-}
+	command_duration=$(_command_duration)
 
-function __cloud_prompt() {
-	__aws_profile_prompt
-	__scaleway_profile_prompt
-	__gcloud_prompt
-}
+	_exit-code exit_code
+	_git-uptream-remote-logo
 
-function __terraform_prompt() {
-	local terraform_workspace=""
+	history -a
 
-	if [ -d .terraform ]; then
-		terraform_workspace="$(terraform_workspace_prompt)"
-		[[ -n "${terraform_workspace}" ]] && echo "${bold_purple?}${TERRAFORM_CHAR}${normal?}${terraform_workspace} "
+	# Detect root shell
+	if [ "$(whoami)" = root ]; then
+		dir_color=$red
 	fi
-}
-
-function __node_prompt() {
-	local node_version=""
-
-	node_version="$(node_version_prompt)"
-	[[ -n "${node_version}" ]] && echo "${bold_purple?}${NODE_CHAR}${normal?}${node_version} "
-}
 
-function __ruby_prompt() {
-	local ruby_version=""
-
-	ruby_version="$(ruby_version_prompt)"
-	[[ -n "${ruby_version}" ]] && echo "${bold_purple?}${RUBY_CHAR}${normal?}${ruby_version} "
-}
-
-function __ssh_prompt() {
 	# Detect ssh
 	if [[ -n "${SSH_CONNECTION}" ]] && [ "$SSH_INFO" = true ]; then
 		if [ "$HOST_INFO" = long ]; then
@@ -148,56 +94,19 @@ function __ssh_prompt() {
 		else
 			host="\h"
 		fi
-		echo "${bold_blue?}\u${bold_orange?}@${cyan?}$host ${bold_orange?}in "
+		ssh_info="${bold_blue}\u${bold_orange}@${cyan}$host ${bold_orange}in"
 	fi
-}
 
-function __python_venv_prompt() {
 	# Detect python venv
 	if [[ -n "${CONDA_DEFAULT_ENV}" ]]; then
-		echo "${bold_purple?}$PYTHON_VENV_CHAR${normal?}${CONDA_DEFAULT_ENV} "
+		python_venv="$PYTHON_VENV_CHAR${CONDA_DEFAULT_ENV} "
 	elif [[ -n "${VIRTUAL_ENV}" ]]; then
-		echo "${bold_purple?}$PYTHON_VENV_CHAR${normal?}$(basename "${VIRTUAL_ENV}") "
-	fi
-}
-
-function __path_prompt() {
-	local dir_color=${green?}
-	# Detect root shell
-	if [ "$(whoami)" = root ]; then
-		dir_color=${red?}
-	fi
-
-	echo "${dir_color}\w${normal} "
-}
-
-function __scm_prompt() {
-	scm_prompt_info
-}
-
-function __duration_prompt() {
-	[[ -n "$command_duration" ]] && echo "${command_duration} "
-}
-
-function __prompt-command() {
-	exit_code="$?"
-	command_duration=$(_command_duration)
-	local wrap_char
-
-	# Generate prompt
-	PS1="\n "
-	for segment in $BARBUK_PROMPT; do
-		local info
-		info="$(__"${segment}"_prompt)"
-		[[ -n "${info}" ]] && PS1+="${info}"
-	done
-
-	# Cut prompt when it's too long
-	if [[ ${#PS1} -gt $((COLUMNS * 2)) ]]; then
-		wrap_char="\n"
+		python_venv="$PYTHON_VENV_CHAR$(basename "${VIRTUAL_ENV}") "
 	fi
 
+	PS1="\\n${ssh_info} ${purple}$(scm_char)${python_venv}${dir_color}\\w${normal}$(scm_prompt_info)${command_duration}${exit_code}"
+	[[ ${#PS1} -gt $((COLUMNS * 2)) ]] && wrap_char="\\n"
 	PS1="${PS1}${wrap_char}❯${normal} "
 }
 
-safe_append_prompt_command __prompt-command
+safe_append_prompt_command _prompt
diff --git a/themes/base.theme.bash b/themes/base.theme.bash
index 92a56e5e..f9f5190d 100644
--- a/themes/base.theme.bash
+++ b/themes/base.theme.bash
@@ -1,20 +1,16 @@
 # shellcheck shell=bash
 # shellcheck disable=SC2034 # Expected behavior for themes.
 
-# Colors for listing files, using default color scheme.
-# To customize color scheme by theme, check out https://geoff.greer.fm/lscolors/
-export CLICOLOR LSCOLORS LS_COLORS
-
 CLOCK_CHAR_THEME_PROMPT_PREFIX=''
 CLOCK_CHAR_THEME_PROMPT_SUFFIX=''
 CLOCK_THEME_PROMPT_PREFIX=''
 CLOCK_THEME_PROMPT_SUFFIX=''
 
-THEME_PROMPT_HOST='\h'
+THEME_PROMPT_HOST='\H'
 
 SCM=
 
-: "${SCM_CHECK:=true}"
+SCM_CHECK=${SCM_CHECK:=true}
 
 SCM_THEME_PROMPT_DIRTY=' ✗'
 SCM_THEME_PROMPT_CLEAN=' ✓'
@@ -30,19 +26,17 @@ SCM_THEME_CURRENT_USER_SUFFIX=''
 SCM_THEME_CHAR_PREFIX=''
 SCM_THEME_CHAR_SUFFIX=''
 
-# Define this here so it can be used by all of the themes
-: "${THEME_CHECK_SUDO:=false}"
-: "${THEME_BATTERY_PERCENTAGE_CHECK:=true}"
+THEME_BATTERY_PERCENTAGE_CHECK=${THEME_BATTERY_PERCENTAGE_CHECK:=true}
 
-: "${SCM_GIT_SHOW_DETAILS:=true}"
-: "${SCM_GIT_SHOW_REMOTE_INFO:=auto}"
-: "${SCM_GIT_IGNORE_UNTRACKED:=false}"
-: "${SCM_GIT_SHOW_CURRENT_USER:=false}"
-: "${SCM_GIT_SHOW_MINIMAL_INFO:=false}"
-: "${SCM_GIT_SHOW_STASH_INFO:=true}"
-: "${SCM_GIT_SHOW_COMMIT_COUNT:=true}"
-: "${SCM_GIT_USE_GITSTATUS:=false}"
-: "${SCM_GIT_GITSTATUS_RAN:=false}"
+SCM_GIT_SHOW_DETAILS=${SCM_GIT_SHOW_DETAILS:=true}
+SCM_GIT_SHOW_REMOTE_INFO=${SCM_GIT_SHOW_REMOTE_INFO:=auto}
+SCM_GIT_IGNORE_UNTRACKED=${SCM_GIT_IGNORE_UNTRACKED:=false}
+SCM_GIT_SHOW_CURRENT_USER=${SCM_GIT_SHOW_CURRENT_USER:=false}
+SCM_GIT_SHOW_MINIMAL_INFO=${SCM_GIT_SHOW_MINIMAL_INFO:=false}
+SCM_GIT_SHOW_STASH_INFO=${SCM_GIT_SHOW_STASH_INFO:=true}
+SCM_GIT_SHOW_COMMIT_COUNT=${SCM_GIT_SHOW_COMMIT_COUNT:=true}
+SCM_GIT_USE_GITSTATUS=${SCM_GIT_USE_GITSTATUS:=false}
+SCM_GIT_GITSTATUS_RAN=${SCM_GIT_GITSTATUS_RAN:=false}
 
 SCM_GIT='git'
 SCM_GIT_CHAR='±'
@@ -77,9 +71,9 @@ NVM_THEME_PROMPT_SUFFIX='|'
 RVM_THEME_PROMPT_PREFIX=' |'
 RVM_THEME_PROMPT_SUFFIX='|'
 
-: "${THEME_SHOW_RUBY_PROMPT:=true}"
+THEME_SHOW_RUBY_PROMPT=${THEME_SHOW_RUBY_PROMPT:=true}
 
-: "${THEME_SHOW_USER_HOST:=false}"
+THEME_SHOW_USER_HOST=${THEME_SHOW_USER_HOST:=false}
 USER_HOST_THEME_PROMPT_PREFIX=''
 USER_HOST_THEME_PROMPT_SUFFIX=''
 
@@ -92,160 +86,154 @@ RBENV_THEME_PROMPT_SUFFIX='|'
 RBFU_THEME_PROMPT_PREFIX=' |'
 RBFU_THEME_PROMPT_SUFFIX='|'
 
-: "${GIT_EXE:=${SCM_GIT?}}"
-: "${HG_EXE:=${SCM_HG?}}"
-: "${SVN_EXE:=${SCM_SVN?}}"
-: "${P4_EXE:=${SCM_P4?}}"
+: "${GIT_EXE:=$SCM_GIT}"
+: "${P4_EXE:=$SCM_P4}"
+: "${HG_EXE:=$SCM_HG}"
+: "${SVN_EXE:=$SCM_SVN}"
 
 function _bash_it_appearance_scm_init() {
-	GIT_EXE="$(type -P "${SCM_GIT:-git}" || true)"
-	HG_EXE="$(type -P "${SCM_HG:-hg}" || true)"
-	SVN_EXE="$(type -P "${SCM_SVN:-svn}" || true)"
-	P4_EXE="$(type -P "${SCM_P4:-p4}" || true)"
+	GIT_EXE="$(type -P $SCM_GIT || true)"
+	P4_EXE="$(type -P $SCM_P4 || true)"
+	HG_EXE="$(type -P $SCM_HG || true)"
+	SVN_EXE="$(type -P $SCM_SVN || true)"
 
 	# Check for broken SVN exe that is caused by some versions of Xcode.
 	# See https://github.com/Bash-it/bash-it/issues/1612 for more details.
-	if [[ -x "${SVN_EXE-}" && -x "${SVN_EXE%/svn}/xcrun" ]]; then
-		if ! "${SVN_EXE}" --version > /dev/null 2>&1; then
+	if [[ -x "$SVN_EXE" && -x "${SVN_EXE%/*}/xcrun" ]]; then
+		if ! "$SVN_EXE" --version > /dev/null 2>&1; then
 			# Unset the SVN exe variable so that SVN commands are avoided.
 			SVN_EXE=""
 		fi
 	fi
-	return 0
-}
-_bash_it_library_finalize_hook+=('_bash_it_appearance_scm_init')
-
-function scm() {
-	if [[ "${SCM_CHECK:-true}" == "false" ]]; then
-		SCM="${SCM_NONE-NONE}"
-	elif [[ -x "${GIT_EXE-}" ]] && _bash-it-find-in-ancestor '.git' > /dev/null; then
-		SCM="${SCM_GIT?}"
-	elif [[ -x "${HG_EXE-}" ]] && _bash-it-find-in-ancestor '.hg' > /dev/null; then
-		SCM="${SCM_HG?}"
-	elif [[ -x "${SVN_EXE-}" ]] && _bash-it-find-in-ancestor '.svn' > /dev/null; then
-		SCM="${SCM_SVN?}"
-	elif [[ -x "${P4_EXE-}" && -n "$(p4 set P4CLIENT 2> /dev/null)" ]]; then
-		SCM="${SCM_P4?}"
+}
+_bash_it_appearance_scm_init
+
+function scm {
+	if [[ "$SCM_CHECK" = false ]]; then
+		SCM=$SCM_NONE
+	elif [[ -f .git/HEAD ]] && [[ -x "$GIT_EXE" ]]; then
+		SCM=$SCM_GIT
+	elif [[ -d .hg ]] && [[ -x "$HG_EXE" ]]; then
+		SCM=$SCM_HG
+	elif [[ -d .svn ]] && [[ -x "$SVN_EXE" ]]; then
+		SCM=$SCM_SVN
+	elif [[ -x "$GIT_EXE" ]] && [[ -n "$(git rev-parse --is-inside-work-tree 2> /dev/null)" ]]; then
+		SCM=$SCM_GIT
+	elif [[ -x "$HG_EXE" ]] && [[ -n "$(hg root 2> /dev/null)" ]]; then
+		SCM=$SCM_HG
+	elif [[ -x "$SVN_EXE" ]] && [[ -n "$(svn info --show-item wc-root 2> /dev/null)" ]]; then
+		SCM=$SCM_SVN
+	elif [[ -x "$P4_EXE" ]] && [[ -n "$(p4 set P4CLIENT 2> /dev/null)" ]]; then
+		SCM=$SCM_P4
 	else
-		SCM="${SCM_NONE-NONE}"
+		SCM=$SCM_NONE
 	fi
 }
 
-function scm_prompt() {
-	local format="${SCM_PROMPT_FORMAT-"[%s%s]"}"
-	local scm_char scm_prompt_info
-	scm_char="$(scm_char)"
-	scm_prompt_info="$(scm_prompt_info)"
+scm_prompt() {
+	local CHAR
+	CHAR="$(scm_char)"
+	local format=${SCM_PROMPT_FORMAT:-'[%s%s]'}
 
-	if [[ "${scm_char}" != "${SCM_NONE_CHAR:-}" ]]; then
+	if [[ "${CHAR}" != "$SCM_NONE_CHAR" ]]; then
 		# shellcheck disable=2059
-		printf "${format}" "${scm_char}" "${scm_prompt_info}"
+		printf "$format\n" "$CHAR" "$(scm_prompt_info)"
 	fi
 }
 
-function scm_prompt_char() {
-	if [[ -z "${SCM:-}" ]]; then
-		scm
+function scm_prompt_char {
+	if [[ -z $SCM ]]; then scm; fi
+	if [[ $SCM == "$SCM_GIT" ]]; then
+		SCM_CHAR=$SCM_GIT_CHAR
+	elif [[ $SCM == "$SCM_P4" ]]; then
+		SCM_CHAR=$SCM_P4_CHAR
+	elif [[ $SCM == "$SCM_HG" ]]; then
+		SCM_CHAR=$SCM_HG_CHAR
+	elif [[ $SCM == "$SCM_SVN" ]]; then
+		SCM_CHAR=$SCM_SVN_CHAR
+	else
+		SCM_CHAR=$SCM_NONE_CHAR
 	fi
-
-	case ${SCM?} in
-		"${SCM_GIT?}")
-			SCM_CHAR="${SCM_GIT_CHAR?}"
-			;;
-		"${SCM_HG?}")
-			SCM_CHAR="${SCM_HG_CHAR?}"
-			;;
-		"${SCM_SVN?}")
-			SCM_CHAR="${SCM_SVN_CHAR?}"
-			;;
-		"${SCM_P4?}")
-			SCM_CHAR="${SCM_P4_CHAR?}"
-			;;
-		*)
-			SCM_CHAR="${SCM_NONE_CHAR:-}"
-			;;
-	esac
 }
 
-function scm_prompt_vars() {
+function scm_prompt_vars {
 	scm
 	scm_prompt_char
 	SCM_DIRTY=0
 	SCM_STATE=''
-
-	local prompt_vars="${SCM}_prompt_vars"
-	_is_function "${prompt_vars}" && "${prompt_vars}"
+	[[ $SCM == "$SCM_GIT" ]] && git_prompt_vars && return
+	[[ $SCM == "$SCM_P4" ]] && p4_prompt_vars && return
+	[[ $SCM == "$SCM_HG" ]] && hg_prompt_vars && return
+	[[ $SCM == "$SCM_SVN" ]] && svn_prompt_vars && return
 }
 
-function scm_prompt_info() {
+function scm_prompt_info {
 	scm
 	scm_prompt_char
 	scm_prompt_info_common
 }
 
-function scm_prompt_char_info() {
+function scm_prompt_char_info {
 	scm_prompt_char
-	echo -ne "${SCM_THEME_CHAR_PREFIX-}${SCM_CHAR?}${SCM_THEME_CHAR_SUFFIX-}"
+	echo -ne "${SCM_THEME_CHAR_PREFIX}${SCM_CHAR}${SCM_THEME_CHAR_SUFFIX}"
 	scm_prompt_info_common
 }
 
-function scm_prompt_info_common() {
-	local prompt_info
+function scm_prompt_info_common {
 	SCM_DIRTY=0
 	SCM_STATE=''
 
-	case ${SCM?} in
-		"${SCM_GIT?}")
-			if [[ ${SCM_GIT_SHOW_MINIMAL_INFO:-false} == "true" ]]; then
-				# user requests minimal git status information
-				prompt_info="${SCM}_prompt_minimal_info"
-			else
-				# more detailed git status
-				prompt_info="${SCM}_prompt_info"
-			fi
-			;;
-		*)
-			# TODO: consider adding minimal status information for hg and svn
-			prompt_info="${SCM}_prompt_info"
-			;;
-	esac
-	_is_function "${prompt_info}" && "${prompt_info}"
+	if [[ ${SCM} == "${SCM_GIT}" ]]; then
+		if [[ ${SCM_GIT_SHOW_MINIMAL_INFO} == true ]]; then
+			# user requests minimal git status information
+			git_prompt_minimal_info
+		else
+			# more detailed git status
+			git_prompt_info
+		fi
+		return
+	fi
+
+	# TODO: consider adding minimal status information for hg and svn
+	{ [[ ${SCM} == "${SCM_P4}" ]] && p4_prompt_info && return; } || true
+	{ [[ ${SCM} == "${SCM_HG}" ]] && hg_prompt_info && return; } || true
+	{ [[ ${SCM} == "${SCM_SVN}" ]] && svn_prompt_info && return; } || true
 }
 
-function terraform_workspace_prompt() {
+function terraform_workspace_prompt {
 	if _command_exists terraform; then
-		if [[ -d .terraform ]]; then
-			terraform workspace show 2> /dev/null
+		if [ -d .terraform ]; then
+			echo -e "$(terraform workspace show 2> /dev/null)"
 		fi
 	fi
 }
 
-function active_gcloud_account_prompt() {
+function active_gcloud_account_prompt {
 	if _command_exists gcloud; then
-		gcloud config list account --format "value(core.account)" 2> /dev/null
+		echo -e "$(gcloud config list account --format "value(core.account)" 2> /dev/null)"
 	fi
 }
 
-function git_prompt_minimal_info() {
-	SCM_STATE="${SCM_THEME_PROMPT_CLEAN?}"
+function git_prompt_minimal_info {
+	SCM_STATE=${SCM_THEME_PROMPT_CLEAN}
 
 	_git-hide-status && return
 
-	SCM_BRANCH="${SCM_THEME_BRANCH_PREFIX-}\$(_git-friendly-ref)"
+	SCM_BRANCH="${SCM_THEME_BRANCH_PREFIX}\$(_git-friendly-ref)"
 
 	if [[ -n "$(_git-status | tail -n1)" ]]; then
 		SCM_DIRTY=1
-		SCM_STATE="${SCM_THEME_PROMPT_DIRTY?}"
+		SCM_STATE=${SCM_THEME_PROMPT_DIRTY}
 	fi
 
 	# Output the git prompt
-	SCM_PREFIX="${SCM_THEME_PROMPT_PREFIX-}"
-	SCM_SUFFIX="${SCM_THEME_PROMPT_SUFFIX-}"
-	echo -ne "${SCM_PREFIX}${SCM_BRANCH}${SCM_STATE}${SCM_SUFFIX}"
+	SCM_PREFIX=${SCM_THEME_PROMPT_PREFIX}
+	SCM_SUFFIX=${SCM_THEME_PROMPT_SUFFIX}
+	echo -e "${SCM_PREFIX}${SCM_BRANCH}${SCM_STATE}${SCM_SUFFIX}"
 }
 
-function git_prompt_vars() {
-	if [[ "${SCM_GIT_USE_GITSTATUS:-false}" != "false" ]] && _command_exists gitstatus_query && gitstatus_query && [[ "${VCS_STATUS_RESULT:-}" == "ok-sync" ]]; then
+function git_prompt_vars {
+	if ${SCM_GIT_USE_GITSTATUS} && _command_exists gitstatus_query && gitstatus_query && [[ "${VCS_STATUS_RESULT}" == "ok-sync" ]]; then
 		# we can use faster gitstatus
 		# use this variable in githelpers and below to choose gitstatus output
 		SCM_GIT_GITSTATUS_RAN=true
@@ -261,174 +249,190 @@ function git_prompt_vars() {
 
 		local detached_prefix
 		if _git-tag &> /dev/null; then
-			detached_prefix="${SCM_THEME_TAG_PREFIX}"
+			detached_prefix=${SCM_THEME_TAG_PREFIX}
 		else
-			detached_prefix="${SCM_THEME_DETACHED_PREFIX}"
+			detached_prefix=${SCM_THEME_DETACHED_PREFIX}
 		fi
 		SCM_BRANCH="${detached_prefix}\$(_git-friendly-ref)"
 	fi
 
-	if [[ "${SCM_GIT_GITSTATUS_RAN:-}" == "true" ]]; then
-		commits_behind="${VCS_STATUS_COMMITS_BEHIND?}"
-		commits_ahead="${VCS_STATUS_COMMITS_AHEAD?}"
+	if [[ "${SCM_GIT_GITSTATUS_RAN}" == "true" ]]; then
+		commits_behind=${VCS_STATUS_COMMITS_BEHIND}
+		commits_ahead=${VCS_STATUS_COMMITS_AHEAD}
 	else
 		IFS=$'\t' read -r commits_behind commits_ahead <<< "$(_git-upstream-behind-ahead)"
 	fi
 	if [[ "${commits_ahead}" -gt 0 ]]; then
 		SCM_BRANCH+="${SCM_GIT_AHEAD_BEHIND_PREFIX_CHAR}${SCM_GIT_AHEAD_CHAR}"
-		[[ "${SCM_GIT_SHOW_COMMIT_COUNT}" == "true" ]] && SCM_BRANCH+="${commits_ahead}"
+		[[ "${SCM_GIT_SHOW_COMMIT_COUNT}" = "true" ]] && SCM_BRANCH+="${commits_ahead}"
 	fi
 	if [[ "${commits_behind}" -gt 0 ]]; then
 		SCM_BRANCH+="${SCM_GIT_AHEAD_BEHIND_PREFIX_CHAR}${SCM_GIT_BEHIND_CHAR}"
-		[[ "${SCM_GIT_SHOW_COMMIT_COUNT}" == "true" ]] && SCM_BRANCH+="${commits_behind}"
+		[[ "${SCM_GIT_SHOW_COMMIT_COUNT}" = "true" ]] && SCM_BRANCH+="${commits_behind}"
 	fi
 
-	if [[ "${SCM_GIT_SHOW_STASH_INFO}" == "true" ]]; then
+	if [[ "${SCM_GIT_SHOW_STASH_INFO}" = "true" ]]; then
 		local stash_count
 		if [[ "${SCM_GIT_GITSTATUS_RAN}" == "true" ]]; then
-			stash_count="${VCS_STATUS_STASHES?}"
+			stash_count=${VCS_STATUS_STASHES}
 		else
 			stash_count="$(git stash list 2> /dev/null | wc -l | tr -d ' ')"
 		fi
 		[[ "${stash_count}" -gt 0 ]] && SCM_BRANCH+=" ${SCM_GIT_STASH_CHAR_PREFIX}${stash_count}${SCM_GIT_STASH_CHAR_SUFFIX}"
 	fi
 
-	SCM_STATE="${GIT_THEME_PROMPT_CLEAN:-${SCM_THEME_PROMPT_CLEAN:-}}"
+	SCM_STATE=${GIT_THEME_PROMPT_CLEAN:-$SCM_THEME_PROMPT_CLEAN}
 	if ! _git-hide-status; then
-		if [[ "${SCM_GIT_GITSTATUS_RAN:-}" == "true" ]]; then
-			untracked_count="${VCS_STATUS_NUM_UNTRACKED?}"
-			unstaged_count="${VCS_STATUS_NUM_UNSTAGED?}"
-			staged_count="${VCS_STATUS_NUM_STAGED?}"
+		if [[ "${SCM_GIT_GITSTATUS_RAN}" == "true" ]]; then
+			untracked_count=${VCS_STATUS_NUM_UNTRACKED}
+			unstaged_count=${VCS_STATUS_NUM_UNSTAGED}
+			staged_count=${VCS_STATUS_NUM_STAGED}
 		else
-			IFS=$'\t' read -r untracked_count unstaged_count staged_count < <(_git-status-counts)
+			IFS=$'\t' read -r untracked_count unstaged_count staged_count <<< "$(_git-status-counts)"
 		fi
 		if [[ "${untracked_count}" -gt 0 || "${unstaged_count}" -gt 0 || "${staged_count}" -gt 0 ]]; then
 			SCM_DIRTY=1
-			if [[ "${SCM_GIT_SHOW_DETAILS}" == "true" ]]; then
+			if [[ "${SCM_GIT_SHOW_DETAILS}" = "true" ]]; then
 				[[ "${staged_count}" -gt 0 ]] && SCM_BRANCH+=" ${SCM_GIT_STAGED_CHAR}${staged_count}" && SCM_DIRTY=3
 				[[ "${unstaged_count}" -gt 0 ]] && SCM_BRANCH+=" ${SCM_GIT_UNSTAGED_CHAR}${unstaged_count}" && SCM_DIRTY=2
 				[[ "${untracked_count}" -gt 0 ]] && SCM_BRANCH+=" ${SCM_GIT_UNTRACKED_CHAR}${untracked_count}" && SCM_DIRTY=1
 			fi
-			SCM_STATE="${GIT_THEME_PROMPT_DIRTY:-${SCM_THEME_PROMPT_DIRTY?}}"
+			SCM_STATE=${GIT_THEME_PROMPT_DIRTY:-$SCM_THEME_PROMPT_DIRTY}
 		fi
 	fi
 
 	# no if for gitstatus here, user extraction is not supported by it
 	[[ "${SCM_GIT_SHOW_CURRENT_USER}" == "true" ]] && SCM_BRANCH+="$(git_user_info)"
 
-	SCM_PREFIX="${GIT_THEME_PROMPT_PREFIX:-${SCM_THEME_PROMPT_PREFIX-}}"
-	SCM_SUFFIX="${GIT_THEME_PROMPT_SUFFIX:-${SCM_THEME_PROMPT_SUFFIX-}}"
+	SCM_PREFIX=${GIT_THEME_PROMPT_PREFIX:-$SCM_THEME_PROMPT_PREFIX}
+	SCM_SUFFIX=${GIT_THEME_PROMPT_SUFFIX:-$SCM_THEME_PROMPT_SUFFIX}
 
-	SCM_CHANGE=$(_git-short-sha 2> /dev/null || true)
+	SCM_CHANGE=$(_git-short-sha 2> /dev/null || echo "")
 }
 
-function p4_prompt_vars() {
-	local opened_count non_default_changes default_count \
-		add_file_count edit_file_count delete_file_count
-
+function p4_prompt_vars {
 	IFS=$'\t' read -r \
 		opened_count non_default_changes default_count \
 		add_file_count edit_file_count delete_file_count \
-		< <(_p4-opened-counts)
+		<<< "$(_p4-opened-counts)"
 	if [[ "${opened_count}" -gt 0 ]]; then
 		SCM_DIRTY=1
-		SCM_STATE="${SCM_THEME_PROMPT_DIRTY?}"
-		[[ "${opened_count}" -gt 0 ]] && SCM_BRANCH+=" ${SCM_P4_OPENED_CHAR?}${opened_count}"
-		[[ "${non_default_changes}" -gt 0 ]] && SCM_BRANCH+=" ${SCM_P4_CHANGES_CHAR?}${non_default_changes}"
-		[[ "${default_count}" -gt 0 ]] && SCM_BRANCH+=" ${SCM_P4_DEFAULT_CHAR?}${default_count}"
+		SCM_STATE=${SCM_THEME_PROMPT_DIRTY}
+		[[ "${opened_count}" -gt 0 ]] && SCM_BRANCH+=" ${SCM_P4_OPENED_CHAR}${opened_count}"
+		[[ "${non_default_changes}" -gt 0 ]] && SCM_BRANCH+=" ${SCM_P4_CHANGES_CHAR}${non_default_changes}"
+		[[ "${default_count}" -gt 0 ]] && SCM_BRANCH+=" ${SCM_P4_DEFAULT_CHAR}${default_count}"
 	else
 		SCM_DIRTY=0
-		SCM_STATE="${SCM_THEME_PROMPT_CLEAN?}"
+		SCM_STATE=${SCM_THEME_PROMPT_DIRTY}
 	fi
 
-	SCM_PREFIX="${P4_THEME_PROMPT_PREFIX:-${SCM_THEME_PROMPT_PREFIX-}}"
-	SCM_SUFFIX="${P4_THEME_PROMPT_SUFFIX:-${SCM_THEME_PROMPT_SUFFIX-}}"
+	SCM_PREFIX=${P4_THEME_PROMPT_PREFIX:-$SCM_THEME_PROMPT_PREFIX}
+	SCM_SUFFIX=${P4_THEME_PROMPT_SUFFIX:-$SCM_THEME_PROMPT_SUFFIX}
 }
 
-function svn_prompt_vars() {
-	if [[ -n "$(svn status | head -c1 2> /dev/null)" ]]; then
+function svn_prompt_vars {
+	if [[ -n $(svn status | head -c1 2> /dev/null) ]]; then
 		SCM_DIRTY=1
-		SCM_STATE="${SVN_THEME_PROMPT_DIRTY:-${SCM_THEME_PROMPT_DIRTY?}}"
+		SCM_STATE=${SVN_THEME_PROMPT_DIRTY:-$SCM_THEME_PROMPT_DIRTY}
 	else
 		SCM_DIRTY=0
-		SCM_STATE="${SVN_THEME_PROMPT_CLEAN:-${SCM_THEME_PROMPT_CLEAN?}}"
-	fi
-	SCM_PREFIX="${SVN_THEME_PROMPT_PREFIX:-${SCM_THEME_PROMPT_PREFIX-}}"
-	SCM_SUFFIX="${SVN_THEME_PROMPT_SUFFIX:-${SCM_THEME_PROMPT_SUFFIX-}}"
-	SCM_BRANCH="$(svn info --show-item=url 2> /dev/null | awk -F/ '{ for (i=0; i<=NF; i++) { if ($i == "branches" || $i == "tags" ) { print $(i+1); break }; if ($i == "trunk") { print $i; break } } }')" || return
-	SCM_CHANGE="$(svn info --show-item=revision 2> /dev/null)"
+		SCM_STATE=${SVN_THEME_PROMPT_CLEAN:-$SCM_THEME_PROMPT_CLEAN}
+	fi
+	SCM_PREFIX=${SVN_THEME_PROMPT_PREFIX:-$SCM_THEME_PROMPT_PREFIX}
+	SCM_SUFFIX=${SVN_THEME_PROMPT_SUFFIX:-$SCM_THEME_PROMPT_SUFFIX}
+	SCM_BRANCH=$(svn info --show-item=url 2> /dev/null | awk -F/ '{ for (i=0; i<=NF; i++) { if ($i == "branches" || $i == "tags" ) { print $(i+1); break }; if ($i == "trunk") { print $i; break } } }') || return
+	SCM_CHANGE=$(svn info --show-item=revision 2> /dev/null)
+}
+
+# this functions returns absolute location of .hg directory if one exists
+# It starts in the current directory and moves its way up until it hits /.
+# If we get to / then no Mercurial repository was found.
+# Example:
+# - lets say we cd into ~/Projects/Foo/Bar
+# - .hg is located in ~/Projects/Foo/.hg
+# - get_hg_root starts at ~/Projects/Foo/Bar and sees that there is no .hg directory, so then it goes into ~/Projects/Foo
+function get_hg_root {
+	local CURRENT_DIR="${PWD}"
+
+	while [[ "${CURRENT_DIR:-/}" != "/" ]]; do
+		if [[ -d "$CURRENT_DIR/.hg" ]]; then
+			echo "$CURRENT_DIR/.hg"
+			return
+		fi
+
+		CURRENT_DIR="${CURRENT_DIR%/*}"
+	done
 }
 
-function hg_prompt_vars() {
-	local hg_root bookmark
+function hg_prompt_vars {
 	if [[ -n $(hg status 2> /dev/null) ]]; then
 		SCM_DIRTY=1
-		SCM_STATE="${HG_THEME_PROMPT_DIRTY:-${SCM_THEME_PROMPT_DIRTY?}}"
+		SCM_STATE=${HG_THEME_PROMPT_DIRTY:-$SCM_THEME_PROMPT_DIRTY}
 	else
 		SCM_DIRTY=0
-		SCM_STATE="${HG_THEME_PROMPT_CLEAN:-${SCM_THEME_PROMPT_CLEAN?}}"
+		SCM_STATE=${HG_THEME_PROMPT_CLEAN:-$SCM_THEME_PROMPT_CLEAN}
 	fi
-	SCM_PREFIX="${HG_THEME_PROMPT_PREFIX:-${SCM_THEME_PROMPT_PREFIX-}}"
-	SCM_SUFFIX="${HG_THEME_PROMPT_SUFFIX:-${SCM_THEME_PROMPT_SUFFIX-}}"
+	SCM_PREFIX=${HG_THEME_PROMPT_PREFIX:-$SCM_THEME_PROMPT_PREFIX}
+	SCM_SUFFIX=${HG_THEME_PROMPT_SUFFIX:-$SCM_THEME_PROMPT_SUFFIX}
 
-	hg_root="$(_bash-it-find-in-ancestor ".hg")/.hg"
+	HG_ROOT=$(get_hg_root)
 
-	if [[ -f "$hg_root/branch" ]]; then
+	if [ -f "$HG_ROOT/branch" ]; then
 		# Mercurial holds it's current branch in .hg/branch file
-		SCM_BRANCH=$(< "${hg_root}/branch")
-		bookmark="${hg_root}/bookmarks.current"
-		[[ -f "${bookmark}" ]] && SCM_BRANCH+=:$(< "${bookmark}")
+		SCM_BRANCH=$(< "${HG_ROOT}/branch")
+		local bookmark=${HG_ROOT}/bookmarks.current
+		[[ -f ${bookmark} ]] && SCM_BRANCH+=:$(< "${bookmark}")
 	else
 		SCM_BRANCH=$(hg summary 2> /dev/null | grep branch: | awk '{print $2}')
 	fi
 
-	if [[ -f "$hg_root/dirstate" ]]; then
+	if [ -f "$HG_ROOT/dirstate" ]; then
 		# Mercurial holds various information about the working directory in .hg/dirstate file. More on http://mercurial.selenic.com/wiki/DirState
-		SCM_CHANGE=$(hexdump -vn 10 -e '1/1 "%02x"' "$hg_root/dirstate" | cut -c-12)
+		SCM_CHANGE=$(hexdump -vn 10 -e '1/1 "%02x"' "$HG_ROOT/dirstate" | cut -c-12)
 	else
 		SCM_CHANGE=$(hg summary 2> /dev/null | grep parent: | awk '{print $2}')
 	fi
 }
 
-function nvm_version_prompt() {
+function nvm_version_prompt {
 	local node
 	if _is_function nvm; then
 		node=$(nvm current 2> /dev/null)
 		[[ "${node}" == "system" ]] && return
-		echo -ne "${NVM_THEME_PROMPT_PREFIX-}${node}${NVM_THEME_PROMPT_SUFFIX-}"
+		echo -e "${NVM_THEME_PROMPT_PREFIX}${node}${NVM_THEME_PROMPT_SUFFIX}"
 	fi
 }
 
-function node_version_prompt() {
-	nvm_version_prompt
+function node_version_prompt {
+	echo -e "$(nvm_version_prompt)"
 }
 
-function rvm_version_prompt() {
-	if _command_exists rvm; then
-		rvm="$(rvm-prompt)" || return
-		if [[ -n "$rvm" ]]; then
-			echo -ne "${RVM_THEME_PROMPT_PREFIX-}${rvm}${RVM_THEME_PROMPT_SUFFIX-}"
+function rvm_version_prompt {
+	if which rvm &> /dev/null; then
+		rvm=$(rvm-prompt) || return
+		if [ -n "$rvm" ]; then
+			echo -e "$RVM_THEME_PROMPT_PREFIX$rvm$RVM_THEME_PROMPT_SUFFIX"
 		fi
 	fi
 }
 
-function rbenv_version_prompt() {
-	if _command_exists rbenv; then
+function rbenv_version_prompt {
+	if which rbenv &> /dev/null; then
 		rbenv=$(rbenv version-name) || return
 		rbenv commands | grep -q gemset && gemset=$(rbenv gemset active 2> /dev/null) && rbenv="$rbenv@${gemset%% *}"
-		if [[ "$rbenv" != "system" ]]; then
-			echo -ne "${RBENV_THEME_PROMPT_PREFIX-}${rbenv}${RBENV_THEME_PROMPT_SUFFIX-}"
+		if [ "$rbenv" != "system" ]; then
+			echo -e "$RBENV_THEME_PROMPT_PREFIX$rbenv$RBENV_THEME_PROMPT_SUFFIX"
 		fi
 	fi
 }
 
-function rbfu_version_prompt() {
-	if [[ -n "${RBFU_RUBY_VERSION:-}" ]]; then
-		echo -ne "${RBFU_THEME_PROMPT_PREFIX-}${RBFU_RUBY_VERSION}${RBFU_THEME_PROMPT_SUFFIX-}"
+function rbfu_version_prompt {
+	if [[ $RBFU_RUBY_VERSION ]]; then
+		echo -e "${RBFU_THEME_PROMPT_PREFIX}${RBFU_RUBY_VERSION}${RBFU_THEME_PROMPT_SUFFIX}"
 	fi
 }
 
-function chruby_version_prompt() {
+function chruby_version_prompt {
 	if _is_function chruby; then
 		if _is_function chruby_auto; then
 			chruby_auto
@@ -439,147 +443,183 @@ function chruby_version_prompt() {
 		if ! chruby | grep -q '\*'; then
 			ruby_version="${ruby_version} (system)"
 		fi
-		echo -ne "${CHRUBY_THEME_PROMPT_PREFIX-}${ruby_version}${CHRUBY_THEME_PROMPT_SUFFIX-}"
+		echo -e "${CHRUBY_THEME_PROMPT_PREFIX}${ruby_version}${CHRUBY_THEME_PROMPT_SUFFIX}"
 	fi
 }
 
-function ruby_version_prompt() {
-	if [[ "${THEME_SHOW_RUBY_PROMPT:-}" == "true" ]]; then
-		rbfu_version_prompt
-		rbenv_version_prompt
-		rvm_version_prompt
-		chruby_version_prompt
+function ruby_version_prompt {
+	if [[ "${THEME_SHOW_RUBY_PROMPT}" = "true" ]]; then
+		echo -e "$(rbfu_version_prompt)$(rbenv_version_prompt)$(rvm_version_prompt)$(chruby_version_prompt)"
 	fi
 }
 
-function k8s_context_prompt() {
-	kubectl config current-context 2> /dev/null
+function k8s_context_prompt {
+	echo -e "$(kubectl config current-context 2> /dev/null)"
 }
 
-function k8s_namespace_prompt() {
-	kubectl config view --minify --output 'jsonpath={..namespace}' 2> /dev/null
+function k8s_namespace_prompt {
+	echo -e "$(kubectl config view --minify --output 'jsonpath={..namespace}' 2> /dev/null)"
 }
 
-function virtualenv_prompt() {
-	local virtualenv
-	if [[ -n "${VIRTUAL_ENV:-}" ]]; then
-		virtualenv="${VIRTUAL_ENV##*/}"
-		echo -ne "${VIRTUALENV_THEME_PROMPT_PREFIX-}${virtualenv}${VIRTUALENV_THEME_PROMPT_SUFFIX-}"
+function virtualenv_prompt {
+	if [[ -n "$VIRTUAL_ENV" ]]; then
+		virtualenv=$(basename "$VIRTUAL_ENV")
+		echo -e "$VIRTUALENV_THEME_PROMPT_PREFIX$virtualenv$VIRTUALENV_THEME_PROMPT_SUFFIX"
 	fi
 }
 
-function condaenv_prompt() {
-	if [[ -n "${CONDA_DEFAULT_ENV:-}" ]]; then
-		echo -ne "${CONDAENV_THEME_PROMPT_PREFIX-}${CONDA_DEFAULT_ENV}${CONDAENV_THEME_PROMPT_SUFFIX-}"
+function condaenv_prompt {
+	if [[ $CONDA_DEFAULT_ENV ]]; then
+		echo -e "${CONDAENV_THEME_PROMPT_PREFIX}${CONDA_DEFAULT_ENV}${CONDAENV_THEME_PROMPT_SUFFIX}"
 	fi
 }
 
-function py_interp_prompt() {
-	local py_version
-	py_version="$(python --version 2>&1 | awk 'NR==1{print "py-"$2;}')" || return
-	echo -ne "${PYTHON_THEME_PROMPT_PREFIX-}${py_version}${PYTHON_THEME_PROMPT_SUFFIX-}"
+function py_interp_prompt {
+	py_version=$(python --version 2>&1 | awk 'NR==1{print "py-"$2;}') || return
+	echo -e "${PYTHON_THEME_PROMPT_PREFIX}${py_version}${PYTHON_THEME_PROMPT_SUFFIX}"
 }
 
-function python_version_prompt() {
-	virtualenv_prompt
-	condaenv_prompt
-	py_interp_prompt
+function python_version_prompt {
+	echo -e "$(virtualenv_prompt)$(condaenv_prompt)$(py_interp_prompt)"
 }
 
-function git_user_info() {
-	local current_user
+function git_user_info {
 	# support two or more initials, set by 'git pair' plugin
-	current_user="$(git config user.initials | sed 's% %+%')"
+	SCM_CURRENT_USER=$(git config user.initials | sed 's% %+%')
 	# if `user.initials` weren't set, attempt to extract initials from `user.name`
-	[[ -z "${current_user}" ]] && current_user=$(printf "%s" "$(for word in $(git config user.name | PERLIO=:utf8 perl -pe '$_=lc'); do printf "%s" "${word:0:1}"; done)")
-	[[ -n "${current_user}" ]] && printf "%s" "${SCM_THEME_CURRENT_USER_PREFFIX-}${current_user}${SCM_THEME_CURRENT_USER_SUFFIX-}"
+	[[ -z "${SCM_CURRENT_USER}" ]] && SCM_CURRENT_USER=$(printf "%s" "$(for word in $(git config user.name | PERLIO=:utf8 perl -pe '$_=lc'); do printf "%s" "${word:0:1}"; done)")
+	[[ -n "${SCM_CURRENT_USER}" ]] && printf "%s" "$SCM_THEME_CURRENT_USER_PREFFIX$SCM_CURRENT_USER$SCM_THEME_CURRENT_USER_SUFFIX"
 }
 
-function clock_char() {
-	local clock_char clock_char_color show_clock_char
-	clock_char="${THEME_CLOCK_CHAR:-⌚}"
-	clock_char_color="${THEME_CLOCK_CHAR_COLOR:-${normal:-}}"
-	show_clock_char="${THEME_SHOW_CLOCK_CHAR:-"true"}"
+function clock_char {
+	CLOCK_CHAR=${THEME_CLOCK_CHAR:-"⌚"}
+	CLOCK_CHAR_COLOR=${THEME_CLOCK_CHAR_COLOR:-"$normal"}
+	SHOW_CLOCK_CHAR=${THEME_SHOW_CLOCK_CHAR:-"true"}
 
-	if [[ "${show_clock_char}" == "true" ]]; then
-		echo -ne "${clock_char_color}${CLOCK_CHAR_THEME_PROMPT_PREFIX-}${clock_char}${CLOCK_CHAR_THEME_PROMPT_SUFFIX-}"
+	if [[ "${SHOW_CLOCK_CHAR}" = "true" ]]; then
+		echo -e "${CLOCK_CHAR_COLOR}${CLOCK_CHAR_THEME_PROMPT_PREFIX}${CLOCK_CHAR}${CLOCK_CHAR_THEME_PROMPT_SUFFIX}"
 	fi
 }
 
-function clock_prompt() {
-	local clock_color="${THEME_CLOCK_COLOR:-${normal?}}"
-	local clock_format="${THEME_CLOCK_FORMAT:-"%H:%M:%S"}"
-	local show_clock="${THEME_SHOW_CLOCK:-${THEME_CLOCK_CHECK:-true}}"
-	local clock_string="\D{${clock_format}}"
+function clock_prompt {
+	CLOCK_COLOR=${THEME_CLOCK_COLOR:-"$normal"}
+	CLOCK_FORMAT=${THEME_CLOCK_FORMAT:-"%H:%M:%S"}
+	[ -z "$THEME_SHOW_CLOCK" ] && THEME_SHOW_CLOCK=${THEME_CLOCK_CHECK:-"true"}
+	SHOW_CLOCK=$THEME_SHOW_CLOCK
 
-	if [[ "${show_clock}" == "true" ]]; then
-		echo -ne "${clock_color}${CLOCK_THEME_PROMPT_PREFIX-}${clock_string}${CLOCK_THEME_PROMPT_SUFFIX-}"
+	if [[ "${SHOW_CLOCK}" = "true" ]]; then
+		CLOCK_STRING=$(date +"${CLOCK_FORMAT}")
+		echo -e "${CLOCK_COLOR}${CLOCK_THEME_PROMPT_PREFIX}${CLOCK_STRING}${CLOCK_THEME_PROMPT_SUFFIX}"
 	fi
 }
 
-function user_host_prompt() {
-	if [[ "${THEME_SHOW_USER_HOST:-false}" == "true" ]]; then
-		echo -ne "${USER_HOST_THEME_PROMPT_PREFIX-}\u@${THEME_PROMPT_HOST:-\h}${USER_HOST_THEME_PROMPT_SUFFIX-}"
+function user_host_prompt {
+	if [[ "${THEME_SHOW_USER_HOST}" = "true" ]]; then
+		echo -e "${USER_HOST_THEME_PROMPT_PREFIX}\u@\h${USER_HOST_THEME_PROMPT_SUFFIX}"
 	fi
 }
 
 # backwards-compatibility
-function git_prompt_info() {
+function git_prompt_info {
 	_git-hide-status && return
 	git_prompt_vars
-	echo -ne "${SCM_PREFIX?}${SCM_BRANCH?}${SCM_STATE?}${SCM_SUFFIX?}"
+	echo -e "${SCM_PREFIX}${SCM_BRANCH}${SCM_STATE}${SCM_SUFFIX}"
 }
 
 function p4_prompt_info() {
 	p4_prompt_vars
-	echo -ne "${SCM_PREFIX?}${SCM_BRANCH?}:${SCM_CHANGE?}${SCM_STATE?}${SCM_SUFFIX?}"
+	echo -e "${SCM_PREFIX}${SCM_BRANCH}:${SCM_CHANGE}${SCM_STATE}${SCM_SUFFIX}"
 }
 
-function svn_prompt_info() {
+function svn_prompt_info {
 	svn_prompt_vars
-	echo -ne "${SCM_PREFIX?}${SCM_BRANCH?}${SCM_STATE?}${SCM_SUFFIX?}"
+	echo -e "${SCM_PREFIX}${SCM_BRANCH}${SCM_STATE}${SCM_SUFFIX}"
 }
 
 function hg_prompt_info() {
 	hg_prompt_vars
-	echo -ne "${SCM_PREFIX?}${SCM_BRANCH?}:${SCM_CHANGE#*:}${SCM_STATE?}${SCM_SUFFIX?}"
+	echo -e "${SCM_PREFIX}${SCM_BRANCH}:${SCM_CHANGE#*:}${SCM_STATE}${SCM_SUFFIX}"
 }
 
-function scm_char() {
+function scm_char {
 	scm_prompt_char
-	echo -ne "${SCM_THEME_CHAR_PREFIX?}${SCM_CHAR?}${SCM_THEME_CHAR_SUFFIX?}"
+	echo -e "${SCM_THEME_CHAR_PREFIX}${SCM_CHAR}${SCM_THEME_CHAR_SUFFIX}"
 }
 
-function prompt_char() {
+function prompt_char {
 	scm_char
 }
 
-function battery_char() {
-	# The battery_char function depends on the presence of the battery_percentage function.
-	if [[ "${THEME_BATTERY_PERCENTAGE_CHECK}" == true ]] && _command_exists battery_percentage; then
-		echo -ne "${bold_red?}$(battery_percentage)%"
-	else
-		false
+function battery_char {
+	if [[ "${THEME_BATTERY_PERCENTAGE_CHECK}" = true ]]; then
+		echo -e "${bold_red:-}$(battery_percentage)%"
 	fi
 }
 
 if ! _command_exists battery_charge; then
 	# if user has installed battery plugin, skip this...
 	function battery_charge() {
-		: # no op
+		# no op
+		echo -n
 	}
 fi
 
-function aws_profile() {
-	if [[ -n "${AWS_DEFAULT_PROFILE:-}" ]]; then
-		echo -ne "${AWS_DEFAULT_PROFILE}"
+# The battery_char function depends on the presence of the battery_percentage function.
+# If battery_percentage is not defined, then define battery_char as a no-op.
+if ! _command_exists battery_percentage; then
+	function battery_char() {
+		# no op
+		echo -n
+	}
+fi
+
+function aws_profile {
+	if [[ $AWS_DEFAULT_PROFILE ]]; then
+		echo -e "${AWS_DEFAULT_PROFILE}"
+	else
+		echo -e "default"
+	fi
+}
+
+function __check_precmd_conflict() {
+	local f
+	for f in "${precmd_functions[@]}"; do
+		if [[ "${f}" == "${1}" ]]; then
+			return 0
+		fi
+	done
+	return 1
+}
+
+function safe_append_prompt_command {
+	local prompt_re
+
+	if [ "${__bp_imported:-missing}" == "defined" ]; then
+		# We are using bash-preexec
+		if ! __check_precmd_conflict "${1}"; then
+			precmd_functions+=("${1}")
+		fi
 	else
-		echo -ne "default"
+		# Set OS dependent exact match regular expression
+		if [[ ${OSTYPE} == darwin* ]]; then
+			# macOS
+			prompt_re="[[:<:]]${1}[[:>:]]"
+		else
+			# Linux, FreeBSD, etc.
+			prompt_re="\<${1}\>"
+		fi
+
+		if [[ ${PROMPT_COMMAND[*]:-} =~ ${prompt_re} ]]; then
+			return
+		elif [[ -z ${PROMPT_COMMAND} ]]; then
+			PROMPT_COMMAND="${1}"
+		else
+			PROMPT_COMMAND="${1};${PROMPT_COMMAND}"
+		fi
 	fi
 }
 
 function _save-and-reload-history() {
-	local autosave="${1:-${HISTORY_AUTOSAVE:-0}}"
-	[[ ${autosave} -eq 1 ]] && local HISTCONTROL="${HISTCONTROL:-}${HISTCONTROL:+:}autoshare"
-	_bash-it-history-auto-save && _bash-it-history-auto-load
+	local autosave=${1:-0}
+	[[ $autosave -eq 1 ]] && history -a && history -c && history -r
 }
diff --git a/themes/bira/bira.theme.bash b/themes/bira/bira.theme.bash
index f30d8d5d..7db03000 100644
--- a/themes/bira/bira.theme.bash
+++ b/themes/bira/bira.theme.bash
@@ -1,26 +1,24 @@
 # shellcheck shell=bash
 # shellcheck disable=SC2034 # Expected behavior for themes.
+# shellcheck disable=SC2154 #TODO: fix these all.
 
-SCM_THEME_PROMPT_PREFIX=" ${yellow?}‹"
-SCM_THEME_PROMPT_SUFFIX="›${reset_color?}"
+SCM_THEME_PROMPT_PREFIX=" ${yellow}‹"
+SCM_THEME_PROMPT_SUFFIX="›${reset_color}"
 
-VIRTUALENV_THEME_PROMPT_PREFIX=" ${cyan?}‹"
-VIRTUALENV_THEME_PROMPT_SUFFIX="›${reset_color?}"
+VIRTUALENV_THEME_PROMPT_PREFIX=" ${cyan}‹"
+VIRTUALENV_THEME_PROMPT_SUFFIX="›${reset_color}"
 
 bold="\[\e[1m\]"
 
-if [[ ${UID} -eq 0 ]]; then
-	user_host="${bold_red?}\u@\h${normal?}${reset_color?}"
+if [ ${UID} -eq 0 ]; then
+	user_host="${bold_red}\u@\h${normal}${reset_color}"
 else
-	user_host="${bold_green?}\u@\h${normal?}${reset_color?}"
+	user_host="${bold_green}\u@\h${normal}${reset_color}"
 fi
 
 function prompt_command() {
-	local current_dir=" ${bold_blue?}\w${normal?}${reset_color?}"
-	local virtualenv_prompt scm_prompt_info
-	virtualenv_prompt="$(virtualenv_prompt)"
-	scm_prompt_info="$(scm_prompt_info)"
-	PS1="╭─${user_host?}${current_dir}${virtualenv_prompt}${scm_prompt_info}\n╰─${bold?}\\$ ${normal?}"
+	local current_dir=" ${bold_blue}\w${normal}${reset_color}"
+	PS1="╭─${user_host}${current_dir}$(virtualenv_prompt)$(scm_prompt_info)\n╰─${bold}\\$ ${normal}"
 }
 
 safe_append_prompt_command prompt_command
diff --git a/themes/bobby-python/bobby-python.theme.bash b/themes/bobby-python/bobby-python.theme.bash
index 5a46b258..ebb3eab0 100644
--- a/themes/bobby-python/bobby-python.theme.bash
+++ b/themes/bobby-python/bobby-python.theme.bash
@@ -1,26 +1,27 @@
 # shellcheck shell=bash
 # shellcheck disable=SC2034 # Expected behavior for themes.
+# shellcheck disable=SC2154 #TODO: fix these all.
 
-SCM_THEME_PROMPT_DIRTY=" ${red?}✗"
-SCM_THEME_PROMPT_CLEAN=" ${bold_green?}✓"
+SCM_THEME_PROMPT_DIRTY=" ${red}✗"
+SCM_THEME_PROMPT_CLEAN=" ${bold_green}✓"
 SCM_THEME_PROMPT_PREFIX=" |"
-SCM_THEME_PROMPT_SUFFIX="${green?}|"
+SCM_THEME_PROMPT_SUFFIX="${green}|"
 
-GIT_THEME_PROMPT_DIRTY=" ${red?}✗"
-GIT_THEME_PROMPT_CLEAN=" ${bold_green?}✓"
-GIT_THEME_PROMPT_PREFIX=" ${green?}|"
-GIT_THEME_PROMPT_SUFFIX="${green?}|"
+GIT_THEME_PROMPT_DIRTY=" ${red}✗"
+GIT_THEME_PROMPT_CLEAN=" ${bold_green}✓"
+GIT_THEME_PROMPT_PREFIX=" ${green}|"
+GIT_THEME_PROMPT_SUFFIX="${green}|"
 
 CONDAENV_THEME_PROMPT_SUFFIX="|"
 
 function prompt_command() {
-	PS1="\n${yellow?}$(python_version_prompt) " # Name of virtual env followed by python version
-	PS1+="${purple?}\h "
-	PS1+="${reset_color?}in "
-	PS1+="${green?}\w\n"
-	PS1+="${bold_cyan?}$(scm_char)"
-	PS1+="${green?}$(scm_prompt_info) "
-	PS1+="${green?}→${reset_color?} "
+	PS1="\n${yellow}$(python_version_prompt) " # Name of virtual env followed by python version
+	PS1+="${purple}\h "
+	PS1+="${reset_color}in "
+	PS1+="${green}\w\n"
+	PS1+="${bold_cyan}$(scm_char)"
+	PS1+="${green}$(scm_prompt_info) "
+	PS1+="${green}→${reset_color} "
 }
 
 safe_append_prompt_command prompt_command
diff --git a/themes/bobby/bobby.theme.bash b/themes/bobby/bobby.theme.bash
index 08f54c41..98d2cd8d 100644
--- a/themes/bobby/bobby.theme.bash
+++ b/themes/bobby/bobby.theme.bash
@@ -1,40 +1,41 @@
 # shellcheck shell=bash
 # shellcheck disable=SC2034 # Expected behavior for themes.
+# shellcheck disable=SC2154 #TODO: fix these all.
 
-SCM_THEME_PROMPT_DIRTY=" ${red?}✗"
-SCM_THEME_PROMPT_CLEAN=" ${bold_green?}✓"
-SCM_THEME_PROMPT_PREFIX=" ${green?}|"
-SCM_THEME_PROMPT_SUFFIX="${green?}|"
+SCM_THEME_PROMPT_DIRTY=" ${red}✗"
+SCM_THEME_PROMPT_CLEAN=" ${bold_green}✓"
+SCM_THEME_PROMPT_PREFIX=" ${green}|"
+SCM_THEME_PROMPT_SUFFIX="${green}|"
 
-GIT_THEME_PROMPT_DIRTY=" ${red?}✗"
-GIT_THEME_PROMPT_CLEAN=" ${bold_green?}✓"
-GIT_THEME_PROMPT_PREFIX=" ${green?}|"
-GIT_THEME_PROMPT_SUFFIX="${green?}|"
+GIT_THEME_PROMPT_DIRTY=" ${red}✗"
+GIT_THEME_PROMPT_CLEAN=" ${bold_green}✓"
+GIT_THEME_PROMPT_PREFIX=" ${green}|"
+GIT_THEME_PROMPT_SUFFIX="${green}|"
 
 RVM_THEME_PROMPT_PREFIX="|"
 RVM_THEME_PROMPT_SUFFIX="|"
 
-function __bobby_clock() {
+__bobby_clock() {
 	printf '%s' "$(clock_prompt) "
 
-	if [[ "${THEME_SHOW_CLOCK_CHAR:-}" == "true" ]]; then
+	if [ "${THEME_SHOW_CLOCK_CHAR}" == "true" ]; then
 		printf '%s' "$(clock_char) "
 	fi
 }
 
 function prompt_command() {
 	PS1="\n$(battery_char) $(__bobby_clock)"
-	PS1+="${yellow?}$(ruby_version_prompt) "
-	PS1+="${purple?}\h "
-	PS1+="${reset_color?}in "
-	PS1+="${green?}\w\n"
-	PS1+="${bold_cyan?}$(scm_prompt_char_info) "
-	PS1+="${green?}→${reset_color?} "
+	PS1+="${yellow}$(ruby_version_prompt) "
+	PS1+="${purple}\h "
+	PS1+="${reset_color}in "
+	PS1+="${green}\w\n"
+	PS1+="${bold_cyan}$(scm_prompt_char_info) "
+	PS1+="${green}→${reset_color} "
 }
 
-: "${THEME_SHOW_CLOCK_CHAR:="true"}"
-: "${THEME_CLOCK_CHAR_COLOR:=${red?}}"
-: "${THEME_CLOCK_COLOR:=${bold_cyan?}}"
-: "${THEME_CLOCK_FORMAT:="%Y-%m-%d %H:%M:%S"}"
+THEME_SHOW_CLOCK_CHAR=${THEME_SHOW_CLOCK_CHAR:-"true"}
+THEME_CLOCK_CHAR_COLOR=${THEME_CLOCK_CHAR_COLOR:-"$red"}
+THEME_CLOCK_COLOR=${THEME_CLOCK_COLOR:-"$bold_cyan"}
+THEME_CLOCK_FORMAT=${THEME_CLOCK_FORMAT:-"%Y-%m-%d %H:%M:%S"}
 
 safe_append_prompt_command prompt_command
diff --git a/themes/brunton/brunton.theme.bash b/themes/brunton/brunton.theme.bash
index 04dcbb3e..166fcc84 100644
--- a/themes/brunton/brunton.theme.bash
+++ b/themes/brunton/brunton.theme.bash
@@ -1,31 +1,28 @@
 # shellcheck shell=bash
 # shellcheck disable=SC2034 # Expected behavior for themes.
+# shellcheck disable=SC2154 #TODO: fix these all.
 
 SCM_THEME_PROMPT_PREFIX=""
 SCM_THEME_PROMPT_SUFFIX=""
 
-SCM_THEME_PROMPT_DIRTY=" ${bold_red?}✗${normal?}"
-SCM_THEME_PROMPT_CLEAN=" ${bold_green?}✓${normal?}"
-SCM_GIT_CHAR="${bold_green?}±${normal?}"
-SCM_SVN_CHAR="${bold_cyan?}⑆${normal?}"
-SCM_HG_CHAR="${bold_red?}☿${normal?}"
+SCM_THEME_PROMPT_DIRTY=" ${bold_red}✗${normal}"
+SCM_THEME_PROMPT_CLEAN=" ${bold_green}✓${normal}"
+SCM_GIT_CHAR="${bold_green}±${normal}"
+SCM_SVN_CHAR="${bold_cyan}⑆${normal}"
+SCM_HG_CHAR="${bold_red}☿${normal}"
 
-function is_vim_shell() {
-	if [[ -n "${VIMRUNTIME:-}" ]]; then
-		echo "[${cyan?}vim shell${normal?}]"
+is_vim_shell() {
+	if [ -n "$VIMRUNTIME" ]; then
+		echo "[${cyan}vim shell${normal}]"
 	fi
 }
 
-function prompt() {
-	local SCM_PROMPT_FORMAT=' %s (%s)' clock_prompt battery_charge scm_prompt is_vim_shell
-	clock_prompt="$(clock_prompt)"
-	battery_charge="$(battery_charge)"
-	scm_prompt="$(scm_prompt)"
-	is_vim_shell="$(is_vim_shell)"
-	PS1="${white?}${background_blue?} \u${normal?}${background_blue?}@${red?}${background_blue?}\h ${clock_prompt} ${reset_color?}${normal?} ${battery_charge}\n${bold_black?}${background_white?} \w ${normal?}${scm_prompt}${is_vim_shell}\n${white?}>${normal?} "
+prompt() {
+	SCM_PROMPT_FORMAT=' %s (%s)'
+	PS1="${white}${background_blue} \u${normal}${background_blue}@${red}${background_blue}\h $(clock_prompt) ${reset_color}${normal} $(battery_charge)\n${bold_black}${background_white} \w ${normal}$(scm_prompt)$(is_vim_shell)\n${white}>${normal} "
 }
 
-: "${THEME_CLOCK_COLOR:=${blue?}${background_white?}}"
-: "${THEME_CLOCK_FORMAT:=" %H:%M:%S"}"
+THEME_CLOCK_COLOR=${THEME_CLOCK_COLOR:-"$blue$background_white"}
+THEME_CLOCK_FORMAT=${THEME_CLOCK_FORMAT:-" %H:%M:%S"}
 
 safe_append_prompt_command prompt
diff --git a/themes/candy/candy.theme.bash b/themes/candy/candy.theme.bash
index 69633bd9..7753e934 100644
--- a/themes/candy/candy.theme.bash
+++ b/themes/candy/candy.theme.bash
@@ -1,14 +1,12 @@
 # shellcheck shell=bash
 # shellcheck disable=SC2034 # Expected behavior for themes.
+# shellcheck disable=SC2154 #TODO: fix these all.
 
 function prompt_command() {
-	local clock_prompt scm_prompt_info
-	clock_prompt="$(clock_prompt)"
-	scm_prompt_info="$(scm_prompt_info)"
-	PS1="${green?}\u@\h ${clock_prompt} ${reset_color?}${white?}\w${reset_color?}${scm_prompt_info}${blue?} →${bold_blue?} ${reset_color?} ${normal?}"
+	PS1="${green}\u@\h $(clock_prompt) ${reset_color}${white}\w${reset_color}$(scm_prompt_info)${blue} →${bold_blue} ${reset_color} ${normal}"
 }
 
-: "${THEME_CLOCK_COLOR:=${blue?}}"
-: "${THEME_CLOCK_FORMAT:="%I:%M:%S"}"
+THEME_CLOCK_COLOR=${THEME_CLOCK_COLOR:-"$blue"}
+THEME_CLOCK_FORMAT=${THEME_CLOCK_FORMAT:-"%I:%M:%S"}
 
 safe_append_prompt_command prompt_command
diff --git a/themes/codeword/codeword.theme.bash b/themes/codeword/codeword.theme.bash
index d52403c1..beab6a4a 100644
--- a/themes/codeword/codeword.theme.bash
+++ b/themes/codeword/codeword.theme.bash
@@ -1,23 +1,23 @@
 # shellcheck shell=bash
 
-SCM_THEME_PROMPT_PREFIX="${SCM_THEME_PROMPT_SUFFIX:-}"
-SCM_THEME_PROMPT_DIRTY="${bold_red?} ✗${normal?}"
-SCM_THEME_PROMPT_CLEAN="${bold_green?} ✓${normal?}"
-SCM_GIT_CHAR="${green?}±${normal?}"
+SCM_THEME_PROMPT_PREFIX=${SCM_THEME_PROMPT_SUFFIX}
+SCM_THEME_PROMPT_DIRTY="${bold_red} ✗${normal}"
+SCM_THEME_PROMPT_CLEAN="${bold_green} ✓${normal}"
+SCM_GIT_CHAR="${green}±${normal}"
 
-function mark_prompt() {
-    echo "${green?}\$${normal?}"
+mark_prompt() {
+    echo "${green}\$${normal}"
 }
 
-function user_host_path_prompt() {
-    ps_user="${green?}\u${normal?}";
-    ps_host="${blue?}\H${normal?}";
-    ps_path="${yellow?}\w${normal?}";
-    echo "${ps_user?}@${ps_host?}:${ps_path?}"
+user_host_path_prompt() {
+    ps_user="${green}\u${normal}";
+    ps_host="${blue}\H${normal}";
+    ps_path="${yellow}\w${normal}";
+    echo "$ps_user@$ps_host:$ps_path"
 }
 
-function prompt() {
-  local SCM_PROMPT_FORMAT=' [%s%s]'
+prompt() {
+  SCM_PROMPT_FORMAT=' [%s%s]'
   PS1="$(user_host_path_prompt)$(virtualenv_prompt)$(scm_prompt) $(mark_prompt) "
 }
 
diff --git a/themes/colors.theme.bash b/themes/colors.theme.bash
new file mode 100644
index 00000000..d5044d05
--- /dev/null
+++ b/themes/colors.theme.bash
@@ -0,0 +1,272 @@
+# shellcheck shell=bash
+# shellcheck disable=SC2005
+# shellcheck disable=SC2034
+
+function __ {
+  echo "$@"
+}
+
+function __make_ansi {
+  next=$1; shift
+  echo "\[\e[$(__$next $@)m\]"
+}
+
+function __make_echo {
+  next=$1; shift
+  echo "\033[$(__$next $@)m"
+}
+
+
+function __reset {
+  next=$1; shift
+  out="$(__$next $@)"
+  echo "0${out:+;${out}}"
+}
+
+function __bold {
+  next=$1; shift
+  out="$(__$next $@)"
+  echo "${out:+${out};}1"
+}
+
+function __faint {
+  next=$1; shift
+  out="$(__$next $@)"
+  echo "${out:+${out};}2"
+}
+
+function __italic {
+  next=$1; shift
+  out="$(__$next $@)"
+  echo "${out:+${out};}3"
+}
+
+function __underline {
+  next=$1; shift
+  out="$(__$next $@)"
+  echo "${out:+${out};}4"
+}
+
+function __negative {
+  next=$1; shift
+  out="$(__$next $@)"
+  echo "${out:+${out};}7"
+}
+
+function __crossed {
+  next=$1; shift
+  out="$(__$next $@)"
+  echo "${out:+${out};}8"
+}
+
+
+function __color_normal_fg {
+  echo "3$1"
+}
+
+function __color_normal_bg {
+  echo "4$1"
+}
+
+function __color_bright_fg {
+  echo "9$1"
+}
+
+function __color_bright_bg {
+  echo "10$1"
+}
+
+
+function __color_black   {
+  echo "0"
+}
+
+function __color_red   {
+  echo "1"
+}
+
+function __color_green   {
+  echo "2"
+}
+
+function __color_yellow  {
+  echo "3"
+}
+
+function __color_blue  {
+  echo "4"
+}
+
+function __color_magenta {
+  echo "5"
+}
+
+function __color_cyan  {
+  echo "6"
+}
+
+function __color_white   {
+  echo "7"
+}
+
+function __color_rgb {
+  r=$1 && g=$2 && b=$3
+  [[ $r == $g && $g == $b ]] && echo $(( $r / 11 + 232 )) && return # gray range above 232
+  echo "8;5;$(( ($r * 36  + $b * 6 + $g) / 51 + 16 ))"
+}
+
+function __color {
+  color=$1; shift
+  case "$1" in
+    fg|bg) side="$1"; shift ;;
+    *) side=fg;;
+  esac
+  case "$1" in
+    normal|bright) mode="$1"; shift;;
+    *) mode=normal;;
+  esac
+  [[ $color == "rgb" ]] && rgb="$1 $2 $3"; shift 3
+
+  next=$1; shift
+  out="$(__$next $@)"
+  echo "$(__color_${mode}_${side} $(__color_${color} $rgb))${out:+;${out}}"
+}
+
+
+function __black   {
+  echo "$(__color black $@)"
+}
+
+function __red   {
+  echo "$(__color red $@)"
+}
+
+function __green   {
+  echo "$(__color green $@)"
+}
+
+function __yellow  {
+  echo "$(__color yellow $@)"
+}
+
+function __blue  {
+  echo "$(__color blue $@)"
+}
+
+function __magenta {
+  echo "$(__color magenta $@)"
+}
+
+function __cyan  {
+  echo "$(__color cyan $@)"
+}
+
+function __white   {
+  echo "$(__color white $@)"
+}
+
+function __rgb {
+  echo "$(__color rgb $@)"
+}
+
+
+function __color_parse {
+  next=$1; shift
+  echo "$(__$next $@)"
+}
+
+function color {
+  echo "$(__color_parse make_ansi $@)"
+}
+
+function echo_color {
+  echo "$(__color_parse make_echo $@)"
+}
+
+
+black="\[\e[0;30m\]"
+red="\[\e[0;31m\]"
+green="\[\e[0;32m\]"
+yellow="\[\e[0;33m\]"
+blue="\[\e[0;34m\]"
+purple="\[\e[0;35m\]"
+cyan="\[\e[0;36m\]"
+white="\[\e[0;37m\]"
+orange="\[\e[0;91m\]"
+
+bold_black="\[\e[30;1m\]"
+bold_red="\[\e[31;1m\]"
+bold_green="\[\e[32;1m\]"
+bold_yellow="\[\e[33;1m\]"
+bold_blue="\[\e[34;1m\]"
+bold_purple="\[\e[35;1m\]"
+bold_cyan="\[\e[36;1m\]"
+bold_white="\[\e[37;1m\]"
+bold_orange="\[\e[91;1m\]"
+
+underline_black="\[\e[30;4m\]"
+underline_red="\[\e[31;4m\]"
+underline_green="\[\e[32;4m\]"
+underline_yellow="\[\e[33;4m\]"
+underline_blue="\[\e[34;4m\]"
+underline_purple="\[\e[35;4m\]"
+underline_cyan="\[\e[36;4m\]"
+underline_white="\[\e[37;4m\]"
+underline_orange="\[\e[91;4m\]"
+
+background_black="\[\e[40m\]"
+background_red="\[\e[41m\]"
+background_green="\[\e[42m\]"
+background_yellow="\[\e[43m\]"
+background_blue="\[\e[44m\]"
+background_purple="\[\e[45m\]"
+background_cyan="\[\e[46m\]"
+background_white="\[\e[47;1m\]"
+background_orange="\[\e[101m\]"
+
+normal="\[\e[0m\]"
+reset_color="\[\e[39m\]"
+
+# These colors are meant to be used with `echo -e`
+echo_black="\033[0;30m"
+echo_red="\033[0;31m"
+echo_green="\033[0;32m"
+echo_yellow="\033[0;33m"
+echo_blue="\033[0;34m"
+echo_purple="\033[0;35m"
+echo_cyan="\033[0;36m"
+echo_white="\033[0;37;1m"
+echo_orange="\033[0;91m"
+
+echo_bold_black="\033[30;1m"
+echo_bold_red="\033[31;1m"
+echo_bold_green="\033[32;1m"
+echo_bold_yellow="\033[33;1m"
+echo_bold_blue="\033[34;1m"
+echo_bold_purple="\033[35;1m"
+echo_bold_cyan="\033[36;1m"
+echo_bold_white="\033[37;1m"
+echo_bold_orange="\033[91;1m"
+
+echo_underline_black="\033[30;4m"
+echo_underline_red="\033[31;4m"
+echo_underline_green="\033[32;4m"
+echo_underline_yellow="\033[33;4m"
+echo_underline_blue="\033[34;4m"
+echo_underline_purple="\033[35;4m"
+echo_underline_cyan="\033[36;4m"
+echo_underline_white="\033[37;4m"
+echo_underline_orange="\033[91;4m"
+
+echo_background_black="\033[40m"
+echo_background_red="\033[41m"
+echo_background_green="\033[42m"
+echo_background_yellow="\033[43m"
+echo_background_blue="\033[44m"
+echo_background_purple="\033[45m"
+echo_background_cyan="\033[46m"
+echo_background_white="\033[47;1m"
+echo_background_orange="\033[101m"
+
+echo_normal="\033[0m"
+echo_reset_color="\033[39m"
diff --git a/themes/command_duration.theme.bash b/themes/command_duration.theme.bash
new file mode 100644
index 00000000..cf91785c
--- /dev/null
+++ b/themes/command_duration.theme.bash
@@ -0,0 +1,69 @@
+# shellcheck shell=bash
+
+if [ -z "$BASH_IT_COMMAND_DURATION" ] || [ "$BASH_IT_COMMAND_DURATION" != true ]; then
+	_command_duration() {
+		echo -n
+	}
+	return
+fi
+
+# Define tmp dir and file
+COMMAND_DURATION_TMPDIR="${TMPDIR:-/tmp}"
+COMMAND_DURATION_FILE="${COMMAND_DURATION_FILE:-$COMMAND_DURATION_TMPDIR/bashit_theme_execution_$BASHPID}"
+
+COMMAND_DURATION_ICON=${COMMAND_DURATION_ICON:-'  '}
+COMMAND_DURATION_MIN_SECONDS=${COMMAND_DURATION_MIN_SECONDS:-'1'}
+
+trap _command_duration_delete_temp_file EXIT HUP INT TERM
+
+_command_duration_delete_temp_file() {
+	if [[ -f "$COMMAND_DURATION_FILE" ]]; then
+		rm -f "$COMMAND_DURATION_FILE"
+	fi
+}
+
+_command_duration_pre_exec() {
+	date +%s.%1N > "$COMMAND_DURATION_FILE"
+}
+
+_command_duration() {
+	local command_duration command_start current_time
+	local minutes seconds deciseconds
+	local command_start_sseconds current_time_seconds command_start_deciseconds current_time_deciseconds
+	current_time=$(date +%s.%1N)
+
+	if [[ -f "$COMMAND_DURATION_FILE" ]]; then
+		command_start=$(< "$COMMAND_DURATION_FILE")
+		command_start_sseconds=${command_start%.*}
+		current_time_seconds=${current_time%.*}
+
+		command_start_deciseconds=$((10#${command_start#*.}))
+		current_time_deciseconds=$((10#${current_time#*.}))
+
+		# seconds
+		command_duration=$((current_time_seconds - command_start_sseconds))
+
+		if ((current_time_deciseconds >= command_start_deciseconds)); then
+			deciseconds=$(((current_time_deciseconds - command_start_deciseconds)))
+		else
+			((command_duration -= 1))
+			deciseconds=$((10 - ((command_start_deciseconds - current_time_deciseconds))))
+		fi
+		command rm "$COMMAND_DURATION_FILE"
+	else
+		command_duration=0
+	fi
+
+	if ((command_duration > 0)); then
+		minutes=$((command_duration / 60))
+		seconds=$((command_duration % 60))
+	fi
+
+	if ((minutes > 0)); then
+		printf "%s%s%dm %ds" "$COMMAND_DURATION_ICON" "$COMMAND_DURATION_COLOR" "$minutes" "$seconds"
+	elif ((seconds >= COMMAND_DURATION_MIN_SECONDS)); then
+		printf "%s%s%d.%01ds" "$COMMAND_DURATION_ICON" "$COMMAND_DURATION_COLOR" "$seconds" "$deciseconds"
+	fi
+}
+
+preexec_functions+=(_command_duration_pre_exec)
diff --git a/themes/doubletime_multiline/doubletime_multiline.theme.bash b/themes/doubletime_multiline/doubletime_multiline.theme.bash
index f2dfe43a..18213571 100644
--- a/themes/doubletime_multiline/doubletime_multiline.theme.bash
+++ b/themes/doubletime_multiline/doubletime_multiline.theme.bash
@@ -8,7 +8,7 @@ function prompt_setter() {
   PS1="
 $(clock_prompt) $(scm_char) [$THEME_PROMPT_HOST_COLOR\u@${THEME_PROMPT_HOST}$reset_color] $(virtualenv_prompt)$(ruby_version_prompt)
 \w
-$(scm_prompt)$reset_color $ "
+$(doubletime_scm_prompt)$reset_color $ "
   PS2='> '
   PS4='+ '
 }
diff --git a/themes/doubletime_multiline_pyonly/doubletime_multiline_pyonly.theme.bash b/themes/doubletime_multiline_pyonly/doubletime_multiline_pyonly.theme.bash
index 0fe0eff4..9bc4c334 100644
--- a/themes/doubletime_multiline_pyonly/doubletime_multiline_pyonly.theme.bash
+++ b/themes/doubletime_multiline_pyonly/doubletime_multiline_pyonly.theme.bash
@@ -8,7 +8,7 @@ function prompt_setter() {
   PS1="
 $(clock_prompt) $(scm_char) [$THEME_PROMPT_HOST_COLOR\u@${THEME_PROMPT_HOST}$reset_color] $(virtualenv_prompt)
 \w
-$(scm_prompt)$reset_color $ "
+$(doubletime_scm_prompt)$reset_color $ "
   PS2='> '
   PS4='+ '
 }
diff --git a/themes/easy/easy.theme.bash b/themes/easy/easy.theme.bash
index 3cb171d7..7e2e3389 100644
--- a/themes/easy/easy.theme.bash
+++ b/themes/easy/easy.theme.bash
@@ -1,22 +1,21 @@
 # shellcheck shell=bash
 # shellcheck disable=SC2034 # Expected behavior for themes.
+# shellcheck disable=SC2154 #TODO: fix these all.
 
-SCM_THEME_PROMPT_PREFIX="${bold_green?}[ ${normal?}"
-SCM_THEME_PROMPT_SUFFIX="${bold_green?} ] "
-SCM_THEME_PROMPT_DIRTY=" ${red?}✗"
-SCM_THEME_PROMPT_CLEAN=" ${bold_green?}✓"
+SCM_THEME_PROMPT_PREFIX="${bold_green}[ ${normal}"
+SCM_THEME_PROMPT_SUFFIX="${bold_green} ] "
+SCM_THEME_PROMPT_DIRTY=" ${red}✗"
+SCM_THEME_PROMPT_CLEAN=" ${bold_green}✓"
 
-function prompt_command() {
-	local scm_prompt_info
-	if [ "${USER:-${LOGNAME?}}" = root ]; then
-		cursor_color="${bold_red?}"
-		user_color="${green?}"
+prompt_command() {
+	if [ "$(whoami)" = root ]; then
+		cursor_color="${bold_red}"
+		user_color="${green}"
 	else
-		cursor_color="${bold_green?}"
-		user_color="${white?}"
+		cursor_color="${bold_green}"
+		user_color="${white}"
 	fi
-	scm_prompt_info="$(scm_prompt_info)"
-	PS1="${user_color}\u${normal?}@${white?}\h ${bold_black?}\w\n${reset_color?}${scm_prompt_info}${cursor_color}❯ ${normal?}"
+	PS1="${user_color}\u${normal}@${white}\h ${bold_black}\w\n${reset_color}$(scm_prompt_info)${cursor_color}❯ ${normal}"
 }
 
 safe_append_prompt_command prompt_command
diff --git a/themes/essential/essential.theme.bash b/themes/essential/essential.theme.bash
index 05e84314..ae988733 100644
--- a/themes/essential/essential.theme.bash
+++ b/themes/essential/essential.theme.bash
@@ -1,93 +1,96 @@
-# shellcheck shell=bash
+#!/usr/bin/env bash
+
+# https://github.com/koalaman/shellcheck/wiki/Sc2154
+# shellcheck disable=SC2154
 
 function _user-prompt() {
-	local -r user='\u'
-
-	if [[ "${EUID}" -eq 0 ]]; then
-		# Privileged users:
-		local -r user_color="${bold_red?}"
-	else
-		# Standard users:
-		local -r user_color="${bold_green?}"
-	fi
-
-	# Print the current user's name (colored according to their current EUID):
-	printf '%b%s%b' "${user_color}" "${user}" "${normal?}"
+  local -r user='\\u'
+
+  if [[ "${EUID}" -eq 0 ]]; then
+    # Privileged users:
+    local -r user_color="${bold_red}"
+  else
+    # Standard users:
+    local -r user_color="${bold_green}"
+  fi
+
+  # Print the current user's name (colored according to their current EUID):
+  echo -e "${user_color}${user}${normal}"
 }
 
 function _host-prompt() {
-	local -r host='\h'
-
-	# Check whether or not $SSH_TTY is set:
-	if [[ -z "${SSH_TTY:-}" ]]; then
-		# For local hosts, set the host's prompt color to blue:
-		local -r host_color="${bold_blue?}"
-	else
-		# For remote hosts, set the host's prompt color to red:
-		local -r host_color="${bold_red?}"
-	fi
-
-	# Print the current hostname (colored according to $SSH_TTY's status):
-	printf '%b%s%b' "${host_color}" "${host}" "${normal?}"
+  local -r host='\\h'
+
+  # Check whether or not $SSH_TTY is set:
+  if [[ -z "${SSH_TTY}" ]]; then
+    # For local hosts, set the host's prompt color to blue:
+    local -r host_color="${bold_blue}"
+  else
+    # For remote hosts, set the host's prompt color to red:
+    local -r host_color="${bold_red}"
+  fi
+
+  # Print the current hostname (colored according to $SSH_TTY's status):
+  echo -e "${host_color}${host}${normal}"
 }
 
 function _user-at-host-prompt() {
-	# Concatenate the user and host prompts into: user@host:
-	_user-prompt
-	printf '%b@' "${bold_white?}"
-	_host-prompt
+  # Concatenate the user and host prompts into: user@host:
+  echo -e "$(_user-prompt)${bold_white}@$(_host-prompt)"
 }
 
 function _exit-status-prompt() {
-	local -r prompt_string="${1}"
-	local -r exit_status="${2}"
-
-	# Check the exit status of the last command captured by $exit_status:
-	if [[ "${exit_status}" -eq 0 ]]; then
-		# For commands that return an exit status of zero, set the exit status's
-		# notifier to green:
-		local -r exit_status_color="${bold_green?}"
-	else
-		# For commands that return a non-zero exit status, set the exit status's
-		# notifier to red:
-		local -r exit_status_color="${bold_red?}"
-	fi
-
-	if [[ "${prompt_string}" -eq 1 ]]; then
-		# $PS1:
-		printf '%b +%b' "${exit_status_color}" "${normal?} "
-	elif [[ "${prompt_string}" -eq 2 ]]; then
-		# $PS2:
-		printf '%b |%b' "${exit_status_color}" "${normal?} "
-	else
-		# Default:
-		printf '%b ?%b' "${exit_status_color}" "${normal?} "
-	fi
+  local -r prompt_string="${1}"
+  local -r exit_status="${2}"
+
+  # Check the exit status of the last command captured by $exit_status:
+  if [[ "${exit_status}" -eq 0 ]]; then
+    # For commands that return an exit status of zero, set the exit status's
+    # notifier to green:
+    local -r exit_status_color="${bold_green}"
+  else
+    # For commands that return a non-zero exit status, set the exit status's
+    # notifier to red:
+    local -r exit_status_color="${bold_red}"
+  fi
+
+  echo -ne "${exit_status_color}"
+  if [[ "${prompt_string}" -eq 1 ]]; then
+    # $PS1:
+    echo -e " +${normal} "
+  elif [[ "${prompt_string}" -eq 2 ]]; then
+    # $PS2:
+    echo -e " |${normal} "
+  else
+    # Default:
+    echo -e " ?${normal} "
+  fi
 }
 
 function _ps1() {
-	local -r time='\t'
-	local -r pwd='\w'
+  local -r time='\\t'
 
-	printf '%b%s ' "${bold_white?}" "${time}"
-	_user-at-host-prompt
-	printf '%b:%b%s\n' "${bold_white?}" "${normal?}" "${pwd}"
-	_exit-status-prompt 1 "${exit_status}"
+  echo -ne "${bold_white}${time} "
+  echo -ne "$(_user-at-host-prompt)"
+  echo -e "${bold_white}:${normal}${PWD}"
+  echo -e "$(_exit-status-prompt 1 "${exit_status}")"
 }
 
 function _ps2() {
-	_exit-status-prompt 2 "${exit_status}"
+  echo -e "$(_exit-status-prompt 2 "${exit_status}")"
 }
 
 function prompt_command() {
-	# Capture the exit status of the last command:
-	local -r exit_status="${?}"
+  # Capture the exit status of the last command:
+  local -r exit_status="${?}"
 
-	# Build the $PS1 prompt:
-	PS1="$(_ps1)"
+  # Build the $PS1 prompt:
+  PS1="$(_ps1)"
 
-	# Build the $PS2 prompt:
-	PS2="$(_ps2)"
+  # Build the $PS2 prompt:
+  PS2="$(_ps2)"
 }
 
 safe_append_prompt_command prompt_command
+
+# vim: sw=2 ts=2 et:
diff --git a/themes/githelpers.theme.bash b/themes/githelpers.theme.bash
index 719effec..ba089392 100644
--- a/themes/githelpers.theme.bash
+++ b/themes/githelpers.theme.bash
@@ -1,106 +1,99 @@
-# shellcheck shell=bash
+#!/usr/bin/env bash
 
-function _git-symbolic-ref() {
-	git symbolic-ref -q HEAD 2> /dev/null
+function _git-symbolic-ref {
+ git symbolic-ref -q HEAD 2> /dev/null
 }
 
 # When on a branch, this is often the same as _git-commit-description,
 # but this can be different when two branches are pointing to the
 # same commit. _git-branch is used to explicitly choose the checked-out
 # branch.
-function _git-branch() {
-	if [[ "${SCM_GIT_GITSTATUS_RAN:-}" == "true" ]]; then
-		if [[ -n "${VCS_STATUS_LOCAL_BRANCH:-}" ]]; then
-			echo "${VCS_STATUS_LOCAL_BRANCH}"
-		else
-			return 1
-		fi
-	else
-		git symbolic-ref -q --short HEAD 2> /dev/null || return 1
-	fi
+function _git-branch {
+  if [[ "${SCM_GIT_GITSTATUS_RAN}" == "true" ]]; then
+    test -n "${VCS_STATUS_LOCAL_BRANCH}" && echo "${VCS_STATUS_LOCAL_BRANCH}" || return 1
+  else
+    git symbolic-ref -q --short HEAD 2> /dev/null || return 1
+  fi
 }
 
-function _git-tag() {
-	if [[ "${SCM_GIT_GITSTATUS_RAN:-}" == "true" ]]; then
-		if [[ -n "${VCS_STATUS_TAG:-}" ]]; then
-			echo "${VCS_STATUS_TAG}"
-		fi
-	else
-		git describe --tags --exact-match 2> /dev/null
-	fi
+function _git-tag {
+  if [[ "${SCM_GIT_GITSTATUS_RAN}" == "true" ]]; then
+    test -n "${VCS_STATUS_TAG}" && echo "${VCS_STATUS_TAG}"
+  else
+    git describe --tags --exact-match 2> /dev/null
+  fi
 }
 
-function _git-commit-description() {
-	git describe --contains --all 2> /dev/null
+function _git-commit-description {
+  git describe --contains --all 2> /dev/null
 }
 
-function _git-short-sha() {
-	if [[ "${SCM_GIT_GITSTATUS_RAN:-}" == "true" ]]; then
-		echo "${VCS_STATUS_COMMIT:0:7}"
-	else
-		git rev-parse --short HEAD
-	fi
+function _git-short-sha {
+  if [[ "${SCM_GIT_GITSTATUS_RAN}" == "true" ]]; then
+    echo ${VCS_STATUS_COMMIT:0:7}
+  else
+    git rev-parse --short HEAD
+  fi
 }
 
 # Try the checked-out branch first to avoid collision with branches pointing to the same ref.
-function _git-friendly-ref() {
-	if [[ "${SCM_GIT_GITSTATUS_RAN:-}" == "true" ]]; then
-		_git-branch || _git-tag || _git-short-sha # there is no tag based describe output in gitstatus
-	else
-		_git-branch || _git-tag || _git-commit-description || _git-short-sha
-	fi
+function _git-friendly-ref {
+  if [[ "${SCM_GIT_GITSTATUS_RAN}" == "true" ]]; then
+    _git-branch || _git-tag || _git-short-sha # there is no tag based describe output in gitstatus
+  else
+    _git-branch || _git-tag || _git-commit-description || _git-short-sha
+  fi
 }
 
-function _git-num-remotes() {
-	git remote | wc -l
+function _git-num-remotes {
+  git remote | wc -l
 }
 
-function _git-upstream() {
-	local ref
-	ref="$(_git-symbolic-ref)" || return 1
-	git for-each-ref --format="%(upstream:short)" "${ref}"
+function _git-upstream {
+  local ref
+  ref="$(_git-symbolic-ref)" || return 1
+  git for-each-ref --format="%(upstream:short)" "${ref}"
 }
 
-function _git-upstream-remote() {
-	local upstream branch
-	upstream="$(_git-upstream)" || return 1
+function _git-upstream-remote {
+  local upstream
+  upstream="$(_git-upstream)" || return 1
 
-	branch="$(_git-upstream-branch)" || return 1
-	echo "${upstream%"/${branch}"}"
+  local branch
+  branch="$(_git-upstream-branch)" || return 1
+  echo "${upstream%"/${branch}"}"
 }
 
-function _git-upstream-branch() {
-	local ref
-	ref="$(_git-symbolic-ref)" || return 1
+function _git-upstream-branch {
+  local ref
+  ref="$(_git-symbolic-ref)" || return 1
 
-	# git versions < 2.13.0 do not support "strip" for upstream format
-	# regex replacement gives the wrong result for any remotes with slashes in the name,
-	# so only use when the strip format fails.
-	git for-each-ref --format="%(upstream:strip=3)" "${ref}" 2> /dev/null || git for-each-ref --format="%(upstream)" "${ref}" | sed -e "s/.*\/.*\/.*\///"
+  # git versions < 2.13.0 do not support "strip" for upstream format
+  # regex replacement gives the wrong result for any remotes with slashes in the name,
+  # so only use when the strip format fails.
+  git for-each-ref --format="%(upstream:strip=3)" "${ref}" 2> /dev/null || git for-each-ref --format="%(upstream)" "${ref}" | sed -e "s/.*\/.*\/.*\///"
 }
 
-function _git-upstream-behind-ahead() {
-	git rev-list --left-right --count "$(_git-upstream)...HEAD" 2> /dev/null
+function _git-upstream-behind-ahead {
+  git rev-list --left-right --count "$(_git-upstream)...HEAD" 2> /dev/null
 }
 
-function _git-upstream-branch-gone() {
-	[[ "$(git status -s -b | sed -e 's/.* //')" == "[gone]" ]]
+function _git-upstream-branch-gone {
+  [[ "$(git status -s -b | sed -e 's/.* //')" == "[gone]" ]]
 }
 
-function _git-hide-status() {
-	[[ "$(git config --get bash-it.hide-status)" == "1" ]]
+function _git-hide-status {
+  [[ "$(git config --get bash-it.hide-status)" == "1" ]]
 }
 
-function _git-status() {
-	local git_status_flags=
-	if [[ "${SCM_GIT_IGNORE_UNTRACKED:-}" == "true" ]]; then
-		git_status_flags='-uno'
-	fi
-	git status --porcelain "${git_status_flags:---}" 2> /dev/null
+function _git-status {
+  local git_status_flags=
+  [[ "${SCM_GIT_IGNORE_UNTRACKED}" = "true" ]] && git_status_flags='-uno' || true
+  git status --porcelain ${git_status_flags} 2> /dev/null
 }
 
-function _git-status-counts() {
-	_git-status | awk '
+function _git-status-counts {
+  _git-status | awk '
   BEGIN {
     untracked=0;
     unstaged=0;
@@ -123,51 +116,85 @@ function _git-status-counts() {
   }'
 }
 
-function _git-remote-info() {
-	local same_branch_name="" branch_prefix
-	# prompt handling only, reimplement because patching the routine below gets ugly
-	if [[ "${SCM_GIT_GITSTATUS_RAN:-}" == "true" ]]; then
-		[[ "${VCS_STATUS_REMOTE_NAME?}" == "" ]] && return
-		[[ "${VCS_STATUS_LOCAL_BRANCH?}" == "${VCS_STATUS_REMOTE_BRANCH?}" ]] && same_branch_name=true
-		# no multiple remote support in gitstatusd
-		if [[ "${SCM_GIT_SHOW_REMOTE_INFO:-}" == "true" || "${SCM_GIT_SHOW_REMOTE_INFO:-}" == "auto" ]]; then
-			if [[ ${same_branch_name:-} != "true" ]]; then
-				remote_info="${VCS_STATUS_REMOTE_NAME?}/${VCS_STATUS_REMOTE_BRANCH?}"
-			else
-				remote_info="${VCS_STATUS_REMOTE_NAME?}"
-			fi
-		elif [[ ${same_branch_name:-} != "true" ]]; then
-			remote_info="${VCS_STATUS_REMOTE_BRANCH?}"
-		fi
-		if [[ -n "${remote_info:-}" ]]; then
-			# no support for gone remote branches in gitstatusd
-			branch_prefix="${SCM_THEME_BRANCH_TRACK_PREFIX:-}"
-			echo "${branch_prefix}${remote_info:-}"
-		fi
-	else
-		[[ "$(_git-upstream)" == "" ]] && return
-
-		[[ "$(_git-branch)" == "$(_git-upstream-branch)" ]] && same_branch_name=true
-		if [[ ("${SCM_GIT_SHOW_REMOTE_INFO}" == "auto" && "$(_git-num-remotes)" -ge 2) ||
-		"${SCM_GIT_SHOW_REMOTE_INFO}" == "true" ]]; then
-			if [[ ${same_branch_name:-} != "true" ]]; then
-				# shellcheck disable=SC2016
-				remote_info='$(_git-upstream)'
-			else
-				remote_info="$(_git-upstream-remote)"
-			fi
-		elif [[ ${same_branch_name:-} != "true" ]]; then
-			# shellcheck disable=SC2016
-			remote_info='$(_git-upstream-branch)'
-		fi
-		if [[ -n "${remote_info:-}" ]]; then
-			local branch_prefix
-			if _git-upstream-branch-gone; then
-				branch_prefix="${SCM_THEME_BRANCH_GONE_PREFIX:-}"
-			else
-				branch_prefix="${SCM_THEME_BRANCH_TRACK_PREFIX:-}"
-			fi
-			echo "${branch_prefix}${remote_info:-}"
-		fi
-	fi
+function _git-remote-info {
+
+  # prompt handling only, reimplement because patching the routine below gets ugly
+  if [[ "${SCM_GIT_GITSTATUS_RAN}" == "true" ]]; then
+    [[ "${VCS_STATUS_REMOTE_NAME}" == "" ]] && return
+    [[ "${VCS_STATUS_LOCAL_BRANCH}" == "${VCS_STATUS_REMOTE_BRANCH}" ]] && local same_branch_name=true
+    local same_branch_name=
+    [[ "${VCS_STATUS_LOCAL_BRANCH}" == "${VCS_STATUS_REMOTE_BRANCH}" ]] && same_branch_name=true
+    # no multiple remote support in gitstatusd
+    if [[ "${SCM_GIT_SHOW_REMOTE_INFO}" = "true" || "${SCM_GIT_SHOW_REMOTE_INFO}" = "auto" ]]; then
+      if [[ "${same_branch_name}" != "true" ]]; then
+        remote_info="${VCS_STATUS_REMOTE_NAME}/${VCS_STATUS_REMOTE_BRANCH}"
+      else
+        remote_info="${VCS_STATUS_REMOTE_NAME}"
+      fi
+    elif [[ ${same_branch_name} != "true" ]]; then
+      remote_info="${VCS_STATUS_REMOTE_BRANCH}"
+    fi
+    if [[ -n "${remote_info}" ]];then
+      # no support for gone remote branches in gitstatusd
+      local branch_prefix="${SCM_THEME_BRANCH_TRACK_PREFIX}"
+      echo "${branch_prefix}${remote_info}"
+    fi
+  else
+    [[ "$(_git-upstream)" == "" ]] && return
+
+    [[ "$(_git-branch)" == "$(_git-upstream-branch)" ]] && local same_branch_name=true
+    local same_branch_name=
+    [[ "$(_git-branch)" == "$(_git-upstream-branch)" ]] && same_branch_name=true
+    if [[ ("${SCM_GIT_SHOW_REMOTE_INFO}" = "auto" && "$(_git-num-remotes)" -ge 2) ||
+           "${SCM_GIT_SHOW_REMOTE_INFO}" = "true" ]]; then
+      if [[ "${same_branch_name}" != "true" ]]; then
+        remote_info="\$(_git-upstream)"
+      else
+        remote_info="$(_git-upstream-remote)"
+      fi
+    elif [[ ${same_branch_name} != "true" ]]; then
+      remote_info="\$(_git-upstream-branch)"
+    fi
+    if [[ -n "${remote_info}" ]];then
+      local branch_prefix
+      if _git-upstream-branch-gone; then
+        branch_prefix="${SCM_THEME_BRANCH_GONE_PREFIX}"
+      else
+        branch_prefix="${SCM_THEME_BRANCH_TRACK_PREFIX}"
+      fi
+      echo "${branch_prefix}${remote_info}"
+    fi
+  fi
+}
+
+# Unused by bash-it, present for API compatibility
+function git_status_summary {
+  awk '
+  BEGIN {
+    untracked=0;
+    unstaged=0;
+    staged=0;
+  }
+  {
+    if (!after_first && $0 ~ /^##.+/) {
+      print $0
+      seen_header = 1
+    } else if ($0 ~ /^\?\? .+/) {
+      untracked += 1
+    } else {
+      if ($0 ~ /^.[^ ] .+/) {
+        unstaged += 1
+      }
+      if ($0 ~ /^[^ ]. .+/) {
+        staged += 1
+      }
+    }
+    after_first = 1
+  }
+  END {
+    if (!seen_header) {
+      print
+    }
+    print untracked "\t" unstaged "\t" staged
+  }'
 }
diff --git a/themes/gitline/powerline.base.bash b/themes/gitline/powerline.base.bash
index 7f6f3130..4f6b17b0 100644
--- a/themes/gitline/powerline.base.bash
+++ b/themes/gitline/powerline.base.bash
@@ -1,3 +1,5 @@
+# Sudo check after every command
+THEME_CHECK_SUDO=${THEME_CHECK_SUDO:=true}
 
 #To set color for foreground and background
 function set_color {
diff --git a/themes/norbu/norbu.theme.bash b/themes/norbu/norbu.theme.bash
index def58d81..184c13c9 100644
--- a/themes/norbu/norbu.theme.bash
+++ b/themes/norbu/norbu.theme.bash
@@ -1,23 +1,21 @@
-# shellcheck shell=bash
-# shellcheck disable=SC2034 # Expected behavior for themes.
+#!/usr/bin/env bash
 
-function set_prompt_symbol() {
-	if [[ $1 -eq 0 ]]; then
-		prompt_symbol=">_"
-	else
-		prompt_symbol="${orange?}>_${normal?}"
-	fi
+function set_prompt_symbol () {
+    if test $1 -eq 0 ; then
+	PROMPT_SYMBOL=">_"
+    else
+	PROMPT_SYMBOL="${orange}>_${normal}"
+    fi
 }
-
 function prompt_command() {
-	local ret_val="$?" prompt_symbol scm_prompt_info
-	if [[ -n "${VIRTUAL_ENV:-}" ]]; then
-		PYTHON_VIRTUALENV="${bold_yellow?}[${VIRTUAL_ENV##*/}]"
-	fi
+    set_prompt_symbol $?
+    if test -z "$VIRTUAL_ENV" ; then
+	PYTHON_VIRTUALENV=""
+    else
+	PYTHON_VIRTUALENV="${bold_yellow}[`basename \"$VIRTUAL_ENV\"`]"
+    fi
 
-	scm_prompt_info="$(scm_prompt_info)"
-	set_prompt_symbol "${ret_val}"
-	PS1="${bold_orange?}${PYTHON_VIRTUALENV:-}${reset_color?}${bold_green?}[\w]${bold_blue?}[${scm_prompt_info}]${normal?} \n${prompt_symbol} "
+    PS1="${bold_orange}${PYTHON_VIRTUALENV}${reset_color}${bold_green}[\w]${bold_blue}\[$(scm_prompt_info)\]${normal} \n${PROMPT_SYMBOL} "
 }
 
 # scm themeing
diff --git a/themes/p4helpers.theme.bash b/themes/p4helpers.theme.bash
index 30b520cc..27a777ac 100644
--- a/themes/p4helpers.theme.bash
+++ b/themes/p4helpers.theme.bash
@@ -1,18 +1,18 @@
-# shellcheck shell=bash
+#!/usr/bin/env bash
 
 function _p4-opened {
-	timeout 2.0s p4 opened -s 2> /dev/null
+  timeout 2.0s p4 opened -s 2> /dev/null
 }
 
 function _p4-opened-counts {
-	# Return the following counts seperated by tabs:
-	#  - count of opened files
-	#  - count of pending changesets (other than defaults)
-	#  - count of files in the default changeset
-	#  - count of opened files in add mode
-	#  - count of opened files in edit mode
-	#  - count of opened files in delete mode
-	_p4-opened | awk '
+  # Return the following counts seperated by tabs:
+  #  - count of opened files
+  #  - count of pending changesets (other than defaults)
+  #  - count of files in the default changeset
+  #  - count of opened files in add mode
+  #  - count of opened files in edit mode
+  #  - count of opened files in delete mode
+  _p4-opened | awk '
   BEGIN {
     opened=0;
     type_array["edit"]=0;
diff --git a/themes/pete/pete.theme.bash b/themes/pete/pete.theme.bash
index e55ad6eb..d29553f8 100644
--- a/themes/pete/pete.theme.bash
+++ b/themes/pete/pete.theme.bash
@@ -1,16 +1,11 @@
 # shellcheck shell=bash
-# shellcheck disable=SC2034 # Expected behavior for themes.
 
-function prompt_setter() {
-	local clock_prompt scm_char scm_prompt_info ruby_version_prompt
-	clock_prompt="$(clock_prompt)"
-	scm_char="$(scm_char)"
-	scm_prompt_info="$(scm_prompt_info)"
-	ruby_version_prompt="$(ruby_version_prompt)"
-	_save-and-reload-history 1 # Save history
-	PS1="(${clock_prompt}) ${scm_char} [${blue?}\u${reset_color?}@${green?}\H${reset_color?}] ${yellow?}\w${reset_color?}${scm_prompt_info}${ruby_version_prompt} ${reset_color?} "
-	PS2='> '
-	PS4='+ '
+prompt_setter() {
+  # Save history
+  _save-and-reload-history 1
+  PS1="($(clock_prompt)) $(scm_char) [$blue\u$reset_color@$green\H$reset_color] $yellow\w${reset_color}$(scm_prompt_info)$(ruby_version_prompt) $reset_color "
+  PS2='> '
+  PS4='+ '
 }
 
 safe_append_prompt_command prompt_setter
diff --git a/themes/powerline-plain/powerline-plain.base.bash b/themes/powerline-plain/powerline-plain.base.bash
index ce91ef89..03a857f1 100644
--- a/themes/powerline-plain/powerline-plain.base.bash
+++ b/themes/powerline-plain/powerline-plain.base.bash
@@ -52,7 +52,7 @@ function __powerline_prompt_command {
     LEFT_PROMPT+=" "
   fi
 
-  PS1="${LEFT_PROMPT}${PROMPT_AFTER}"
+  PS1="${LEFT_PROMPT}${PROMPT_AFTER}\n\$ "
 
   ## cleanup ##
   unset LAST_SEGMENT_COLOR \
diff --git a/themes/powerline-plain/powerline-plain.theme.bash b/themes/powerline-plain/powerline-plain.theme.bash
index 6ff68e8f..36369633 100644
--- a/themes/powerline-plain/powerline-plain.theme.bash
+++ b/themes/powerline-plain/powerline-plain.theme.bash
@@ -2,7 +2,10 @@
 
 . "$BASH_IT/themes/powerline-plain/powerline-plain.base.bash"
 
-USER_INFO_SSH_CHAR=${POWERLINE_USER_INFO_SSH_CHAR:="⌁ "}
+# • 🐍 Python
+# • 💻 Twitch
+# • 🔊 Soundeffects
+USER_INFO_SSH_CHAR=${POWERLINE_USER_INFO_SSH_CHAR:="💻 "}
 USER_INFO_THEME_PROMPT_COLOR=${POWERLINE_USER_INFO_COLOR:=32}
 USER_INFO_THEME_PROMPT_COLOR_SUDO=${POWERLINE_USER_INFO_COLOR_SUDO:=202}
 
@@ -14,13 +17,13 @@ POWERLINE_COMPACT_AFTER_LAST_SEGMENT=${POWERLINE_COMPACT_AFTER_LAST_SEGMENT:=${P
 POWERLINE_COMPACT_PROMPT=${POWERLINE_COMPACT_PROMPT:=${POWERLINE_COMPACT}}
 POWERLINE_PROMPT_AFTER=${POWERLINE_PROMPT_AFTER:-""}
 
-PYTHON_VENV_CHAR=${POWERLINE_PYTHON_VENV_CHAR:="ⓔ "}
-CONDA_PYTHON_VENV_CHAR=${POWERLINE_CONDA_PYTHON_VENV_CHAR:="ⓔ "}
+PYTHON_VENV_CHAR=${POWERLINE_PYTHON_VENV_CHAR:="🐍 "}
+CONDA_PYTHON_VENV_CHAR=${POWERLINE_CONDA_PYTHON_VENV_CHAR:="🐍 "}
 PYTHON_VENV_THEME_PROMPT_COLOR=${POWERLINE_PYTHON_VENV_COLOR:=35}
 
 SCM_NONE_CHAR=""
-SCM_GIT_CHAR=${POWERLINE_SCM_GIT_CHAR:="⎇  "}
-SCM_HG_CHAR=${POWERLINE_SCM_HG_CHAR:="☿ "}
+SCM_GIT_CHAR=${POWERLINE_SCM_GIT_CHAR:=" "}
+SCM_HG_CHAR=${POWERLINE_SCM_HG_CHAR:=" "}
 SCM_THEME_PROMPT_CLEAN=""
 SCM_THEME_PROMPT_DIRTY=""
 SCM_THEME_PROMPT_CLEAN_COLOR=${POWERLINE_SCM_CLEAN_COLOR:=25}
@@ -47,9 +50,6 @@ TERRAFORM_CHAR=${POWERLINE_TERRAFORM_CHAR:="❲t❳ "}
 KUBERNETES_CONTEXT_THEME_CHAR=${POWERLINE_KUBERNETES_CONTEXT_CHAR:="⎈ "}
 KUBERNETES_CONTEXT_THEME_PROMPT_COLOR=${POWERLINE_KUBERNETES_CONTEXT_COLOR:=26}
 
-KUBERNETES_NAMESPACE_THEME_CHAR=${POWERLINE_KUBERNETES_NAMESPACE_CHAR:="⎈ "}
-KUBERNETES_NAMESPACE_THEME_PROMPT_COLOR=${POWERLINE_KUBERNETES_NAMESPACE_COLOR:=60}
-
 AWS_PROFILE_CHAR=${POWERLINE_AWS_PROFILE_CHAR:="❲aws❳ "}
 AWS_PROFILE_PROMPT_COLOR=${POWERLINE_AWS_PROFILE_COLOR:=208}
 
@@ -89,6 +89,7 @@ COMMAND_NUMBER_THEME_PROMPT_CHAR=${POWERLINE_COMMAND_NUMBER_CHAR:="#"}
 GCLOUD_THEME_PROMPT_COLOR=${POWERLINE_GCLOUD_COLOR:=161}
 GCLOUD_CHAR=${POWERLINE_GCLOUD_CHAR:="❲G❳ "}
 
-POWERLINE_PROMPT=${POWERLINE_PROMPT:="user_info scm python_venv ruby node cwd"}
+#POWERLINE_PROMPT=${POWERLINE_PROMPT:="user_info scm python_venv ruby node cwd"}
+POWERLINE_PROMPT=${POWERLINE_PROMPT:="user_info scm python_venv ruby cwd"}
 
 safe_append_prompt_command __powerline_prompt_command
diff --git a/themes/powerline/powerline.base.bash b/themes/powerline/powerline.base.bash
index 84469e87..7da15cfd 100644
--- a/themes/powerline/powerline.base.bash
+++ b/themes/powerline/powerline.base.bash
@@ -1,12 +1,16 @@
 # shellcheck shell=bash
 # shellcheck disable=SC2034 # Expected behavior for themes.
+# shellcheck disable=SC2154 #TODO: fix these all.
+
+# Define this here so it can be used by all of the Powerline themes
+THEME_CHECK_SUDO=${THEME_CHECK_SUDO:=true}
 
 function set_color() {
-	local fg='' bg=''
-	if [[ "${1:-}" != "-" ]]; then
+	set +u
+	if [[ "${1}" != "-" ]]; then
 		fg="38;5;${1}"
 	fi
-	if [[ "${2:-}" != "-" ]]; then
+	if [[ "${2}" != "-" ]]; then
 		bg="48;5;${2}"
 		[[ -n "${fg}" ]] && bg=";${bg}"
 	fi
@@ -95,13 +99,14 @@ function __powerline_k8s_namespace_prompt() {
 }
 
 function __powerline_python_venv_prompt() {
+	set +u
 	local python_venv=""
 
-	if [[ -n "${CONDA_DEFAULT_ENV:-}" ]]; then
+	if [[ -n "${CONDA_DEFAULT_ENV}" ]]; then
 		python_venv="${CONDA_DEFAULT_ENV}"
 		PYTHON_VENV_CHAR=${CONDA_PYTHON_VENV_CHAR}
-	elif [[ -n "${VIRTUAL_ENV:-}" ]]; then
-		python_venv="${VIRTUAL_ENV##*/}"
+	elif [[ -n "${VIRTUAL_ENV}" ]]; then
+		python_venv=$(basename "${VIRTUAL_ENV}")
 	fi
 
 	[[ -n "${python_venv}" ]] && echo "${PYTHON_VENV_CHAR}${python_venv}|${PYTHON_VENV_THEME_PROMPT_COLOR}"
@@ -132,7 +137,7 @@ function __powerline_scm_prompt() {
 		elif [[ "${SCM_SVN_CHAR}" == "${SCM_CHAR}" ]]; then
 			scm_prompt+="${SCM_CHAR}${SCM_BRANCH}${SCM_STATE}"
 		fi
-		echo "${scm_prompt?}|${color}"
+		echo "$(eval "echo ${scm_prompt}")${scm}|${color}"
 	fi
 }
 
@@ -238,12 +243,12 @@ function __powerline_left_segment() {
 		# Since the previous segment wasn't the last segment, add padding, if needed
 		#
 		if [[ "${POWERLINE_COMPACT_BEFORE_SEPARATOR}" -eq 0 ]]; then
-			LEFT_PROMPT+="$(set_color - "${LAST_SEGMENT_COLOR}") ${normal?}"
+			LEFT_PROMPT+="$(set_color - "${LAST_SEGMENT_COLOR}") ${normal}"
 		fi
 		if [[ "${LAST_SEGMENT_COLOR}" -eq "${params[1]}" ]]; then
-			LEFT_PROMPT+="$(set_color - "${LAST_SEGMENT_COLOR}")${POWERLINE_LEFT_SEPARATOR_SOFT}${normal?}"
+			LEFT_PROMPT+="$(set_color - "${LAST_SEGMENT_COLOR}")${POWERLINE_LEFT_SEPARATOR_SOFT}${normal}"
 		else
-			LEFT_PROMPT+="$(set_color "${LAST_SEGMENT_COLOR}" "${params[1]}")${POWERLINE_LEFT_SEPARATOR}${normal?}"
+			LEFT_PROMPT+="$(set_color "${LAST_SEGMENT_COLOR}" "${params[1]}")${POWERLINE_LEFT_SEPARATOR}${normal}"
 		fi
 	fi
 
@@ -253,7 +258,7 @@ function __powerline_left_segment() {
 }
 
 function __powerline_left_last_segment_padding() {
-	LEFT_PROMPT+="$(set_color - "${LAST_SEGMENT_COLOR}") ${normal?}"
+	LEFT_PROMPT+="$(set_color - "${LAST_SEGMENT_COLOR}") ${normal}"
 }
 
 function __powerline_last_status_prompt() {
@@ -280,9 +285,9 @@ function __powerline_prompt_command() {
 		[[ -n "${info}" ]] && __powerline_left_segment "${info}"
 	done
 
-	[[ "${last_status}" -ne 0 ]] && __powerline_left_segment "$(__powerline_last_status_prompt "${last_status}")"
+	[[ "${last_status}" -ne 0 ]] && __powerline_left_segment "$(__powerline_last_status_prompt ${last_status})"
 
-	if [[ -n "${LEFT_PROMPT}" ]] && [[ "${POWERLINE_COMPACT_AFTER_LAST_SEGMENT:-}" -eq 0 ]]; then
+	if [[ -n "${LEFT_PROMPT}" ]] && [[ "${POWERLINE_COMPACT_AFTER_LAST_SEGMENT}" -eq 0 ]]; then
 		__powerline_left_last_segment_padding
 	fi
 
@@ -291,11 +296,11 @@ function __powerline_prompt_command() {
 	prompt_color="$(set_color "${LAST_SEGMENT_COLOR}" -)"
 	if [[ -n "${LEFT_PROMPT}" ]] && [[ -n "${POWERLINE_LEFT_LAST_SEGMENT_PROMPT_CHAR}" ]]; then
 		LEFT_PROMPT+="$(set_color - "${LAST_SEGMENT_COLOR}")${POWERLINE_LEFT_LAST_SEGMENT_PROMPT_CHAR}"
-		prompt_color="${normal?}"
+		prompt_color="${normal}"
 	fi
-	[[ -n "${LEFT_PROMPT}" ]] && LEFT_PROMPT+="${prompt_color}${separator_char}${normal?}"
+	[[ -n "${LEFT_PROMPT}" ]] && LEFT_PROMPT+="${prompt_color}${separator_char}${normal}"
 
-	if [[ "${POWERLINE_COMPACT_PROMPT:-}" -eq 0 ]]; then
+	if [[ "${POWERLINE_COMPACT_PROMPT}" -eq 0 ]]; then
 		LEFT_PROMPT+=" "
 	fi
 
diff --git a/themes/pure/pure.theme.bash b/themes/pure/pure.theme.bash
index 4dd59e02..99476f4a 100644
--- a/themes/pure/pure.theme.bash
+++ b/themes/pure/pure.theme.bash
@@ -1,37 +1,41 @@
 # shellcheck shell=bash
 # shellcheck disable=SC2034 # Expected behavior for themes.
+# shellcheck disable=SC2154 #TODO: fix these all.
 
 # scm theming
 SCM_THEME_PROMPT_PREFIX="|"
 SCM_THEME_PROMPT_SUFFIX=""
 
-SCM_THEME_PROMPT_DIRTY=" ${bold_red?}✗${normal?}"
-SCM_THEME_PROMPT_CLEAN=" ${green?}✓${normal?}"
-SCM_GIT_CHAR="${green?}±${normal?}"
-SCM_SVN_CHAR="${bold_cyan?}⑆${normal?}"
-SCM_HG_CHAR="${bold_red?}☿${normal?}"
+SCM_THEME_PROMPT_DIRTY=" ${bold_red}✗${normal}"
+SCM_THEME_PROMPT_CLEAN=" ${green}✓${normal}"
+SCM_GIT_CHAR="${green}±${normal}"
+SCM_SVN_CHAR="${bold_cyan}⑆${normal}"
+SCM_HG_CHAR="${bold_red}☿${normal}"
 
 VIRTUALENV_THEME_PROMPT_PREFIX="("
 VIRTUALENV_THEME_PROMPT_SUFFIX=")"
 
-function pure_prompt() {
-	local ps_host="${bold_blue?}\h${normal?}"
-	local ps_user="${green?}\u${normal?}"
-	local ps_user_mark="${green?} \$ ${normal?}"
-	local ps_root="${red?}\u${red?}"
-	local ps_root_mark="${red?} \$ ${normal?}"
-	local ps_path="${yellow?}\w${normal?}"
-	local virtualenv_prompt scm_prompt
-	virtualenv_prompt="$(virtualenv_prompt)"
-	scm_prompt="$(scm_prompt)"
+### TODO: openSUSE has already colors enabled, check if those differs from stock
+# LS colors, made with http://geoff.greer.fm/lscolors/
+# export LSCOLORS="Gxfxcxdxbxegedabagacad"
+# export LS_COLORS='no=00:fi=00:di=01;34:ln=00;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=41;33;01:ex=00;32:*.cmd=00;32:*.exe=01;32:*.com=01;32:*.bat=01;32:*.btm=01;32:*.dll=01;32:*.tar=00;31:*.tbz=00;31:*.tgz=00;31:*.rpm=00;31:*.deb=00;31:*.arj=00;31:*.taz=00;31:*.lzh=00;31:*.lzma=00;31:*.zip=00;31:*.zoo=00;31:*.z=00;31:*.Z=00;31:*.gz=00;31:*.bz2=00;31:*.tb2=00;31:*.tz2=00;31:*.tbz2=00;31:*.avi=01;35:*.bmp=01;35:*.fli=01;35:*.gif=01;35:*.jpg=01;35:*.jpeg=01;35:*.mng=01;35:*.mov=01;35:*.mpg=01;35:*.pcx=01;35:*.pbm=01;35:*.pgm=01;35:*.png=01;35:*.ppm=01;35:*.tga=01;35:*.tif=01;35:*.xbm=01;35:*.xpm=01;35:*.dl=01;35:*.gl=01;35:*.wmv=01;35:*.aiff=00;32:*.au=00;32:*.mid=00;32:*.mp3=00;32:*.ogg=00;32:*.voc=00;32:*.wav=00;32:'
+
+pure_prompt() {
+	ps_host="${bold_blue}\h${normal}"
+	ps_user="${green}\u${normal}"
+	ps_user_mark="${green} $ ${normal}"
+	ps_root="${red}\u${red}"
+	ps_root_mark="${red} # ${normal}"
+	ps_path="${yellow}\w${normal}"
 	# make it work
-	case "${EUID:-$UID}" in
+	case $(id -u) in
 		0)
-			ps_user_mark="${ps_root_mark}"
-			ps_user="${ps_root}"
+			PS1="$(virtualenv_prompt)$ps_root@$ps_host$(scm_prompt):$ps_path$ps_root_mark"
+			;;
+		*)
+			PS1="$(virtualenv_prompt)$ps_user@$ps_host$(scm_prompt):$ps_path$ps_user_mark"
 			;;
 	esac
-	PS1="${virtualenv_prompt}${ps_user}@${ps_host}${scm_prompt}:${ps_path}${ps_user_mark}"
 }
 
 safe_append_prompt_command pure_prompt
diff --git a/themes/purity/purity.theme.bash b/themes/purity/purity.theme.bash
index 0fc6c4cf..22a3fbfb 100644
--- a/themes/purity/purity.theme.bash
+++ b/themes/purity/purity.theme.bash
@@ -1,44 +1,36 @@
 # shellcheck shell=bash
 # shellcheck disable=SC2034 # Expected behavior for themes.
+# shellcheck disable=SC2154 #TODO: fix these all.
 
-SCM_THEME_PROMPT_DIRTY=" ${bold_red?}⊘${normal?}"
-SCM_THEME_PROMPT_CLEAN=" ${bold_green?}✓${normal?}"
-SCM_THEME_PROMPT_PREFIX="${reset_color?}( "
-SCM_THEME_PROMPT_SUFFIX=" ${reset_color?})"
+SCM_THEME_PROMPT_DIRTY=" ${bold_red}⊘${normal}"
+SCM_THEME_PROMPT_CLEAN=" ${bold_green}✓${normal}"
+SCM_THEME_PROMPT_PREFIX="${reset_color}( "
+SCM_THEME_PROMPT_SUFFIX=" ${reset_color})"
 
-GIT_THEME_PROMPT_DIRTY=" ${bold_red?}⊘${normal?}"
-GIT_THEME_PROMPT_CLEAN=" ${bold_green?}✓${normal?}"
-GIT_THEME_PROMPT_PREFIX="${reset_color?}( "
-GIT_THEME_PROMPT_SUFFIX=" ${reset_color?})"
+GIT_THEME_PROMPT_DIRTY=" ${bold_red}⊘${normal}"
+GIT_THEME_PROMPT_CLEAN=" ${bold_green}✓${normal}"
+GIT_THEME_PROMPT_PREFIX="${reset_color}( "
+GIT_THEME_PROMPT_SUFFIX=" ${reset_color})"
 
-STATUS_THEME_PROMPT_BAD="${bold_red?}❯${reset_color?}${normal?} "
-STATUS_THEME_PROMPT_OK="${bold_green?}❯${reset_color?}${normal?} "
-: "${PURITY_THEME_PROMPT_COLOR:=$blue}"
+STATUS_THEME_PROMPT_BAD="${bold_red}❯${reset_color}${normal} "
+STATUS_THEME_PROMPT_OK="${bold_green}❯${reset_color}${normal} "
+PURITY_THEME_PROMPT_COLOR="${PURITY_THEME_PROMPT_COLOR:=$blue}"
 
-function venv_prompt() {
+venv_prompt() {
 	python_venv=""
 	# Detect python venv
-	if [[ -n "${CONDA_DEFAULT_ENV:-}" ]]; then
-		python_venv="(${PYTHON_VENV_CHAR}${CONDA_DEFAULT_ENV}) "
+	if [[ -n "${CONDA_DEFAULT_ENV}" ]]; then
+		python_venv="($PYTHON_VENV_CHAR${CONDA_DEFAULT_ENV}) "
 	elif [[ -n "${VIRTUAL_ENV}" ]]; then
-		python_venv="(${PYTHON_VENV_CHAR}${VIRTUAL_ENV##*/}) "
+		python_venv="($PYTHON_VENV_CHAR$(basename "${VIRTUAL_ENV}")) "
 	fi
 	[[ -n "${python_venv}" ]] && echo "${python_venv}"
 }
 
 function prompt_command() {
-	local retval="$?" ret_status python_venv scm_prompt_info venv_prompt
-	case "${retval}" in
-		0)
-			ret_status="$STATUS_THEME_PROMPT_OK"
-			;;
-		*)
-			ret_status="$STATUS_THEME_PROMPT_BAD"
-			;;
-	esac
-	scm_prompt_info="$(scm_prompt_info)"
-	venv_prompt="$(venv_prompt)"
-	PS1="\n${PURITY_THEME_PROMPT_COLOR}\w ${scm_prompt_info}\n${ret_status}${venv_prompt}"
+	local retval=$? ret_status
+	ret_status="$([ $retval -eq 0 ] && echo -e "$STATUS_THEME_PROMPT_OK" || echo -e "$STATUS_THEME_PROMPT_BAD")"
+	PS1="\n${PURITY_THEME_PROMPT_COLOR}\w $(scm_prompt_info)\n${ret_status}$(venv_prompt)"
 }
 
 safe_append_prompt_command prompt_command
-- 
2.37.0

