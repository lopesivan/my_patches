From 6289f6d08123bd9635f346422a4333694e9a744d Mon Sep 17 00:00:00 2001
From: Ivan Lopes <lopesivan.ufrj@gmail.com>
Date: Tue, 8 Aug 2023 05:17:23 -0300
Subject: [PATCH] modificado

---
 CONTRIBUTING.md                               |   34 +
 INSTALL_RECEIPT.json                          |   42 +
 Makefile                                      |   71 +
 README.md                                     |  357 ++++
 aliases/available/a                           |    1 +
 aliases/available/ag.aliases.bash             |    2 +-
 aliases/available/ansible.aliases.bash        |    2 +-
 aliases/available/apt.aliases.bash            |    6 +-
 aliases/available/atom.aliases.bash           |    2 +-
 aliases/available/bash-it.aliases.bash        |    2 +-
 aliases/available/bolt.aliases.bash           |    2 +-
 aliases/available/bundler.aliases.bash        |    2 +-
 aliases/available/clipboard.aliases.bash      |    1 +
 aliases/available/composer.aliases.bash       |    2 +-
 aliases/available/curl.aliases.bash           |   28 +-
 aliases/available/developer.aliases.bash      |   78 +
 aliases/available/dnf.aliases.bash            |    1 +
 aliases/available/docker-compose.aliases.bash |    2 +-
 aliases/available/docker.aliases.bash         |   44 +-
 aliases/available/emacs.aliases.bash          |   24 +-
 aliases/available/fuck.aliases.bash           |    6 +-
 aliases/available/general.aliases.bash        |   74 +-
 aliases/available/git.aliases.bash            |   15 +-
 aliases/available/gitsvn.aliases.bash         |    2 +-
 aliases/available/heroku.aliases.bash         |    2 +-
 aliases/available/hg.aliases.bash             |    2 +-
 aliases/available/homebrew-cask.aliases.bash  |    6 +-
 aliases/available/homebrew.aliases.bash       |    6 +-
 aliases/available/homesick.aliases.bash       |    3 +-
 aliases/available/jitsu.aliases.bash          |    2 +-
 aliases/available/kubectl.aliases.bash        |   37 +-
 aliases/available/laravel.aliases.bash        |    4 +-
 aliases/available/maven.aliases.bash          |    2 +-
 aliases/available/msys2.aliases.bash          |    7 +-
 aliases/available/mutt.aliases.bash           |   11 +
 aliases/available/node.aliases.bash           |    2 +-
 aliases/available/npm.aliases.bash            |    2 +-
 aliases/available/osx.aliases.bash            |   42 +-
 aliases/available/phoenix.aliases.bash        |    2 +-
 aliases/available/puppet.aliases.bash         |    2 +-
 aliases/available/pyrocms.aliases.bash        |  180 +-
 aliases/available/rails.aliases.bash          |    6 +-
 aliases/available/redis.aliases.bash          |   26 +
 aliases/available/svn.aliases.bash            |    2 +-
 aliases/available/systemd.aliases.bash        |   36 +-
 aliases/available/terraform.aliases.bash      |    7 +-
 aliases/available/terragrunt.aliases.bash     |    6 +-
 aliases/available/textmate.aliases.bash       |   12 +-
 aliases/available/tmux.aliases.bash           |    2 +-
 aliases/available/todo.txt-cli.aliases.bash   |   12 +-
 aliases/available/uuidgen.aliases.bash        |   12 +-
 aliases/available/vagrant.aliases.bash        |    2 +-
 aliases/available/vault.aliases.bash          |    2 +-
 aliases/available/vim.aliases.bash            |   49 +-
 aliases/available/wine.aliases.bash           |    6 +
 aliases/available/xclip.aliases.bash          |   44 +
 aliases/available/yarn.aliases.bash           |    2 +-
 clean_files.txt                               |    1 -
 completion/available/aliases.completion.bash  |    2 +-
 completion/available/awscli.completion.bash   |    3 +-
 completion/available/bash-it.completion.bash  |  221 ++-
 completion/available/brew.completion.bash     |   25 +-
 completion/available/cht.completion.bash      |   49 +
 completion/available/defaults.completion.bash |  178 +-
 completion/available/devbox.completion.bash   |   37 +
 completion/available/fabric-completion.bash   |  133 ++
 completion/available/fabric.completion.bash   |    6 +-
 completion/available/flutter.completion.bash  |    4 +-
 completion/available/gh.completion.bash       |  366 ++++
 completion/available/gradle.completion.bash   |    4 +-
 completion/available/iprj.completion.bash     |    9 +
 completion/available/knife.completion.bash    |    4 +-
 completion/available/makefile.completion.bash |    4 +-
 completion/available/pipenv.completion.bash   |    2 +-
 completion/available/projects.completion.bash |    4 +-
 .../available/redis_alias.completion.bash     |   46 +
 completion/available/svn.completion.bash      | 1546 ++++++++++++++++-
 completion/available/system.completion.bash   |   77 +-
 completion/available/template.completion.bash |   87 +
 completion/available/tldr.completion.bash     |   43 +
 .../available/tmuxinator.completion.bash      |   25 +
 completion/available/tp.completion.bash       |   43 +
 completion/available/ttjava.completion.bash   |    7 +
 completion/available/vim.completion.bash      |   57 +
 completion/available/wd.completion.bash       |  163 ++
 completion/available/xp.completion.bash       |   34 +
 docs/README.md                                |    1 +
 docs/troubleshooting.rst                      |   29 -
 install.sh                                    |    1 +
 lib/command_duration.bash                     |   35 +-
 lib/composure.bash                            |  380 ++++
 lib/helpers.bash                              |    2 +-
 lib/utilities.bash                            |   20 +-
 lint_clean_files.sh                           |    4 +-
 plugins/available/.lua-version                |    1 +
 .../available/alias-completion.plugin.bash    |  106 +-
 plugins/available/android.plugin.bash         |   12 +
 plugins/available/arduino.plugin.bash         |   18 +
 plugins/available/autojump.plugin.bash        |    3 +-
 plugins/available/aws.plugin.bash             |    7 +-
 plugins/available/bangsh.plugin.bash          |    4 +
 plugins/available/base.plugin.bash            |   37 +-
 plugins/available/bashacks.plugin.bash        | 1008 +++++++++++
 plugins/available/battery.plugin.bash         |  251 +--
 plugins/available/blesh.plugin.bash           |    2 +-
 plugins/available/brew.plugin.bash            |   27 +
 plugins/available/cabal.plugin.bash           |   26 +
 .../available/cmd-returned-notify.plugin.bash |   21 +-
 plugins/available/colors.plugin.bash          |    4 +-
 plugins/available/dart.plugin.bash            |    7 +
 plugins/available/dirs.plugin.bash            |  123 +-
 plugins/available/fzf.plugin.bash             |    5 +-
 plugins/available/gh.plugin.bash              |    4 +
 plugins/available/ghcup.plugin.bash           |   10 +
 plugins/available/gif.plugin.bash             |  585 +++----
 plugins/available/git-subrepo.plugin.bash     |    9 +-
 plugins/available/goenv.plugin.bash           |    4 +
 plugins/available/gradle.plugin.bash          |   21 +-
 plugins/available/groovy.plugin.bash          |   10 +
 plugins/available/history-search.plugin.bash  |    1 +
 .../history-substring-search.plugin.bash      |    1 +
 plugins/available/history.plugin.bash         |   29 +-
 plugins/available/java.plugin.bash            |   12 +-
 plugins/available/jbang.plugin.bash           |   10 +
 plugins/available/jekyll.plugin.bash          |  625 ++++---
 plugins/available/keycode.plugin.bash         |   52 +
 plugins/available/latex.plugin.bash           |   24 +-
 plugins/available/luaenv.plugin.bash          |   12 +
 plugins/available/man.plugin.bash             |   20 +-
 plugins/available/ndenv.plugin.bash           |   12 +
 plugins/available/nginx.plugin.bash           |   91 +-
 plugins/available/osx-timemachine.plugin.bash |  121 +-
 plugins/available/osx.plugin.bash             |  230 ++-
 plugins/available/pandoc.plugin.bash          |   11 +
 plugins/available/perl5.plugin.bash           |   16 +
 plugins/available/plenv.plugin.bash           |   18 +-
 plugins/available/postgres.plugin.bash        |    3 +-
 plugins/available/projects.plugin.bash        |  126 +-
 plugins/available/proxy.plugin.bash           |  175 +-
 plugins/available/pyenv.plugin.bash           |   33 +-
 plugins/available/python.plugin.bash          |   45 +-
 plugins/available/rakudobrew.plugin.bash      |    9 +
 plugins/available/roo.plugin.bash             |    9 +
 plugins/available/rustup.plugin.bash          |   18 +
 plugins/available/todo.plugin.bash            |   12 +-
 .../available/visual-studio-code.plugin.bash  |   12 +
 plugins/available/xterm.plugin.bash           |    6 +-
 plugins/available/z.plugin.bash               |  153 ++
 test/README.md                                |    4 +
 test/plugins/cmd-returned-notify.plugin.bats  |    6 +-
 themes/.nvimlog                               |    0
 themes/90210/90210.theme.bash                 |   19 +-
 themes/agnoster/agnoster.theme.bash           |    2 +-
 themes/atomic/atomic.theme.bash               |  266 ++-
 themes/bakke/bakke.theme.bash                 |   20 +-
 themes/barbuk/barbuk.theme.bash               |  167 +-
 themes/base.theme.bash                        |  552 +++---
 themes/bira/bira.theme.bash                   |   22 +-
 themes/bobby-python/bobby-python.theme.bash   |   29 +-
 themes/bobby/bobby.theme.bash                 |   41 +-
 themes/brainy/README.md                       |  123 ++
 themes/brunton/brunton.theme.bash             |   31 +-
 themes/candy/candy.theme.bash                 |   10 +-
 themes/codeword/codeword.theme.bash           |   26 +-
 themes/colors.theme.bash                      |  272 +++
 themes/command_duration.theme.bash            |   69 +
 .../doubletime_multiline.theme.bash           |    2 +-
 .../doubletime_multiline_pyonly.theme.bash    |    2 +-
 themes/easy/easy.theme.bash                   |   25 +-
 themes/essential/essential.theme.bash         |  137 +-
 themes/githelpers.theme.bash                  |  255 +--
 themes/gitline/powerline.base.bash            |    2 +
 themes/norbu/norbu.theme.bash                 |   30 +-
 themes/nwinkler_random_colors/README.md       |   29 +
 themes/nwinkler_random_colors/screenshot.png  |  Bin 0 -> 43510 bytes
 themes/p4helpers.theme.bash                   |   20 +-
 themes/parrot/parrot.theme.bash               |    2 +-
 themes/pete/pete.theme.bash                   |   17 +-
 themes/powerline-multiline/README.md          |   59 +
 themes/powerline-naked/README.md              |   58 +
 themes/powerline-plain/README.md              |   56 +
 .../powerline-plain/powerline-plain.base.bash |    2 +-
 .../powerline-plain.theme.bash                |   19 +-
 themes/powerline/README.md                    |   58 +
 themes/powerline/powerline.base.bash          |   37 +-
 themes/pure/pure.theme.bash                   |   42 +-
 themes/purity/purity.theme.bash               |   46 +-
 themes/rjorgenson/rjorgenson.theme.bash       |    4 +-
 188 files changed, 8965 insertions(+), 2777 deletions(-)
 create mode 100644 CONTRIBUTING.md
 create mode 100644 INSTALL_RECEIPT.json
 create mode 100644 Makefile
 create mode 100644 README.md
 create mode 100644 aliases/available/a
 create mode 100644 aliases/available/developer.aliases.bash
 create mode 100644 aliases/available/mutt.aliases.bash
 create mode 100644 aliases/available/redis.aliases.bash
 create mode 100644 aliases/available/wine.aliases.bash
 create mode 100644 aliases/available/xclip.aliases.bash
 create mode 100644 completion/available/cht.completion.bash
 create mode 100644 completion/available/devbox.completion.bash
 create mode 100644 completion/available/fabric-completion.bash
 create mode 100644 completion/available/gh.completion.bash
 create mode 100644 completion/available/iprj.completion.bash
 create mode 100644 completion/available/redis_alias.completion.bash
 create mode 100644 completion/available/template.completion.bash
 create mode 100644 completion/available/tldr.completion.bash
 create mode 100644 completion/available/tmuxinator.completion.bash
 create mode 100644 completion/available/tp.completion.bash
 create mode 100644 completion/available/ttjava.completion.bash
 create mode 100644 completion/available/vim.completion.bash
 create mode 100644 completion/available/wd.completion.bash
 create mode 100644 completion/available/xp.completion.bash
 create mode 100644 lib/composure.bash
 create mode 100644 plugins/available/.lua-version
 create mode 100644 plugins/available/android.plugin.bash
 create mode 100644 plugins/available/arduino.plugin.bash
 create mode 100644 plugins/available/bangsh.plugin.bash
 create mode 100644 plugins/available/bashacks.plugin.bash
 create mode 100644 plugins/available/brew.plugin.bash
 create mode 100644 plugins/available/cabal.plugin.bash
 create mode 100644 plugins/available/dart.plugin.bash
 create mode 100644 plugins/available/gh.plugin.bash
 create mode 100644 plugins/available/ghcup.plugin.bash
 create mode 100644 plugins/available/groovy.plugin.bash
 create mode 100644 plugins/available/jbang.plugin.bash
 create mode 100644 plugins/available/keycode.plugin.bash
 create mode 100644 plugins/available/luaenv.plugin.bash
 create mode 100644 plugins/available/ndenv.plugin.bash
 create mode 100644 plugins/available/pandoc.plugin.bash
 create mode 100644 plugins/available/perl5.plugin.bash
 create mode 100644 plugins/available/rakudobrew.plugin.bash
 create mode 100644 plugins/available/roo.plugin.bash
 create mode 100644 plugins/available/rustup.plugin.bash
 create mode 100644 plugins/available/visual-studio-code.plugin.bash
 create mode 100644 plugins/available/z.plugin.bash
 create mode 100644 test/README.md
 create mode 100644 themes/.nvimlog
 create mode 100644 themes/brainy/README.md
 create mode 100644 themes/colors.theme.bash
 create mode 100644 themes/command_duration.theme.bash
 create mode 100644 themes/nwinkler_random_colors/README.md
 create mode 100644 themes/nwinkler_random_colors/screenshot.png
 create mode 100644 themes/powerline-multiline/README.md
 create mode 100644 themes/powerline-naked/README.md
 create mode 100644 themes/powerline-plain/README.md
 create mode 100644 themes/powerline/README.md

diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
new file mode 100644
index 00000000..b9bd7d91
--- /dev/null
+++ b/CONTRIBUTING.md
@@ -0,0 +1,34 @@
+# Contribution Guidelines
+
+When contributing a new feature, a bug fix, a new theme, or any other change to Bash-it, please consider the following guidelines. Most of this is common sense, but please try to stick to the conventions listed here.
+
+## Issues
+
+* When opening a new issue in the issue tracker, please include information about which _Operating System_ you're using, and which version of _Bash_.
+* In many cases, it also makes sense to show which Bash-it plugins you are using. This information can be obtained using `bash-it show plugins`.
+* If the issue happens while loading Bash-it, please also include your `~/.bash_profile` or `~/.bashrc` file, as well as the install location of Bash-it (default should be `~/.bash_it`).
+* When reporting a bug or requesting a new feature, consider providing a Pull Request that fixes the issue or can be used as a starting point for the new feature. Don't be afraid, most things aren't that complex...
+
+## Pull Requests
+
+* Fork the Bash-it repo, create a new feature branch from _master_ and apply your changes there. Create a _Pull Request_ from your feature branch against Bash-it's _master_ branch.
+* Limit each Pull Request to one feature. Don't bundle multiple features/changes (e.g. a new _Theme_ and a fix to an existing plugin) into a single Pull Request - create one PR for the theme, and a separate PR for the fix.
+* For complex changes, try to _squash_ your changes into a single commit. Don't create a PR consisting of 20 commits that show your work in progress. Before you create the PR, _squash_ your changes into a single commit.
+
+## Code Style
+
+* Try to stick to the existing code style. Please don't reformat or change the syntax of existing code simply because you don't like that style.
+* Indentation is using spaces, not tabs. Most of the code is indented with 2 spaces, some with 4 spaces. Please try to stick to 2 spaces. If you're using an editor that supports [EditorConfig](http://EditorConfig.org), the editor should automatically use the settings defined in Bash-it's [.editorconfig file](.editorconfig).
+* When creating new functions, please use a dash ("-") to separate the words of the function's name, e.g. `my-new-function`. Don't use underscores, e.g. `my_new_function`.
+* Internal functions that aren't to be used by the end user should start with an underscore, e.g. `_my-new-internal-function`.
+* Use the provided meta functions to document your code, e.g. `about-plugin`, `about`, `group`, `param`, `example`. This will make it easier for other people to use your new functionality. Take a look at the existing code for an example (e.g. [the base plugin](plugins/available/base.plugin.bash)).
+* When adding files, please use the existing file naming conventions, e.g. plugin files need to end in `.plugin.bash`. This is important for the installation functionality.
+
+## Features
+
+* When adding new completions or plugins, please don't simply copy existing tools into the Bash-it codebase, try to load/integrate the tools instead. An example is using `nvm`: Instead of copying the existing `nvm` script into Bash-it, the `nvm.plugin.bash` file tries to load an existing installation of `nvm`. This means an additional step for the user (installing `nvm` from its own repo, or through a package manager), but it will also ensure that `nvm` can be upgraded in an easy way.
+
+## Themes
+
+* When adding a new theme, please include a screenshot and a short description about what makes this theme unique in the Pull Request.
+* Ideally, each theme's folder should contain a `README.md` file describing the theme and its configuration options.
diff --git a/INSTALL_RECEIPT.json b/INSTALL_RECEIPT.json
new file mode 100644
index 00000000..3583d0f0
--- /dev/null
+++ b/INSTALL_RECEIPT.json
@@ -0,0 +1,42 @@
+{
+  "homebrew_version": "3.5.8-4-g68e895a-dirty",
+  "used_options": [
+
+  ],
+  "unused_options": [
+
+  ],
+  "built_as_bottle": false,
+  "poured_from_bottle": false,
+  "installed_as_dependency": false,
+  "installed_on_request": true,
+  "changed_files": null,
+  "time": 1659859611,
+  "source_modified_time": 1652908314,
+  "compiler": "gcc-5",
+  "aliases": [
+
+  ],
+  "runtime_dependencies": [
+
+  ],
+  "source": {
+    "path": "/home/ivan/developer/env/linuxbrew/Homebrew/Library/Taps/lopesivan/homebrew-my_recipes/bash-it.rb",
+    "tap": "lopesivan/my_recipes",
+    "tap_git_head": "2b86fe68662c012dad40d288a91d5afbbb934c6c",
+    "spec": "stable",
+    "versions": {
+      "stable": "3.8.2",
+      "head": "HEAD",
+      "version_scheme": 0
+    }
+  },
+  "arch": "x86_64",
+  "built_on": {
+    "os": "Linux",
+    "os_version": "Ubuntu 18.04.6 LTS",
+    "cpu_family": "skylake",
+    "glibc_version": "2.27",
+    "oldest_cpu_family": "core2"
+  }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
new file mode 100644
index 00000000..4bde5f95
--- /dev/null
+++ b/Makefile
@@ -0,0 +1,71 @@
+PLUGINS =\
+alias-completion \
+android          \
+bangsh           \
+cabal            \
+dirs             \
+docker           \
+extract          \
+fzf              \
+git              \
+gradle           \
+jenv             \
+luaenv           \
+ndenv            \
+pandoc           \
+plenv            \
+projects         \
+pyenv            \
+python           \
+rbenv            \
+ruby             \
+sdkman           \
+tmuxinator       \
+tmux
+
+COMPLETIONS =\
+completion     \
+template       \
+tp             \
+docker         \
+xp             \
+wd             \
+pip            \
+makefile       \
+gradle         \
+tmuxinator     \
+defaults       \
+redis_alias    \
+git_flow       \
+projects       \
+gem vim        \
+bash-it        \
+dirs           \
+bundler        \
+system         \
+grunt          \
+git            \
+docker-compose
+
+ALIASES = developer
+
+all: enable
+
+enable : enable-plugins enable-completions enable-aliases
+disable: disable-plugins disable-completions disable-aliases
+
+disable-plugins:
+	(bash -c "source ${HOME}/developer/bash/it.sh; unset BASH_IT_THEME; unset GIT_HOSTING; unset NGINX_PATH; unset IRC_CLIENT; unset TODO; unset SCM_CHECK; bash-it disable plugin $(PLUGINS);" )
+enable-plugins:
+	(bash -c "source ${HOME}/developer/bash/it.sh; unset BASH_IT_THEME; unset GIT_HOSTING; unset NGINX_PATH; unset IRC_CLIENT; unset TODO; unset SCM_CHECK; bash-it enable  plugin $(PLUGINS);" )
+disable-completions:
+	(bash -c "source ${HOME}/developer/bash/it.sh; unset BASH_IT_THEME; unset GIT_HOSTING; unset NGINX_PATH; unset IRC_CLIENT; unset TODO; unset SCM_CHECK; bash-it disable completion $(COMPLETIONS);" )
+enable-completions:
+	(bash -c "source ${HOME}/developer/bash/it.sh; unset BASH_IT_THEME; unset GIT_HOSTING; unset NGINX_PATH; unset IRC_CLIENT; unset TODO; unset SCM_CHECK; bash-it enable  completion $(COMPLETIONS);" )
+disable-aliases:
+	(bash -c "source ${HOME}/developer/bash/it.sh; unset BASH_IT_THEME; unset GIT_HOSTING; unset NGINX_PATH; unset IRC_CLIENT; unset TODO; unset SCM_CHECK; bash-it disable alias $(ALIASES);" )
+enable-aliases:
+	(bash -c "source ${HOME}/developer/bash/it.sh; unset BASH_IT_THEME; unset GIT_HOSTING; unset NGINX_PATH; unset IRC_CLIENT; unset TODO; unset SCM_CHECK; bash-it enable  alias $(ALIASES);" )
+
+clean: disable
+
diff --git a/README.md b/README.md
new file mode 100644
index 00000000..b2ad2d88
--- /dev/null
+++ b/README.md
@@ -0,0 +1,357 @@
+# Bash-it
+
+[![Build Status](https://travis-ci.org/Bash-it/bash-it.svg?branch=master)](https://travis-ci.org/Bash-it/bash-it) [![Join the chat at https://gitter.im/Bash-it/bash-it](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/Bash-it/bash-it?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
+
+**Bash-it** is a collection of community Bash commands and scripts. (And a shameless ripoff of [oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh) :smiley:)
+
+Includes autocompletion, themes, aliases, custom functions, a few stolen pieces from Steve Losh, and more.
+
+Bash-it provides a solid framework for using, developing and maintaining shell scripts and custom commands for your daily work. If you're using the _Bourne Again Shell_ (Bash) on a regular basis and have been looking for an easy way on how to keep all of these nice little scripts and aliases under control, then Bash-it is for you! Stop polluting your `~/bin` directory and your `.bashrc` file, fork/clone Bash-it and start hacking away.
+
+## Install
+
+1. Check out a clone of this repo to a location of your choice, such as: `git clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it`
+2. Run `~/.bash_it/install.sh` (it automatically backs up your `~/.bash_profile` or `~/.bashrc`, depending on your OS)
+3. Edit your modified config (`~/.bash_profile` or `~/.bashrc`) file in order to customize Bash-it.
+4. Check out available aliases, completions and plugins and enable the ones you want to use (see the next section for more details).
+
+**INSTALL OPTIONS:**
+The install script can take the following options:
+
+* `--interactive`: Asks the user which aliases, completions and plugins to enable.
+* `--silent`: Ask nothing and install using default settings.
+* `--no-modify-config`: Do not modify the existing config file (`~/.bash_profile` or `~/.bashrc`).
+
+When run without the `--interactive` switch, Bash-it only enables a sane default set of functionality to keep your shell clean and to avoid issues with missing dependencies. Feel free to enable the tools you want to use after the installation.
+
+When you run without the `--no-modify-config` switch, the Bash-it installer automatically modifies/replaces your existing config file. Use the `--no-modify-config` switch to avoid unwanted modifications, e.g. if your Bash config file already contains the code that loads Bash-it.
+
+**NOTE**: Keep in mind how Bash load its configuration files, `.bash_profile` for login shells (and in Mac OS X in terminal emulators like [Terminal.app](http://www.apple.com/osx/apps/) or [iTerm2](https://www.iterm2.com/)) and `.bashrc` for interactive shells (default mode in most of the GNU/Linux terminal emulators), to ensure that Bash-it is loaded correctly. A good "practice" is sourcing `.bashrc` into `.bash_profile` to keep things working in all the scenarios, to achieve this, you can add this snippet in your `.bash_profile`:
+
+```
+if [ -f ~/.bashrc ]; then
+  . ~/.bashrc
+fi
+```
+
+Refer to the official [Bash documention](https://www.gnu.org/software/bash/manual/bashref.html#Bash-Startup-Files) to get more info.
+
+
+## Install using Docker
+
+You can try Bash-it in an isolated enviroment without changing any local files via a [Docker](https://www.docker.com/) Container.  
+(Bash Shell v4.4 with Bash-it, [bats](https://github.com/sstephenson/bats) and bash-completion based on [Alpine Linux](https://alpinelinux.org/)).   
+
+`docker pull ellerbrock/bash-it`
+
+Have a look at our [bash-it-docker respository](https://github.com/Bash-it/bash-it-docker) for further information.
+
+
+## Update
+
+To update Bash-it, simply run:
+
+```
+bash-it update
+```
+
+that's all.
+
+## Help Screens
+
+```
+bash-it show aliases        # shows installed and available aliases
+bash-it show completions    # shows installed and available completions
+bash-it show plugins        # shows installed and available plugins
+bash-it help aliases        # shows help for installed aliases
+bash-it help completions    # shows help for installed completions
+bash-it help plugins        # shows help for installed plugins
+```
+
+## Search
+
+If you need to quickly find out which of the plugins, aliases or completions
+are available for a specific framework, programming language, or an environment, you can _search_ for
+multiple terms related to the commands you use frequently.  Search will
+find and print out modules with the name or description matching the terms
+provided.
+
+#### Syntax
+
+```bash
+  bash-it search term1 [[-]term2] [[-]term3]....
+```
+
+As an example, a ruby developer might want to enable everything
+related to the commands such as `ruby`, `rake`, `gem`, `bundler` and `rails`.
+Search command helps you find related modules, so that you can decide which
+of them you'd like to use:
+
+```bash
+❯ bash-it search ruby rake gem bundle irb rails
+      aliases:  bundler rails
+      plugins:  chruby chruby-auto ruby
+  completions:  bundler gem rake
+```
+
+Currently enabled modules will be shown in green.
+
+#### Search with Negations
+
+You can prefix a search term with a "-" to exclude it from the results. In the above
+example, if we wanted to hide `chruby` and `chruby-auto`, we could change the command as
+follows:
+
+```bash
+❯ bash-it search ruby rake gem bundle irb rails -chruby
+      aliases:  bundler rails
+      plugins:  ruby
+  completions:  bundler gem rake
+```
+
+#### Using Search to Enable or Disable Components
+
+By adding a `--enable` or `--disable` to the search command, you can automatically
+enable all modules that come up as a result of a search query. This could be quite
+handy if you like to enable a bunch of components related to the same topic.
+
+#### Disabling ASCII Color
+
+To remove non-printing non-ASCII characters responsible for the coloring of the
+search output, you can set environment variable `NO_COLOR`. Enabled components will
+then be shown with a checkmark:
+
+```bash
+❯ NO_COLOR=1 bash-it search ruby rake gem bundle irb rails -chruby
+      aliases  =>   ✓bundler ✓rails
+      plugins  =>   ✓ruby
+  completions  =>   bundler gem rake
+```
+
+## Your Custom scripts, aliases, themes, and functions
+
+For custom scripts, and aliases, just create the following files (they'll be ignored by the git repo):
+
+* `aliases/custom.aliases.bash`
+* `completion/custom.completion.bash`
+* `lib/custom.bash`
+* `plugins/custom.plugins.bash`
+* `custom/themes/<custom theme name>/<custom theme name>.theme.bash`
+
+Anything in the custom directory will be ignored, with the exception of `custom/example.bash`.
+
+Alternately, if you would like to keep your custom scripts under version control, you can set BASH_IT_CUSTOM in your `~/.bashrc` to another location outside of the `~/.bash_it` folder.
+
+## Themes
+
+There are a few Bash-it themes. If you've created your own custom prompts, I'd love it if you shared with everyone else! Just submit a Pull Request.
+
+You can see the theme screenshots [here](https://github.com/Bash-it/bash-it/wiki/Themes).
+
+Alternatively, you can preview the themes in your own shell using `BASH_PREVIEW=true reload`.
+
+**NOTE**: Bash-it and some themes use UTF-8 characters, so to avoid extrange behaviors in your terminal, set your locale to `LC_ALL=en_US.UTF-8` or the equivalent to your language if isn't American English.
+
+## Uninstalling
+
+To uninstall Bash-it, run the `uninstall.sh` script found in the `$BASH_IT` directory:
+
+```
+cd $BASH_IT
+./uninstall.sh
+```
+
+This will restore your previous Bash profile. After the uninstall script finishes, remove the Bash-it directory from your machine (`rm -rf $BASH_IT`) and start a new shell.
+
+## Contributing
+
+Please take a look at the [Contribution Guidelines](CONTRIBUTING.md) before reporting a bug or providing a new feature.
+
+## Misc
+
+### Bash Profile Aliases
+
+Bash-it creates a `reload` alias that makes it convenient to reload
+your Bash profile when you make changes.
+
+Additionally, if you export BASH_IT_AUTOMATIC_RELOAD_AFTER_CONFIG_CHANGE as a non-null value, Bash-it will automatically reload itself after activating or deactivating plugins, aliases, or completions.
+
+### Prompt Version Control Check
+
+Bash-it provides prompt themes the ability to check and display version control information for the current directory. The information is retrieved for each directory and can slow down the navigation of projects with a large number of files and folders. Turn version control checking off to prevent slow directory navigation within large projects.
+
+Bash-it provides a flag (`SCM_CHECK`) within the `~/.bash_profile` file that turns off/on version control information checking and display within all themes. Version control checking is on by default unless explicitly turned off.
+
+Set `SCM_CHECK` to 'false' to **turn off** version control checks for all themes:
+
+* `export SCM_CHECK=false`
+
+Set `SCM_CHECK` to 'true' (the default value) to **turn on** version control checks for all themes:
+
+* `export SCM_CHECK=true`
+
+**NOTE:**
+It is possible for themes to ignore the `SCM_CHECK` flag and query specific version control information directly. For example, themes that use functions like `git_prompt_vars` skip the `SCM_CHECK` flag to retrieve and display git prompt information. If you turned version control checking off and you still see version control information within your prompt, then functions like `git_prompt_vars` are most likely the reason why.
+
+### Git prompt
+
+Bash-it has some nice features related to Git, continue reading to know more about these features.
+
+#### Repository info in the prompt
+
+Bash-it can show some information about Git repositories in the shell prompt: the current branch, tag or commit you are at, how many commits the local branch is ahead or behind from the remote branch, and if you have changes stashed.
+
+Additionally, you can view the status of your working copy and get the count of *staged*, *unstaged* and *untracked* files. This feature is controlled through the flag `SCM_GIT_SHOW_DETAILS` as follows:
+
+Set `SCM_GIT_SHOW_DETAILS` to 'true' (the default value) to **show** the working copy details in your prompt:
+
+* `export SCM_GIT_SHOW_DETAILS=true`
+
+Set `SCM_GIT_SHOW_DETAILS` to 'false' to **don't show** it:
+
+* `export SCM_GIT_SHOW_DETAILS=false`
+
+**NOTE:** If using `SCM_GIT_SHOW_MINIMAL_INFO=true`, then the value of `SCM_GIT_SHOW_DETAILS` is ignored.
+
+#### Remotes and remote branches
+
+In some git workflows you must work with various remotes, for this reason, Bash-it can provide some useful information about your remotes and your remote branches, for example, the remote on you are working, or if your local branch is tracking a remote branch.
+
+You can control this feature with the flag `SCM_GIT_SHOW_REMOTE_INFO` as follows:
+
+Set `SCM_GIT_SHOW_REMOTE_INFO` to 'auto' (the default value) to activate it only when more than one remote is configured in the current repo:
+
+* `export SCM_GIT_SHOW_REMOTE_INFO=auto`
+
+Set `SCM_GIT_SHOW_REMOTE_INFO` to 'true' to always activate the feature:
+
+* `export SCM_GIT_SHOW_REMOTE_INFO=true`
+
+Set `SCM_GIT_SHOW_REMOTE_INFO` to 'false' to **disable the feature**:
+
+* `export SCM_GIT_SHOW_REMOTE_INFO=false`
+
+**NOTE:** If using `SCM_GIT_SHOW_MINIMAL_INFO=true`, then the value of `SCM_GIT_SHOW_REMOTE_INFO` is ignored.
+
+#### Untracked files
+
+By default, `git status` command shows information about *untracked* files, this behavior can be controlled through command line flags or git configuration files, for big repositories, ignoring *untracked* files can make git faster. Bash-it uses `git status` to gather the repo information it shows in the prompt, so in some circumstances, can be useful to instruct Bash-it to ignore these files. You can control this behavior with the flag `SCM_GIT_IGNORE_UNTRACKED`:
+
+Set `SCM_GIT_IGNORE_UNTRACKED` to 'false' (the default value) to get information about *untracked* files:
+
+* `export SCM_GIT_IGNORE_UNTRACKED=false`
+
+Set `SCM_GIT_IGNORE_UNTRACKED` to 'true' to **ignore** *untracked* files:
+
+* `export SCM_GIT_IGNORE_UNTRACKED=true`
+
+also, with this flag to false, Bash-it will not show the repository as dirty when the repo have *untracked* files, and will not display the count of *untracked* files.
+
+**NOTE:** If you set in git configuration file the option to ignore *untracked* files, this flag has no effect, and Bash-it will ignore *untracked* files always.
+
+#### Git user
+
+In some environments it is useful to know the value of the current git user, which is used to mark all new commits. For example, any organization that uses the practice of pair programming will typically author each commit with a [combined names of the two authors](https://github.com/pivotal/git_scripts). When another pair uses the same pairing station, the authors are changed at the beginning of the session.
+
+To get up and running with this technique, run `gem install pivotal_git_scripts`, and then edit your `~/.pairs` file, according to the specification on the [gem's homepage](https://github.com/pivotal/git_scripts) After that you should be able to run `git pair kg as` to set the author to, eg. "Konstantin Gredeskoul and Alex Saxby", assuming they've been added to the `~/.pairs` file. Please see gem's documentation for more information.
+
+To enable the display of the current pair in the prompt, you must set `SCM_GIT_SHOW_CURRENT_USER` to `true`. Once set, the `SCM_CURRENT_USER` variable will be automatically populated with the initials of the git author(s). It will also be included in the default git prompt. Even if you do not have `git pair` installed, as long as your `user.name` is set, your initials will be computed from your name, and shown in the prompt.
+
+You can control the prefix and the suffix of this component using the two variables:
+
+* `export SCM_THEME_CURRENT_USER_PREFFIX=' ☺︎ '`
+
+And
+
+* `export SCM_THEME_CURRENT_USER_SUFFIX=' '``
+
+**NOTE:** If using `SCM_GIT_SHOW_MINIMAL_INFO=true`, then the value of `SCM_GIT_SHOW_CURRENT_USER` is ignored.
+
+#### Git show minimal status info
+
+To speed up the prompt while still getting minimal git status information displayed such as the value of HEAD and whether there are any dirty objects, you can set:
+
+```
+export SCM_GIT_SHOW_MINIMAL_INFO=true
+```
+
+#### Ignore repo status
+
+When working in repos with a large code base Bash-it can slow down your prompt when checking the repo status, to avoid it, there is an option you can set via Git config to disable checking repo status in Bash-it.
+
+To disable checking the status in the current repo:
+
+```
+$ git config --add bash-it.hide-status 1
+```
+
+But if you would like to disable it globally, and stop checking the status for all of your repos:
+
+```
+$ git config --global --add bash-it.hide-status 1
+```
+
+setting this flag globally has the same effect that `SCM_CHECK=true` but only for Git repos.
+
+### Pass function renamed to passgen
+
+The Bash-it `pass` function has been renamed to `passgen` in order to avoid a naming conflict with the [pass password manager]. In order to minimize the impact on users of the legacy Bash-it `pass` function, Bash-it will create the alias `pass` that calls the new `passgen` function if the `pass` password manager command is not found on the `PATH` (default behavior).
+
+This behavior can be overridden with the `BASH_IT_LEGACY_PASS` flag as follows:
+
+Set `BASH_IT_LEGACY_PASS` to 'true' to force Bash-it to always **create** the `pass` alias to `passgen`:
+
+* `export BASH_IT_LEGACY_PASS=true`
+
+Unset `BASH_IT_LEGACY_PASS` to have Bash-it **return to default behavior**:
+
+* `unset BASH_IT_LEGACY_PASS`
+
+### Proxy Support
+
+If you are working in a corporate environment where you have to go through a proxy server for internet access, then you know how painful it is to configure the OS proxy variables in the shell, especially if you are switching between environments, e.g. office (with proxy) and home (without proxy).
+
+The Bash shell (and many shell tools) use the following variables to define the proxy to use:
+
+* `HTTP_PROXY` (and `http_proxy`): Defines the proxy server for HTTP requests
+* `HTTPS_PROXY` (and `https_proxy`): Defines the proxy server for HTTPS requests
+* `ALL_PROXY` (and `all_proxy`): Used by some tools for the same purpose as above
+* `NO_PROXY` (and `no_proxy`): Comma-separated list of hostnames that don't have to go through the proxy
+
+Bash-it's `proxy` plugin allows to enable and disable these variables with a simple command. To start using the `proxy` plugin, run the following:
+
+```bash
+bash-it enable plugin proxy
+```
+
+Bash-it also provides support for enabling/disabling proxy settings for various shell tools. The following backends are currently supported (in addition to the shell's environment variables): Git, SVN, npm, ssh. The `proxy` plugin changes the configuration files of these tools to enable or disable the proxy settings.
+
+Bash-it uses the following variables to set the shell's proxy settings when you call `enable-proxy`.
+These variables are best defined in a custom script in Bash-it's custom script folder (`$BASH_IT/custom`), e.g. `$BASH_IT/custom/proxy.env.bash`
+* `BASH_IT_HTTP_PROXY` and `BASH_IT_HTTPS_PROXY`: Define the proxy URL to be used, e.g. 'http://localhost:1234'
+* `BASH_IT_NO_PROXY`: A comma-separated list of proxy exclusions, e.g. `127.0.0.1,localhost`
+
+Once you have defined these variables (and have run `reload` to load the changes), you can use the following commands to enable or disable the proxy settings in your current shell:
+
+* `enable-proxy`: This sets the shell's proxy environment variables and configures proxy support in your SVN, npm and SSH configuration files.
+* `disable-proxy`: This unsets the shell's proxy environment variables and disables proxy support in your SVN, npm and SSH configuration files.
+
+There are many more proxy commands, e.g. for changing the local Git project's proxy settings. Run `glossary proxy` to show the available proxy functions with a short description.
+
+## Help out
+
+We think everyone has their own custom scripts accumulated over time. And so, following in the footsteps of oh-my-zsh, Bash-it is a framework for easily customizing your Bash shell. Everyone's got a custom toolbox, so let's start making them even better, **as a community!**
+
+Send us a pull request and we'll merge it as long as it looks good. If you change an existing command, please give an explanation why. That will help a lot when we merge your changes in.
+
+Please take a look at the [Contribution Guidelines](CONTRIBUTING.md) before reporting a bug or providing a new feature.
+
+Thanks, and happing bashing!
+
+
+## Contributors
+
+* [List of contributors][contribute]
+
+[contribute]: https://github.com/Bash-it/bash-it/contributors
+[pass password manager]: http://www.passwordstore.org/
diff --git a/aliases/available/a b/aliases/available/a
new file mode 100644
index 00000000..13786e8f
--- /dev/null
+++ b/aliases/available/a
@@ -0,0 +1 @@
+alias vi='XDG_DATA_HOME=$NVIM_BEGINNER/share XDG_CACHE_HOME=$NVIM_BEGINNER XDG_CONFIG_HOME=$NVIM_BEGINNER nvim'
diff --git a/aliases/available/ag.aliases.bash b/aliases/available/ag.aliases.bash
index 7f9af7da..e3157f94 100644
--- a/aliases/available/ag.aliases.bash
+++ b/aliases/available/ag.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'the silver searcher (ag) aliases'
 
 ## Summary for args to less:
diff --git a/aliases/available/ansible.aliases.bash b/aliases/available/ansible.aliases.bash
index 04c5d280..1c53a88e 100644
--- a/aliases/available/ansible.aliases.bash
+++ b/aliases/available/ansible.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'ansible abbreviations'
 
 alias ans=ansible
diff --git a/aliases/available/apt.aliases.bash b/aliases/available/apt.aliases.bash
index 1d43ffac..b7ef274c 100644
--- a/aliases/available/apt.aliases.bash
+++ b/aliases/available/apt.aliases.bash
@@ -6,8 +6,10 @@ cite 'about-alias'
 about-alias 'Apt and dpkg aliases for Ubuntu and Debian distros.'
 
 # set apt aliases
-function _set_pkg_aliases() {
-	if _command_exists apt; then
+function _set_pkg_aliases()
+{
+	if _command_exists apt
+	then
 		alias apts='apt-cache search'
 		alias aptshow='apt-cache show'
 		alias aptinst='sudo apt-get install -V'
diff --git a/aliases/available/atom.aliases.bash b/aliases/available/atom.aliases.bash
index 6868e2cc..8d70cffa 100644
--- a/aliases/available/atom.aliases.bash
+++ b/aliases/available/atom.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'Atom.io editor abbreviations'
 
 alias a='atom'
diff --git a/aliases/available/bash-it.aliases.bash b/aliases/available/bash-it.aliases.bash
index 1f16638b..d2975667 100644
--- a/aliases/available/bash-it.aliases.bash
+++ b/aliases/available/bash-it.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite about-alias
 about-alias 'Aliases for the bash-it command (these aliases are automatically included with the "general" aliases)'
 
 # Common misspellings of bash-it
diff --git a/aliases/available/bolt.aliases.bash b/aliases/available/bolt.aliases.bash
index 556dd7fe..8490f710 100644
--- a/aliases/available/bolt.aliases.bash
+++ b/aliases/available/bolt.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'puppet bolt aliases'
 
 # Aliases
diff --git a/aliases/available/bundler.aliases.bash b/aliases/available/bundler.aliases.bash
index 1eb00862..fc20f4ff 100644
--- a/aliases/available/bundler.aliases.bash
+++ b/aliases/available/bundler.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'ruby bundler'
 
 # Bundler Commands
diff --git a/aliases/available/clipboard.aliases.bash b/aliases/available/clipboard.aliases.bash
index 2a5c3e8c..4c7e6f5b 100644
--- a/aliases/available/clipboard.aliases.bash
+++ b/aliases/available/clipboard.aliases.bash
@@ -1,4 +1,5 @@
 # shellcheck shell=bash
+cite 'about-alias'
 about-alias 'xclip shortcuts'
 
 alias pbcopy="xclip -selection clipboard"
diff --git a/aliases/available/composer.aliases.bash b/aliases/available/composer.aliases.bash
index 85401abb..5ccb2e24 100644
--- a/aliases/available/composer.aliases.bash
+++ b/aliases/available/composer.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'common composer abbreviations'
 
 # Aliases
diff --git a/aliases/available/curl.aliases.bash b/aliases/available/curl.aliases.bash
index a270e416..a6b2b344 100644
--- a/aliases/available/curl.aliases.bash
+++ b/aliases/available/curl.aliases.bash
@@ -1,19 +1,23 @@
-# shellcheck shell=bash
+#!/bin/bash
+
+cite 'about-alias'
 about-alias 'Curl aliases for convenience.'
 
 # set apt aliases
-function _set_pkg_aliases() {
-	if _command_exists curl; then
+function _set_pkg_aliases()
+{
+	if _command_exists curl
+	then
 		# follow redirects
-		alias cl='curl -L'
-		# follow redirects, download as original name
-		alias clo='curl -L -O'
-		# follow redirects, download as original name, continue
-		alias cloc='curl -L -C - -O'
-		# follow redirects, download as original name, continue, retry 5 times
-		alias clocr='curl -L -C - -O --retry 5'
-		# follow redirects, fetch banner
-		alias clb='curl -L -I'
+                alias cl='curl -L'
+                # follow redirects, download as original name
+                alias clo='curl -L -O'
+                # follow redirects, download as original name, continue
+                alias cloc='curl -L -C - -O'
+                # follow redirects, download as original name, continue, retry 5 times
+                alias clocr='curl -L -C - -O --retry 5'
+                # follow redirects, fetch banner
+                alias clb='curl -L -I'
 		# see only response headers from a get request
 		alias clhead='curl -D - -so /dev/null'
 	fi
diff --git a/aliases/available/developer.aliases.bash b/aliases/available/developer.aliases.bash
new file mode 100644
index 00000000..64066ec9
--- /dev/null
+++ b/aliases/available/developer.aliases.bash
@@ -0,0 +1,78 @@
+cite 'about-alias'
+about-alias 'developer aliases'
+
+alias matlab='/opt/R2020b/bin/matlab'
+alias manview='groff -Tascii -man'
+alias less='less -r'                                   # raw control characters
+alias whence='type -a'                                 # where, of a sort
+alias grep='grep --color'                              # show differences in colour
+#alias http-server='python -m SimpleHTTPServer 8000'
+#alias odoc='evince'
+alias odoc='zathura'
+alias oimg='sxiv'
+alias docs='DISPLAY=:0.0 zeal'
+# alias img='LD_LIBRARY_PATH=/usr/local/lib img2sixel'
+alias pst="env PS_ARGS=%cpu,%mem,lstart pst"
+alias calc='bc -l ~/.config/bc/*'
+alias brilho='PYENV_VERSION=system brightness-controller'
+
+alias workspace.restart='sudo systemctl restart workspace.service'
+alias sdcv='sdcv -c -2 $HOME/.config/nvim/dictionary/sdcv'
+alias pt-en='sdcv -u "Portuguese - English"'
+alias en-pt='sdcv -u "English-Portuguese"'
+alias ls-mem='ps axch -o cmd:15,%mem --sort=-%mem'
+alias ls-cpu='ps axch -o cmd:15,%cpu --sort=-%cpu'
+alias game='/usr/games/mednafen'
+alias git.nvim='/usr/bin/git --git-dir=$HOME/developer/dotfiles/.nvim --work-tree=$HOME/.config/nvim'
+
+# commands
+reload-keynav() { killall keynav ; keynav daemonize ;}
+ekeynav() { nvim ~/.keynavrc ;}
+ekeynav-macros() { nvim ~/.keynav_macros ;}
+egit() { nvim ~/.gitconfig ;}
+
+# Some shortcuts for different directory listings
+alias ls='ls -hF --color=tty'                          # classify files in colour
+alias dir='ls -d */'
+alias vdir='ls --color=auto --format=long'
+alias ll='ls -l'                                       # long list
+alias la='ls -A'                                       # all but . and ..
+alias l='ls -CF'                                       #
+alias lspermissions='stat -c "%a %n"'
+
+alias logout-gnome='gnome-session-quit --logout'
+alias desliga='systemctl enable poweroff.target'
+#                sudo service lightdm restart
+alias x.restart='sudo service lightdm restart'
+#alias asciiflow="google-chrome file:///${HOME}/developer/asciiflow2/index.html"
+
+alias slide='lookatme --no-ext-warn'
+# alias nf='iprj new file --list'
+
+alias rec='arecord -c 1 -r 48000 -f S16_LE -D "hw:CARD=Loopback,DEV=1,SUBDEV=0"'
+alias mic.server='sudo micclient-ubuntu-x86_64 -t wifi 192.168.2.104'
+alias ei3='vim ~/.config/i3/config'
+alias egit='vim ~/.gitconfig'
+alias xevkb="xev -event keyboard"
+alias ccat="highlight --out-format=ansi" # Color cat - print file with syntax highlighting.
+
+alias scanner='scangearmp'
+alias nw="i3-msg workspace $(wmctrl -d | rev | cut -c 1 | awk -v RS='\\s+' '{ a[$1] } END { for(i = 1; i in a; ++i); print i }')"
+#alias r='ranger --cmd "set show_hidden=true"'
+alias mvi='mpv -profile image'
+#xhost +
+#alias vp='xhost +; sudo su visualparadigm -c /opt/visualparadigm/Visual_Paradigm_14.2/bin/Visual_Paradigm'
+alias mux='tmuxinator'
+alias audio-hdmi='pacmd set-card-profile 0 "output:hdmi-stereo"'
+alias audio-analog='pacmd set-card-profile 0 "output:analog-stereo"'
+alias audio-lx3000='pacmd set-card-profile 1 "output:analog-stereo"'
+
+alias xopen='xdg-open'
+alias vp='/opt/Visual_Paradigm_16.2/bin/Visual_Paradigm'
+
+alias godarwin='GOOS=darwin GOARCH=amd64 go'
+alias golinux='GOOS=linux GOARCH=amd64 go'
+alias goraspbian='GOOS=linux GOARCH=arm GOARM=7 go'
+#alias terminal="rxvt -fn \"xft:InconsolataGo Nerd Font Mono:size=31:hinting=true:hintstyle=Regular:minspace=False\" -fb \"xft:InconsolataGo Nerd Font Mono:size=31:hinting=true:hintstyle=Bold\""
+alias terminal="rxvt -fn \"xft:DroidSansMono Nerd Font Mono:pixelsize=31:hinting=true:hintstyle=Book\""
+# vi:set nu nowrap:
diff --git a/aliases/available/dnf.aliases.bash b/aliases/available/dnf.aliases.bash
index 25007c23..9d9f0267 100644
--- a/aliases/available/dnf.aliases.bash
+++ b/aliases/available/dnf.aliases.bash
@@ -1,4 +1,5 @@
 # shellcheck shell=bash
+cite 'about-alias'
 about-alias 'dnf aliases for fedora 22+ distros'
 
 alias dnfl="dnf list"            # List packages
diff --git a/aliases/available/docker-compose.aliases.bash b/aliases/available/docker-compose.aliases.bash
index a2f637c0..3583be8f 100644
--- a/aliases/available/docker-compose.aliases.bash
+++ b/aliases/available/docker-compose.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'docker-compose abbreviations'
 
 alias dco="docker-compose"
diff --git a/aliases/available/docker.aliases.bash b/aliases/available/docker.aliases.bash
index 1c49207f..9f005aa7 100644
--- a/aliases/available/docker.aliases.bash
+++ b/aliases/available/docker.aliases.bash
@@ -1,32 +1,32 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'docker abbreviations'
 
 alias dk='docker'
-alias dklc='docker ps -l'                                                            # List last Docker container
-alias dklcid='docker ps -l -q'                                                       # List last Docker container ID
-alias dklcip='docker inspect -f "{{.NetworkSettings.IPAddress}}" $(docker ps -l -q)' # Get IP of last Docker container
-alias dkps='docker ps'                                                               # List running Docker containers
-alias dkpsa='docker ps -a'                                                           # List all Docker containers
-alias dki='docker images'                                                            # List Docker images
-alias dkrmac='docker rm $(docker ps -a -q)'                                          # Delete all Docker containers
+alias dklc='docker ps -l'  # List last Docker container
+alias dklcid='docker ps -l -q'  # List last Docker container ID
+alias dklcip='docker inspect -f "{{.NetworkSettings.IPAddress}}" $(docker ps -l -q)'  # Get IP of last Docker container
+alias dkps='docker ps'  # List running Docker containers
+alias dkpsa='docker ps -a'  # List all Docker containers
+alias dki='docker images'  # List Docker images
+alias dkrmac='docker rm $(docker ps -a -q)'  # Delete all Docker containers
 
 case $OSTYPE in
-	darwin* | *bsd* | *BSD*)
-		alias dkrmui='docker images -q -f dangling=true | xargs docker rmi' # Delete all untagged Docker images
-		;;
-	*)
-		alias dkrmui='docker images -q -f dangling=true | xargs -r docker rmi' # Delete all untagged Docker images
-		;;
+  darwin*|*bsd*|*BSD*)
+    alias dkrmui='docker images -q -f dangling=true | xargs docker rmi'  # Delete all untagged Docker images
+    ;;
+  *)
+    alias dkrmui='docker images -q -f dangling=true | xargs -r docker rmi'  # Delete all untagged Docker images
+    ;;
 esac
 
-if _bash-it-component-item-is-enabled plugin docker; then
-	# Function aliases from docker plugin:
-	alias dkrmlc='docker-remove-most-recent-container' # Delete most recent (i.e., last) Docker container
-	alias dkrmall='docker-remove-stale-assets'         # Delete all untagged images and exited containers
-	alias dkrmli='docker-remove-most-recent-image'     # Delete most recent (i.e., last) Docker image
-	alias dkrmi='docker-remove-images'                 # Delete images for supplied IDs or all if no IDs are passed as arguments
-	alias dkideps='docker-image-dependencies'          # Output a graph of image dependencies using Graphiz
-	alias dkre='docker-runtime-environment'            # List environmental variables of the supplied image ID
+if [ ! -z "$(command ls "${BASH_IT}/enabled/"{[0-9][0-9][0-9]${BASH_IT_LOAD_PRIORITY_SEPARATOR}docker,docker}.plugin.bash 2>/dev/null | head -1)" ]; then
+# Function aliases from docker plugin:
+    alias dkrmlc='docker-remove-most-recent-container'  # Delete most recent (i.e., last) Docker container
+    alias dkrmall='docker-remove-stale-assets'  # Delete all untagged images and exited containers
+    alias dkrmli='docker-remove-most-recent-image'  # Delete most recent (i.e., last) Docker image
+    alias dkrmi='docker-remove-images'  # Delete images for supplied IDs or all if no IDs are passed as arguments
+    alias dkideps='docker-image-dependencies'  # Output a graph of image dependencies using Graphiz
+    alias dkre='docker-runtime-environment'  # List environmental variables of the supplied image ID
 fi
 alias dkelc='docker exec -it $(dklcid) bash --login' # Enter last container (works with Docker 1.3 and above)
 alias dkrmflast='docker rm -f $(dklcid)'
diff --git a/aliases/available/emacs.aliases.bash b/aliases/available/emacs.aliases.bash
index a4e4111a..f8e1259b 100644
--- a/aliases/available/emacs.aliases.bash
+++ b/aliases/available/emacs.aliases.bash
@@ -1,16 +1,16 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'emacs editor'
 
 case $OSTYPE in
-	linux*)
-		alias em='emacs'
-		alias en='emacs -nw'
-		alias e='emacsclient -n'
-		alias et='emacsclient -t'
-		alias ed='emacs --daemon'
-		alias E='SUDO_EDITOR=emacsclient sudo -e'
-		;;
-	darwin*)
-		alias em='open -a emacs'
-		;;
+  linux*)
+    alias em='emacs'
+    alias en='emacs -nw'
+    alias e='emacsclient -n'
+    alias et='emacsclient -t'
+    alias ed='emacs --daemon'
+    alias E='SUDO_EDITOR=emacsclient sudo -e'
+    ;;
+  darwin*)
+    alias em='open -a emacs'
+    ;;
 esac
diff --git a/aliases/available/fuck.aliases.bash b/aliases/available/fuck.aliases.bash
index 4cfa52d8..495ea851 100644
--- a/aliases/available/fuck.aliases.bash
+++ b/aliases/available/fuck.aliases.bash
@@ -1,9 +1,9 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'fuck/please to retry last command with sudo'
 
 # Play nicely with 'thefuck' plugin
-if ! _command_exists fuck; then
-	alias fuck='sudo $(fc -ln -1)'
+if ! _command_exists fuck ; then
+    alias fuck='sudo $(fc -ln -1)'
 fi
 alias please=fuck
 alias plz=please
diff --git a/aliases/available/general.aliases.bash b/aliases/available/general.aliases.bash
index 2511aab8..f4ebcafb 100644
--- a/aliases/available/general.aliases.bash
+++ b/aliases/available/general.aliases.bash
@@ -1,45 +1,50 @@
-# shellcheck shell=bash
+cite about-alias
 about-alias 'general aliases'
 
-if command ls --color -d . &> /dev/null; then
-	alias ls='ls --color=auto'
-	# BSD `ls` doesn't need an argument (`-G`) when `$CLICOLOR` is set.
+if ls --color -d . &> /dev/null
+then
+  alias ls="ls --color=auto"
+elif ls -G -d . &> /dev/null
+then
+  alias ls='ls -G'        # Compact view, show colors
 fi
 
 # List directory contents
 alias sl=ls
-alias la='ls -AF' # Compact view, show hidden
+alias la='ls -AF'       # Compact view, show hidden
 alias ll='ls -al'
 alias l='ls -a'
 alias l1='ls -1'
-alias lf='ls -F'
 
-alias _='sudo'
+alias _="sudo"
 
 # Shortcuts to edit startup files
-alias vbrc='${VISUAL:-vim} ~/.bashrc'
-alias vbpf='${VISUAL:-vim} ~/.bash_profile'
+alias vbrc="vim ~/.bashrc"
+alias vbpf="vim ~/.bash_profile"
 
 # colored grep
 # Need to check an existing file for a pattern that will be found to ensure
 # that the check works when on an OS that supports the color option
-if command grep --color=auto "a" "${BASH_IT?}"/*.md &> /dev/null; then
-	alias grep='grep --color=auto'
+if grep --color=auto "a" "${BASH_IT}/"*.md &> /dev/null
+then
+  alias grep='grep --color=auto'
 fi
 
-if _command_exists gshuf; then
-	alias shuf=gshuf
+if which gshuf &> /dev/null
+then
+  alias shuf=gshuf
 fi
 
-alias c='clear'
-alias cls='clear'
+# alias c='clear'
+# alias k='clear'
+# alias cls='clear'
 
-alias edit='${EDITOR:-${ALTERNATE_EDITOR:-nano}}'
-alias pager='${PAGER:=less}'
+alias edit="$EDITOR"
+alias pager="$PAGER"
 
-alias q='exit'
+# alias q='exit'
 
-alias irc='${IRC_CLIENT:=irc}'
+alias irc="${IRC_CLIENT:=irc}"
 
 # Language aliases
 alias rb='ruby'
@@ -48,7 +53,7 @@ alias ipy='ipython'
 
 # Pianobar can be found here: http://github.com/PromyLOPh/pianobar/
 
-alias piano='pianobar'
+# alias piano='pianobar'
 
 alias ..='cd ..'         # Go up one directory
 alias cd..='cd ..'       # Common misspelling for going up one directory
@@ -60,8 +65,9 @@ alias -- -='cd -'        # Go back
 alias h='history'
 
 # Tree
-if ! _command_exists tree; then
-	alias tree="find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'"
+if [ ! -x "$(which tree 2>/dev/null)" ]
+then
+  alias tree="find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'"
 fi
 
 # Directory
@@ -69,17 +75,21 @@ alias md='mkdir -p'
 alias rd='rmdir'
 
 # Shorten extract
-alias xt='extract'
+alias xt="extract"
+
+# sudo editors
+alias svim="sudo vim"
+# alias snano="sudo nano"
 
 # Display whatever file is regular file or folder
-function catt() {
-	for i in "$@"; do
-		if [[ -d "$i" ]]; then
-			ls "$i"
-		else
-			cat "$i"
-		fi
-	done
+catt() {
+  for i in "$@"; do
+    if [ -d "$i" ]; then
+      ls "$i"
+    else
+      cat "$i"
+    fi
+  done
 }
 
 # The Bash-it aliases were moved to the `bash-it.aliases.bash` file. The intent of this
@@ -88,5 +98,5 @@ function catt() {
 # aliases and enable just the ones for Bash-it explicitly:
 # bash-it disable alias general
 # bash-it enable alias bash-it
-# shellcheck source-path=SCRIPTDIR
+# shellcheck source=./bash-it.aliases.bash
 source "$BASH_IT/aliases/available/bash-it.aliases.bash"
diff --git a/aliases/available/git.aliases.bash b/aliases/available/git.aliases.bash
index 5572c932..8cafa82b 100644
--- a/aliases/available/git.aliases.bash
+++ b/aliases/available/git.aliases.bash
@@ -1,4 +1,5 @@
 # shellcheck shell=bash
+cite 'about-alias'
 about-alias 'common git abbreviations'
 
 alias g='git'
@@ -8,18 +9,13 @@ alias get='git'
 alias ga='git add'
 alias gall='git add -A'
 alias gap='git add -p'
-alias gav='git add -v'
 
 # branch
 alias gb='git branch'
-alias gba='git branch --all'
-alias gbd='git branch -d'
 alias gbD='git branch -D'
-alias gbl='git branch --list'
-alias gbla='git branch --list --all'
-alias gblr='git branch --list --remotes'
-alias gbm='git branch --move'
-alias gbr='git branch --remotes'
+alias gba='git branch -a'
+alias gbd='git branch -d'
+alias gbm='git branch -m'
 alias gbt='git branch --track'
 alias gdel='git branch -D'
 
@@ -135,7 +131,6 @@ alias grb='git rebase'
 alias grbc='git rebase --continue'
 alias grm='git rebase $(get_default_branch)'
 alias grmi='git rebase $(get_default_branch) -i'
-alias grma='GIT_SEQUENCE_EDITOR=: git rebase  $(get_default_branch) -i --autosquash'
 alias gprom='git fetch origin $(get_default_branch) && git rebase origin/$(get_default_branch) && git update-ref refs/heads/$(get_default_branch) origin/$(get_default_branch)' # Rebase with latest remote
 
 # reset
@@ -204,7 +199,7 @@ function gdv() {
 }
 
 function get_default_branch() {
-	if git branch | grep -q '^. main\s*$'; then
+	if git branch | grep -q main; then
 		echo main
 	else
 		echo master
diff --git a/aliases/available/gitsvn.aliases.bash b/aliases/available/gitsvn.aliases.bash
index 3c578445..feb608be 100644
--- a/aliases/available/gitsvn.aliases.bash
+++ b/aliases/available/gitsvn.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'common git-svn abbreviations'
 
 # Aliases
diff --git a/aliases/available/heroku.aliases.bash b/aliases/available/heroku.aliases.bash
index 4c822594..a749d424 100644
--- a/aliases/available/heroku.aliases.bash
+++ b/aliases/available/heroku.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'heroku task abbreviations'
 
 # heroku
diff --git a/aliases/available/hg.aliases.bash b/aliases/available/hg.aliases.bash
index d9101a03..eea819ff 100644
--- a/aliases/available/hg.aliases.bash
+++ b/aliases/available/hg.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'mercurial abbreviations'
 
 alias hs='hg status'
diff --git a/aliases/available/homebrew-cask.aliases.bash b/aliases/available/homebrew-cask.aliases.bash
index 43d206d4..57d8161c 100644
--- a/aliases/available/homebrew-cask.aliases.bash
+++ b/aliases/available/homebrew-cask.aliases.bash
@@ -1,5 +1,7 @@
-# shellcheck shell=bash
-about-alias 'Some aliases for Homebrew Cask'
+# Some aliases for Homebrew Cask
+
+cite 'about-alias'
+about-alias 'homebrew-cask abbreviations'
 
 alias bcin='brew cask install'
 alias bcrm='brew cask uninstall'
diff --git a/aliases/available/homebrew.aliases.bash b/aliases/available/homebrew.aliases.bash
index f35a38d3..15907518 100644
--- a/aliases/available/homebrew.aliases.bash
+++ b/aliases/available/homebrew.aliases.bash
@@ -1,5 +1,7 @@
-# shellcheck shell=bash
-about-alias 'Some aliases for Homebrew'
+# Some aliases for Homebrew
+
+cite 'about-alias'
+about-alias 'homebrew abbreviations'
 
 alias bup='brew update && brew upgrade'
 alias bout='brew outdated'
diff --git a/aliases/available/homesick.aliases.bash b/aliases/available/homesick.aliases.bash
index 00101eed..548efc3b 100644
--- a/aliases/available/homesick.aliases.bash
+++ b/aliases/available/homesick.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'homesick aliases'
 
 # Aliases
@@ -19,5 +19,6 @@ alias sikpsh="homesick push dotfiles"
 alias sikrc="homesick rc dotfiles"
 alias sikpth="homesick show_path dotfiles"
 alias sikst="homesick status dotfiles"
+alias siktrk="homesick track $1 dotfiles"
 alias sikulnk="homesick unlink dotfiles"
 alias sikv="homesick version"
diff --git a/aliases/available/jitsu.aliases.bash b/aliases/available/jitsu.aliases.bash
index f056e749..91e96849 100644
--- a/aliases/available/jitsu.aliases.bash
+++ b/aliases/available/jitsu.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'jitsu task abbreviations'
 
 # jitsu
diff --git a/aliases/available/kubectl.aliases.bash b/aliases/available/kubectl.aliases.bash
index ce01bdaf..440a9041 100644
--- a/aliases/available/kubectl.aliases.bash
+++ b/aliases/available/kubectl.aliases.bash
@@ -1,16 +1,25 @@
-# shellcheck shell=bash
+#!/bin/bash
+#
+# -binaryanomaly
+
+cite 'about-alias'
 about-alias 'kubectl aliases'
 
-if _command_exists kubectl; then
-	alias kc='kubectl'
-	alias kcgp='kubectl get pods'
-	alias kcgd='kubectl get deployments'
-	alias kcgn='kubectl get nodes'
-	alias kcdp='kubectl describe pod'
-	alias kcdd='kubectl describe deployment'
-	alias kcdn='kubectl describe node'
-	alias kcgpan='kubectl get pods --all-namespaces'
-	alias kcgdan='kubectl get deployments --all-namespaces'
-	# launches a disposable netshoot pod in the k8s cluster
-	alias kcnetshoot='kubectl run netshoot-$(date +%s) --rm -i --tty --image nicolaka/netshoot -- /bin/bash'
-fi
+function _set_pkg_aliases()
+{
+  if _command_exists kubectl; then
+    alias kc='kubectl'
+    alias kcgp='kubectl get pods'
+    alias kcgd='kubectl get deployments'
+    alias kcgn='kubectl get nodes'
+    alias kcdp='kubectl describe pod'
+    alias kcdd='kubectl describe deployment'
+    alias kcdn='kubectl describe node'
+    alias kcgpan='kubectl get pods --all-namespaces'
+    alias kcgdan='kubectl get deployments --all-namespaces'
+    # launches a disposable netshoot pod in the k8s cluster
+    alias kcnetshoot='kubectl run netshoot-$(date +%s) --rm -i --tty --image nicolaka/netshoot -- /bin/bash'
+  fi
+}
+
+_set_pkg_aliases
diff --git a/aliases/available/laravel.aliases.bash b/aliases/available/laravel.aliases.bash
index 50a9749f..75a51a01 100644
--- a/aliases/available/laravel.aliases.bash
+++ b/aliases/available/laravel.aliases.bash
@@ -1,9 +1,9 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'laravel artisan abbreviations'
 
 # A list of useful laravel aliases
 
-alias laravel='${HOME?}/.composer/vendor/bin/laravel'
+alias laravel="${HOME}/.composer/vendor/bin/laravel"
 # asset
 alias a:apub='php artisan asset:publish'
 
diff --git a/aliases/available/maven.aliases.bash b/aliases/available/maven.aliases.bash
index 737826eb..f8a44a1c 100644
--- a/aliases/available/maven.aliases.bash
+++ b/aliases/available/maven.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'maven abbreviations'
 
 alias mci='mvn clean install'
diff --git a/aliases/available/msys2.aliases.bash b/aliases/available/msys2.aliases.bash
index da41cc82..a309a5b2 100644
--- a/aliases/available/msys2.aliases.bash
+++ b/aliases/available/msys2.aliases.bash
@@ -1,4 +1,6 @@
-# shellcheck shell=bash
+#!/bin/bash
+
+cite 'about-alias'
 about-alias 'MSYS2 aliases'
 
 LS_COMMON="-hG"
@@ -7,8 +9,7 @@ LS_COMMON="$LS_COMMON -I NTUSER.DAT\* -I ntuser.dat\*"
 
 # alias
 # setup the main ls alias if we've established common args
-alias ls='command ls ${LS_COMMON:-}'
+test -n "$LS_COMMON" && alias ls="command ls $LS_COMMON"
 alias ll="ls -l"
 alias la="ls -a"
 alias lal="ll -a"
-alias lf="ls -F"
diff --git a/aliases/available/mutt.aliases.bash b/aliases/available/mutt.aliases.bash
new file mode 100644
index 00000000..0e0cb818
--- /dev/null
+++ b/aliases/available/mutt.aliases.bash
@@ -0,0 +1,11 @@
+cite 'about-alias'
+about-alias 'mutt aliases'
+
+alias email='EMAILBOX=uff neomutt'
+alias email.ufrj='EMAILBOX=ufrj neomutt'
+alias email.del='EMAILBOX=del neomutt'
+alias email.poli='EMAILBOX=poli neomutt'
+alias email.hilda='EMAILBOX=hilda neomutt'
+alias email.uerj='EMAILBOX=uerj neomutt'
+
+# vi:set nu nowrap:
diff --git a/aliases/available/node.aliases.bash b/aliases/available/node.aliases.bash
index a9e29743..a1408f26 100644
--- a/aliases/available/node.aliases.bash
+++ b/aliases/available/node.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'the Node.js environment aliases'
 
 # alias to setup nodejs development environment
diff --git a/aliases/available/npm.aliases.bash b/aliases/available/npm.aliases.bash
index 27cf5c9f..bd742d5d 100644
--- a/aliases/available/npm.aliases.bash
+++ b/aliases/available/npm.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'common npm abbreviations'
 
 # Aliases
diff --git a/aliases/available/osx.aliases.bash b/aliases/available/osx.aliases.bash
index 0a16c06f..5e30bc7c 100644
--- a/aliases/available/osx.aliases.bash
+++ b/aliases/available/osx.aliases.bash
@@ -1,28 +1,27 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'osx-specific aliases'
 
 # Desktop Programs
-alias fireworks='open -a "/Applications/Adobe Fireworks CS3/Adobe Fireworks CS3.app"'
-alias photoshop='open -a "/Applications/Adobe Photoshop CS3/Adobe Photoshop.app"'
-alias preview='open -a "${PREVIEW?}"'
-alias xcode='open -a "/Applications/XCode.app"'
-alias filemerge='open -a "/Developer/Applications/Utilities/FileMerge.app"'
-alias safari='open -a safari'
-alias firefox='open -a firefox'
-alias chrome='open -a "Google Chrome"'
-alias chromium='open -a chromium'
-alias brave='open -a "Brave Browser"'
-alias dashcode='open -a dashcode'
+alias fireworks="open -a '/Applications/Adobe Fireworks CS3/Adobe Fireworks CS3.app'"
+alias photoshop="open -a '/Applications/Adobe Photoshop CS3/Adobe Photoshop.app'"
+alias preview="open -a '$PREVIEW'"
+alias xcode="open -a '/Applications/XCode.app'"
+alias filemerge="open -a '/Developer/Applications/Utilities/FileMerge.app'"
+alias safari="open -a safari"
+alias firefox="open -a firefox"
+alias chrome="open -a google\ chrome"
+alias chromium="open -a chromium"
+alias dashcode="open -a dashcode"
 alias f='open -a Finder '
 alias fh='open -a Finder .'
 alias textedit='open -a TextEdit'
 alias hex='open -a "Hex Fiend"'
 alias skype='open -a Skype'
 alias mou='open -a Mou'
-alias subl='open -a "Sublime Text"'
+alias subl='open -a Sublime\ Text'
 
-if [[ -s /usr/bin/firefox ]]; then
-	unalias firefox
+if [ -s /usr/bin/firefox ] ; then
+  unalias firefox
 fi
 
 # Requires growlnotify, which can be found in the Growl DMG under "Extras"
@@ -38,20 +37,19 @@ alias whotunes='lsof -r 2 -n -P -F n -c iTunes -a -i TCP@`hostname`:3689'
 alias flush='dscacheutil -flushcache'
 
 # Show/hide hidden files (for Mac OS X Mavericks)
-alias showhidden='defaults write com.apple.finder AppleShowAllFiles TRUE'
-alias hidehidden='defaults write com.apple.finder AppleShowAllFiles FALSE'
+alias showhidden="defaults write com.apple.finder AppleShowAllFiles TRUE"
+alias hidehidden="defaults write com.apple.finder AppleShowAllFiles FALSE"
 
 # From http://apple.stackexchange.com/questions/110343/copy-last-command-in-terminal
-# shellcheck disable=SC2142 # The quoting confuses `shellcheck`...
-alias copyLastCmd="fc -ln -1 | awk '{\$1=\$1}1' ORS='' | pbcopy"
+alias copyLastCmd='fc -ln -1 | awk '\''{$1=$1}1'\'' ORS='\'''\'' | pbcopy'
 
 # Use Finder's Quick Look on a file (^C or space to close)
 alias ql='qlmanage -p 2>/dev/null'
 
 # Mute/Unmute the system volume. Plays nice with all other volume settings.
-alias mute='osascript -e "set volume output muted true"'
-alias unmute='osascript -e "set volume output muted false"'
+alias mute="osascript -e 'set volume output muted true'"
+alias unmute="osascript -e 'set volume output muted false'"
 
 # Pin to the tail of long commands for an audible alert after long processes
 ## curl http://downloads.com/hugefile.zip; lmk
-alias lmk='say "Process complete."'
+alias lmk="say 'Process complete.'"
diff --git a/aliases/available/phoenix.aliases.bash b/aliases/available/phoenix.aliases.bash
index 08cef4f4..64728a2e 100644
--- a/aliases/available/phoenix.aliases.bash
+++ b/aliases/available/phoenix.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'phoenix abbreviations'
 
 # Phoenix Commands
diff --git a/aliases/available/puppet.aliases.bash b/aliases/available/puppet.aliases.bash
index c92d13b1..15b69923 100644
--- a/aliases/available/puppet.aliases.bash
+++ b/aliases/available/puppet.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'puppet aliases'
 
 # Aliases
diff --git a/aliases/available/pyrocms.aliases.bash b/aliases/available/pyrocms.aliases.bash
index 77865a23..d19dff91 100644
--- a/aliases/available/pyrocms.aliases.bash
+++ b/aliases/available/pyrocms.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'pyrocms abbreviations'
 
 ###
@@ -7,146 +7,146 @@ about-alias 'pyrocms abbreviations'
 ###
 
 # general
-alias a:cl="php artisan clear-compiled" # Remove the compiled class file
-alias a:d="php artisan down"            # Put the application into maintenance mode
-alias a:e="php artisan env"             # Display the current framework environment
-alias a:h="php artisan help"            # Displays help for a command
-alias a:i="php artisan install"         # Install the Streams Platform.
-alias a:ls="php artisan list"           # Lists commands
-alias a:mg="php artisan migrate"        # Run the database migrations
-alias a:op="php artisan optimize"       # Optimize the framework for better performance (deprecated)
-alias a:pr="php artisan preset"         # Swap the front-end scaffolding for the application
-alias a:s="php artisan serve"           # Serve the application on the PHP development server
-alias a:u="php artisan up"              # Bring the application out of maintenance mode
+alias a:cl="php artisan clear-compiled"          # Remove the compiled class file
+alias a:d="php artisan down"                     # Put the application into maintenance mode
+alias a:e="php artisan env"                      # Display the current framework environment
+alias a:h="php artisan help"                     # Displays help for a command
+alias a:i="php artisan install"                  # Install the Streams Platform.
+alias a:ls="php artisan list"                    # Lists commands
+alias a:mg="php artisan migrate"                 # Run the database migrations
+alias a:op="php artisan optimize"                # Optimize the framework for better performance (deprecated)
+alias a:pr="php artisan preset"                  # Swap the front-end scaffolding for the application
+alias a:s="php artisan serve"                    # Serve the application on the PHP development server
+alias a:u="php artisan up"                       # Bring the application out of maintenance mode
 
 # addon
-alias a:ad:i="php artisan addon:install"   # Install an addon.
-alias a:ad:p="php artisan addon:publish"   # Publish an the configuration and translations for an addon.
-alias a:ad:r="php artisan addon:reinstall" # Reinstall an addon.
-alias a:ad:u="php artisan addon:uninstall" # Uninstall an addon.
+alias a:ad:i="php artisan addon:install"         # Install an addon.
+alias a:ad:p="php artisan addon:publish"         # Publish an the configuration and translations for an addon.
+alias a:ad:r="php artisan addon:reinstall"       # Reinstall an addon.
+alias a:ad:u="php artisan addon:uninstall"       # Uninstall an addon.
 
 # app
-alias a:ap:n="php artisan app:name"    # Set the application namespace
-alias a:ap:p="php artisan app:publish" # Publish general application override files.
+alias a:ap:n="php artisan app:name"              # Set the application namespace
+alias a:ap:p="php artisan app:publish"           # Publish general application override files.
 
 # assets
-alias a:as:cl="php artisan assets:clear" # Clear compiled public assets.
+alias a:as:cl="php artisan assets:clear"         # Clear compiled public assets.
 
 # auth
-alias a:au:clrs="php artisan auth:clear-resets" # Flush expired password reset tokens
+alias a:au:clrs="php artisan auth:clear-resets"  # Flush expired password reset tokens
 
 # cache
-alias a:ca:cl="php artisan cache:clear" # Flush the application cache
-alias a:ca:f="php artisan cache:forget" # Remove an item from the cache
-alias a:ca:t="php artisan cache:table"  # Create a migration for the cache database table
+alias a:ca:cl="php artisan cache:clear"          # Flush the application cache
+alias a:ca:f="php artisan cache:forget"          # Remove an item from the cache
+alias a:ca:t="php artisan cache:table"           # Create a migration for the cache database table
 
 # config
-alias a:co:ca="php artisan config:cache" # Create a cache file for faster configuration loading
-alias a:co:cl="php artisan config:clear" # Remove the configuration cache file
+alias a:co:ca="php artisan config:cache"         # Create a cache file for faster configuration loading
+alias a:co:cl="php artisan config:clear"         # Remove the configuration cache file
 
 # db
-alias a:db:s="php artisan db:seed" # Seed the database with records
+alias a:db:s="php artisan db:seed"               # Seed the database with records
 
 # env
-alias a:en:s="php artisan env:set" # Set an environmental value.
+alias a:en:s="php artisan env:set"               # Set an environmental value.
 
 # event
-alias a:ev:g="php artisan event:generate" # Generate the missing events and listeners based on registration
+alias a:ev:g="php artisan event:generate"        # Generate the missing events and listeners based on registration
 
 # extension
-alias a:ex:i="php artisan extension:install"   # Install a extension.
-alias a:ex:r="php artisan extension:reinstall" # Reinstall a extension.
-alias a:ex:u="php artisan extension:uninstall" # Uninstall a extension.
+alias a:ex:i="php artisan extension:install"     # Install a extension.
+alias a:ex:r="php artisan extension:reinstall"   # Reinstall a extension.
+alias a:ex:u="php artisan extension:uninstall"   # Uninstall a extension.
 
 # files
-alias a:fi:cl="php artisan files:clean" # Clean missing files from the files table.
+alias a:fi:cl="php artisan files:clean"          # Clean missing files from the files table.
 
 # key
-alias a:ke:g="php artisan key:generate" # Set the application key
+alias a:ke:g="php artisan key:generate"          # Set the application key
 
 # make
-alias a:mk:ad="php artisan make:addon"        # Create a new addon.
-alias a:mk:au="php artisan make:auth"         # Scaffold basic login and registration views and routes
-alias a:mk:cm="php artisan make:command"      # Create a new Artisan command
-alias a:mk:ct="php artisan make:controller"   # Create a new controller class
-alias a:mk:ev="php artisan make:event"        # Create a new event class
-alias a:mk:fa="php artisan make:factory"      # Create a new model factory
-alias a:mk:j="php artisan make:job"           # Create a new job class
-alias a:mk:li="php artisan make:listener"     # Create a new event listener class
-alias a:mk:ma="php artisan make:mail"         # Create a new email class
-alias a:mk:mw="php artisan make:middleware"   # Create a new middleware class
-alias a:mk:mg="php artisan make:migration"    # Create a new migration file
-alias a:mk:md="php artisan make:model"        # Create a new Eloquent model class
-alias a:mk:no="php artisan make:notification" # Create a new notification class
-alias a:mk:po="php artisan make:policy"       # Create a new policy class
-alias a:mk:pr="php artisan make:provider"     # Create a new service provider class
-alias a:mk:rq="php artisan make:request"      # Create a new form request class
-alias a:mk:rs="php artisan make:resource"     # Create a new resource
-alias a:mk:rl="php artisan make:rule"         # Create a new validation rule
-alias a:mk:sd="php artisan make:seeder"       # Create a new seeder class
-alias a:mk:st="php artisan make:stream"       # Make a streams entity namespace.
-alias a:mk:ts="php artisan make:test"         # Create a new test class
+alias a:mk:ad="php artisan make:addon"           # Create a new addon.
+alias a:mk:au="php artisan make:auth"            # Scaffold basic login and registration views and routes
+alias a:mk:cm="php artisan make:command"         # Create a new Artisan command
+alias a:mk:ct="php artisan make:controller"      # Create a new controller class
+alias a:mk:ev="php artisan make:event"           # Create a new event class
+alias a:mk:fa="php artisan make:factory"         # Create a new model factory
+alias a:mk:j="php artisan make:job"              # Create a new job class
+alias a:mk:li="php artisan make:listener"        # Create a new event listener class
+alias a:mk:ma="php artisan make:mail"            # Create a new email class
+alias a:mk:mw="php artisan make:middleware"      # Create a new middleware class
+alias a:mk:mg="php artisan make:migration"       # Create a new migration file
+alias a:mk:md="php artisan make:model"           # Create a new Eloquent model class
+alias a:mk:no="php artisan make:notification"    # Create a new notification class
+alias a:mk:po="php artisan make:policy"          # Create a new policy class
+alias a:mk:pr="php artisan make:provider"        # Create a new service provider class
+alias a:mk:rq="php artisan make:request"         # Create a new form request class
+alias a:mk:rs="php artisan make:resource"        # Create a new resource
+alias a:mk:rl="php artisan make:rule"            # Create a new validation rule
+alias a:mk:sd="php artisan make:seeder"          # Create a new seeder class
+alias a:mk:st="php artisan make:stream"          # Make a streams entity namespace.
+alias a:mk:ts="php artisan make:test"            # Create a new test class
 
 # migrate
-alias a:mg:fr="php artisan migrate:fresh"    # Drop all tables and re-run all migrations
-alias a:mg:i="php artisan migrate:install"   # Create the migration repository
-alias a:mg:rf="php artisan migrate:refresh"  # Reset and re-run all migrations
-alias a:mg:rs="php artisan migrate:reset"    # Rollback all database migrations
-alias a:mg:rl="php artisan migrate:rollback" # Rollback the last database migration
-alias a:mg:st="php artisan migrate:status"   # Show the status of each migration
+alias a:mg:fr="php artisan migrate:fresh"        # Drop all tables and re-run all migrations
+alias a:mg:i="php artisan migrate:install"       # Create the migration repository
+alias a:mg:rf="php artisan migrate:refresh"      # Reset and re-run all migrations
+alias a:mg:rs="php artisan migrate:reset"        # Rollback all database migrations
+alias a:mg:rl="php artisan migrate:rollback"     # Rollback the last database migration
+alias a:mg:st="php artisan migrate:status"       # Show the status of each migration
 
 # module
-alias a:mo:i="php artisan module:install"   # Install a module.
-alias a:mo:r="php artisan module:reinstall" # Reinstall a module.
-alias a:mo:u="php artisan module:uninstall" # Uninstall a module.
+alias a:mo:i="php artisan module:install"        # Install a module.
+alias a:mo:r="php artisan module:reinstall"      # Reinstall a module.
+alias a:mo:u="php artisan module:uninstall"      # Uninstall a module.
 
 # notifications
-alias a:no:tb="php artisan notifications:table" # Create a migration for the notifications table
+alias a:no:tb="php artisan notifications:table"  # Create a migration for the notifications table
 
 # package
-alias a:pk:d="php artisan package:discover" # Rebuild the cached package manifest
+alias a:pk:d="php artisan package:discover"      # Rebuild the cached package manifest
 
 # queue
-alias a:qu:fa="php artisan queue:failed"       # List all of the failed queue jobs
-alias a:qu:ft="php artisan queue:failed-table" # Create a migration for the failed queue jobs database table
-alias a:qu:fl="php artisan queue:flush"        # Flush all of the failed queue jobs
-alias a:qu:fg="php artisan queue:forget"       # Delete a failed queue job
-alias a:qu:li="php artisan queue:listen"       # Listen to a given queue
-alias a:qu:rs="php artisan queue:restart"      # Restart queue worker daemons after their current job
-alias a:qu:rt="php artisan queue:retry"        # Retry a failed queue job
-alias a:qu:tb="php artisan queue:table"        # Create a migration for the queue jobs database table
-alias a:qu:w="php artisan queue:work"          # Start processing jobs on the queue as a daemon
+alias a:qu:fa="php artisan queue:failed"         # List all of the failed queue jobs
+alias a:qu:ft="php artisan queue:failed-table"   # Create a migration for the failed queue jobs database table
+alias a:qu:fl="php artisan queue:flush"          # Flush all of the failed queue jobs
+alias a:qu:fg="php artisan queue:forget"         # Delete a failed queue job
+alias a:qu:li="php artisan queue:listen"         # Listen to a given queue
+alias a:qu:rs="php artisan queue:restart"        # Restart queue worker daemons after their current job
+alias a:qu:rt="php artisan queue:retry"          # Retry a failed queue job
+alias a:qu:tb="php artisan queue:table"          # Create a migration for the queue jobs database table
+alias a:qu:w="php artisan queue:work"            # Start processing jobs on the queue as a daemon
 
 # route
-alias a:ro:ca="php artisan route:cache" # Create a route cache file for faster route registration
-alias a:ro:cl="php artisan route:clear" # Remove the route cache file
-alias a:ro:ls="php artisan route:list"  # List all registered routes
+alias a:ro:ca="php artisan route:cache"          # Create a route cache file for faster route registration
+alias a:ro:cl="php artisan route:clear"          # Remove the route cache file
+alias a:ro:ls="php artisan route:list"           # List all registered routes
 
 # schedule
-alias a:sc:r="php artisan schedule:run" # Run the scheduled commands
+alias a:sc:r="php artisan schedule:run"          # Run the scheduled commands
 
 # scout
-alias a:su:fl="php artisan scout:flush"  # Flush all of the model's records from the index
-alias a:su:im="php artisan scout:import" # Import the given model into the search index
+alias a:su:fl="php artisan scout:flush"          # Flush all of the model's records from the index
+alias a:su:im="php artisan scout:import"         # Import the given model into the search index
 
 # session
-alias a:se:tb="php artisan session:table" # Create a migration for the session database table
+alias a:se:tb="php artisan session:table"        # Create a migration for the session database table
 
 # storage
-alias a:sg:l="php artisan storage:link" # Create a symbolic link from "public/storage" to "storage/app/public"
+alias a:sg:l="php artisan storage:link"          # Create a symbolic link from "public/storage" to "storage/app/public"
 
 # streams
-alias a:st:cl="php artisan streams:cleanup" # Cleanup streams entry models.
-alias a:st:co="php artisan streams:compile" # Compile streams entry models.
-alias a:st:d="php artisan streams:destroy"  # Destroy a namespace.
-alias a:st:p="php artisan streams:publish"  # Publish configuration and translations for streams.
-alias a:st:r="php artisan streams:refresh"  # Refresh streams generated components.
+alias a:st:cl="php artisan streams:cleanup"      # Cleanup streams entry models.
+alias a:st:co="php artisan streams:compile"      # Compile streams entry models.
+alias a:st:d="php artisan streams:destroy"       # Destroy a namespace.
+alias a:st:p="php artisan streams:publish"       # Publish configuration and translations for streams.
+alias a:st:r="php artisan streams:refresh"       # Refresh streams generated components.
 
 # tntsearch
-alias a:tn:im="php artisan tntsearch:import" # Import the given model into the search index
+alias a:tn:im="php artisan tntsearch:import"     # Import the given model into the search index
 
 # vendor
-alias a:ve:p="php artisan vendor:publish" # Publish any publishable assets from vendor packages
+alias a:ve:p="php artisan vendor:publish"        # Publish any publishable assets from vendor packages
 
 # view
-alias a:vi:cl="php artisan view:clear" # Clear all compiled view files
+alias a:vi:cl="php artisan view:clear"           # Clear all compiled view files
diff --git a/aliases/available/rails.aliases.bash b/aliases/available/rails.aliases.bash
index 4de4faff..c776660e 100644
--- a/aliases/available/rails.aliases.bash
+++ b/aliases/available/rails.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'rails abbreviations'
 
 # Rails Commands
@@ -14,9 +14,9 @@ alias rd='rails destroy'
 alias dbm='rake db:migrate'
 
 alias ss='script/server'
-alias ts="thin start" # thin server
+alias ts="thin start"     # thin server
 alias sc='script/console'
 alias restartapp='touch tmp/restart.txt'
-alias restart='touch tmp/restart.txt' # restart passenger
+alias restart='touch tmp/restart.txt'  # restart passenger
 alias devlog='tail -f log/development.log'
 alias taild='tail -f log/development.log' # tail dev log
diff --git a/aliases/available/redis.aliases.bash b/aliases/available/redis.aliases.bash
new file mode 100644
index 00000000..d99bdfb1
--- /dev/null
+++ b/aliases/available/redis.aliases.bash
@@ -0,0 +1,26 @@
+cite 'about-alias'
+about-alias 'redis aliases'
+
+_redis_list(){
+	redis-cli ZRANGE "$1" 0 -1
+}
+_redis_zram(){
+	db=$1
+	shift
+	redis-cli zadd $db 1 $1
+}
+
+alias redis.list='_redis_list'
+alias redis.keys='redis-cli KEYS \*'
+alias redis.get='redis-bash-cli get'
+alias redis.set='redis-bash-cli set'
+alias redis.del='redis-bash-cli del'
+alias redis.zadd='_redis_zram'
+
+alias last.list='redis-cli ZRANGE vimmru 0 -1'
+alias last.clean='redis-cli DEL vimmru'
+
+
+#I  $ history | grep -e 'hub\s\+clone ' | sed -e 's/^.*|//' -e '/^ hub/!d' -e 's/^ //' -e 's/  / /g' -e 's/ $//'| sort | uniq| sed 's/^hub clone //' | xargs -n 1 echo redis.zadd hub
+
+# vi:set nu nowrap:
diff --git a/aliases/available/svn.aliases.bash b/aliases/available/svn.aliases.bash
index 4d3de464..3d6d263e 100644
--- a/aliases/available/svn.aliases.bash
+++ b/aliases/available/svn.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'common svn abbreviations'
 
 # Aliases
diff --git a/aliases/available/systemd.aliases.bash b/aliases/available/systemd.aliases.bash
index 57351ae0..19b0eae6 100644
--- a/aliases/available/systemd.aliases.bash
+++ b/aliases/available/systemd.aliases.bash
@@ -1,22 +1,22 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'systemd service'
 
 case $OSTYPE in
-	linux*)
-		# Improve aliases by bringing the common root `sc|scd` + `sre` for action + `u` for user
-		alias sc='systemctl'
-		alias scu='systemctl --user'
-		alias scdr='systemctl daemon-reload'
-		alias scdru='systemctl --user daemon-reload'
-		alias scr='systemctl restart'
-		alias scru='systemctl --user restart'
-		alias sce='systemctl stop'
-		alias sceu='systemctl --user stop'
-		alias scs='systemctl start'
-		alias scsu='systemctl --user start'
-		# Keeping previous aliases for a non-breaking change.
-		alias scue='sceu'
-		alias scus='scsu'
-		alias scur='scdru'
-		;;
+    linux*)
+# Improve aliases by bringing the common root `sc|scd` + `sre` for action + `u` for user
+	alias sc='systemctl'
+	alias scu='systemctl --user'
+	alias scdr='systemctl daemon-reload'
+	alias scdru='systemctl --user daemon-reload'
+	alias scr='systemctl restart'
+	alias scru='systemctl --user restart'
+	alias sce='systemctl stop'
+	alias sceu='systemctl --user stop'
+	alias scs='systemctl start'
+	alias scsu='systemctl --user start'
+# Keeping previous aliases for a non-breaking change.
+	alias scue='sceu'
+	alias scus='scsu'
+	alias scur='scdru'
+    ;;
 esac
diff --git a/aliases/available/terraform.aliases.bash b/aliases/available/terraform.aliases.bash
index fedd3198..09380868 100644
--- a/aliases/available/terraform.aliases.bash
+++ b/aliases/available/terraform.aliases.bash
@@ -1,8 +1,9 @@
-# shellcheck shell=bash
-about-alias 'Aliases for Terraform and Terragrunt'
+# Aliases for Terraform and Terragrunt
+
+cite 'about-alias'
+about-alias 'Terraform abbreviations'
 
 alias tf='terraform'
-alias tfi='tf init'
 alias tfv='terraform validate'
 alias tfp='terraform plan'
 alias tfa='terraform apply'
diff --git a/aliases/available/terragrunt.aliases.bash b/aliases/available/terragrunt.aliases.bash
index 94892901..9395b351 100644
--- a/aliases/available/terragrunt.aliases.bash
+++ b/aliases/available/terragrunt.aliases.bash
@@ -1,5 +1,7 @@
-# shellcheck shell=bash
-about-alias 'Aliases for Terraform and Terragrunt'
+# Aliases for Terraform and Terragrunt
+
+cite 'about-alias'
+about-alias 'Terragrunt abbreviations'
 
 alias tg='terragrunt'
 alias tgv='terragrunt validate'
diff --git a/aliases/available/textmate.aliases.bash b/aliases/available/textmate.aliases.bash
index e53eed1a..f0f69e43 100644
--- a/aliases/available/textmate.aliases.bash
+++ b/aliases/available/textmate.aliases.bash
@@ -1,10 +1,10 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'textmate abbreviations'
 
 case $OSTYPE in
-	darwin*)
-		# Textmate
-		alias e='mate . &'
-		alias et='mate app config db lib public script test spec config.ru Gemfile Rakefile README &'
-		;;
+  darwin*)
+    # Textmate
+    alias e='mate . &'
+    alias et='mate app config db lib public script test spec config.ru Gemfile Rakefile README &'
+    ;;
 esac
diff --git a/aliases/available/tmux.aliases.bash b/aliases/available/tmux.aliases.bash
index 192db5b5..1b07f149 100644
--- a/aliases/available/tmux.aliases.bash
+++ b/aliases/available/tmux.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'Tmux terminal multiplexer'
 
 alias txl='tmux ls'
diff --git a/aliases/available/todo.txt-cli.aliases.bash b/aliases/available/todo.txt-cli.aliases.bash
index 359321a4..5bf35d0d 100644
--- a/aliases/available/todo.txt-cli.aliases.bash
+++ b/aliases/available/todo.txt-cli.aliases.bash
@@ -1,8 +1,8 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'todo.txt-cli abbreviations'
 
-alias tls='"${TODO?}" ls'
-alias ta='"${TODO?}" a'
-alias trm='"${TODO?}" rm'
-alias tdo='"${TODO?}" do'
-alias tpri='"${TODO?}" pri'
+alias tls="$TODO ls"
+alias ta="$TODO a"
+alias trm="$TODO rm"
+alias tdo="$TODO do"
+alias tpri="$TODO pri"
diff --git a/aliases/available/uuidgen.aliases.bash b/aliases/available/uuidgen.aliases.bash
index 45c36820..aada05fb 100644
--- a/aliases/available/uuidgen.aliases.bash
+++ b/aliases/available/uuidgen.aliases.bash
@@ -1,11 +1,11 @@
-# shellcheck shell=bash
+cite 'uuid-alias'
 about-alias 'uuidgen aliases'
 
 if _command_exists uuid; then # Linux
-	alias uuidu="uuid | tr '[:lower:]' '[:upper:]'"
-	alias uuidl=uuid
+  alias uuidu="uuid | tr '[:lower:]' '[:upper:]'"
+  alias uuidl=uuid
 elif _command_exists uuidgen; then # macOS/BSD
-	alias uuidu="uuidgen"
-	alias uuid="uuidgen | tr '[:upper:]' '[:lower:]'" # because upper case is like YELLING
-	alias uuidl=uuid
+  alias uuidu="uuidgen"
+  alias uuid="uuidgen | tr '[:upper:]' '[:lower:]'" # because upper case is like YELLING
+  alias uuidl=uuid
 fi
diff --git a/aliases/available/vagrant.aliases.bash b/aliases/available/vagrant.aliases.bash
index a949cbb3..d479fb2b 100644
--- a/aliases/available/vagrant.aliases.bash
+++ b/aliases/available/vagrant.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'vagrant aliases'
 
 # Aliases
diff --git a/aliases/available/vault.aliases.bash b/aliases/available/vault.aliases.bash
index 4d083fb6..d2ad8e74 100644
--- a/aliases/available/vault.aliases.bash
+++ b/aliases/available/vault.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'vault aliases'
 
 # Aliases
diff --git a/aliases/available/vim.aliases.bash b/aliases/available/vim.aliases.bash
index f8068764..378211a4 100644
--- a/aliases/available/vim.aliases.bash
+++ b/aliases/available/vim.aliases.bash
@@ -1,14 +1,43 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'vim abbreviations'
 
-_command_exists vim || return
 
-alias v='vim'
-# open the vim help in fullscreen incorporated from
-# https://stackoverflow.com/a/4687513
-alias vimh='vim -c ":h | only"'
+case $OSTYPE in
+  linux*)
+     # VIM=$(command -v vim)
+    NVIM=$(command -v nvim)
+    # NODE=$(command -v node)
+    # XCLIP=$(command -v xclip)
+    NANO=$(command -v nano)
+    EMACS=$(command -v emacs)
+
+    [[ $EMACS ]] && {
+      alias e='emacs -nw';
+      alias emacs='emacs -nw';
+    }
+
+    [[ $NVIM ]] && {
+      alias vim-plug-install="$NVIM +PlugInstall +qall";
+      alias vim-rplug-install="$NVIM +UpdateRemotePlugins +qall";
+      # alias vim-cheetah="$NVIM -c:Cheetah";
+      # alias vc="$NVIM -c:Cheetah";
+      # alias e='nvr --nostart --servername /tmp/nvim.sock';
+      #alias v='NVIM_LISTEN_ADDRESS=/tmp/nvim.sock nvim'
+      alias v='XDG_DATA_HOME=$NVIM_BEGINNER/share XDG_CACHE_HOME=$NVIM_BEGINNER XDG_CONFIG_HOME=$NVIM_BEGINNER nvim'
+      alias vi='XDG_DATA_HOME=$NVIM_BEGINNER/share XDG_CACHE_HOME=$NVIM_BEGINNER XDG_CONFIG_HOME=$NVIM_BEGINNER nvim'
+      # alias e="nvim $(redis-cli ZRANGE vimmru -1 -1 | awk '{print $1}')";
+    }
+
+    # [[ $XCLIP ]] && {
+    #   alias vim-xclip='vim "$(xclip -selection clipboard -o)"';
+    #   alias vim-xclip-p='vim "$(xclip -selection primary -o)"';
+    #   alias vim-xclip-s='vim "$(xclip -selection secundary -o)"';
+    # }
+
+    [[ -n $NANO ]] &&
+      { alias nano='nano -licgmLD -T4 '; }
+
+  ;;
+
+esac
 
-# open vim in new tab is taken from
-# http://stackoverflow.com/questions/936501/let-gvim-always-run-a-single-instancek
-_command_exists mvim && function mvimt { command mvim --remote-tab-silent "$@" || command mvim "$@"; }
-_command_exists gvim && function gvimt { command gvim --remote-tab-silent "$@" || command gvim "$@"; }
diff --git a/aliases/available/wine.aliases.bash b/aliases/available/wine.aliases.bash
new file mode 100644
index 00000000..d46176ef
--- /dev/null
+++ b/aliases/available/wine.aliases.bash
@@ -0,0 +1,6 @@
+cite 'about-alias'
+about-alias 'Wine commands aliases'
+
+alias sketchup='wine64 "C://Program Files//SketchUp//SketchUp 2019//SketchUp.exe"'
+
+alias gk2='wine "C://GK2//SIERRA.EXE"'
diff --git a/aliases/available/xclip.aliases.bash b/aliases/available/xclip.aliases.bash
new file mode 100644
index 00000000..9ecd71ed
--- /dev/null
+++ b/aliases/available/xclip.aliases.bash
@@ -0,0 +1,44 @@
+cite 'about-alias'
+about-alias 'xclip and xpaste shortcuts to linux'
+
+case $OSTYPE in
+  linux*)
+    XCLIP=$(command -v xclip)
+    if [[ $XCLIP ]]; then
+      s=clipboard
+      alias xcopy="$XCLIP -selection $s" &&
+        alias xpaste="$XCLIP -selection $s -o"
+
+      s=primary
+      alias xcopy-p="$XCLIP -selection $s" &&
+        alias xpaste-p="$XCLIP -selection $s -o"
+
+      s=secondary
+      alias xcopy-s="$XCLIP -selection $s" &&
+        alias xpaste-s="$XCLIP -selection $s -o"
+
+      alias  xpwd='pwd|xclip -selection secondary'
+      alias  xcd='cd $(xclip -selection secondary -o)'
+
+      xcp()
+      {
+        if [[ $# -eq 0 ]]; then
+          echo 1>&2 'Sintaxe: xcp [files]'
+        else
+          echo cp $* $(xclip -selection secondary -o)
+        fi
+      }
+
+    fi
+    ;;
+esac
+
+#alias xcopy='xclip -sel clip'
+# to use it just install xclip on your distribution and it would work like:
+# $ echo "hello" | pbcopy
+# $ pbpaste
+# hello
+
+# very useful for things like:
+# cat ~/.ssh/id_rsa.pub | pbcopy
+# have fun!
diff --git a/aliases/available/yarn.aliases.bash b/aliases/available/yarn.aliases.bash
index a2fb6d0d..b50535b9 100644
--- a/aliases/available/yarn.aliases.bash
+++ b/aliases/available/yarn.aliases.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite 'about-alias'
 about-alias 'yarn package manager aliases'
 
 # Aliases
diff --git a/clean_files.txt b/clean_files.txt
index 758e3b80..192fefa6 100644
--- a/clean_files.txt
+++ b/clean_files.txt
@@ -76,7 +76,6 @@ completion/available/system.completion.bash
 completion/available/vault.completion.bash
 completion/available/vuejs.completion.bash
 completion/available/wpscan.completion.bash
-completion/available/yarn.completion.bash
 
 # libraries
 lib/appearance.bash
diff --git a/completion/available/aliases.completion.bash b/completion/available/aliases.completion.bash
index 3e45e960..f9cc1ed1 100644
--- a/completion/available/aliases.completion.bash
+++ b/completion/available/aliases.completion.bash
@@ -50,7 +50,7 @@ function _bash-it-component-completion-callback-on-init-aliases() {
 		fi
 
 		# skip aliases to pipes, boolean control structures and other command lists
-		chars=$'|&;()<>\n'
+		chars='\|\&\;\)\(\n\<\>'
 		if [[ "${alias_defn}" =~ [$chars] ]]; then
 			continue
 		fi
diff --git a/completion/available/awscli.completion.bash b/completion/available/awscli.completion.bash
index 6b2c90ff..a3041837 100644
--- a/completion/available/awscli.completion.bash
+++ b/completion/available/awscli.completion.bash
@@ -1,5 +1,6 @@
 # shellcheck shell=bash
 
-if _command_exists aws_completer; then
+if _command_exists aws_completer
+then
 	complete -C "$(command -v aws_completer)" aws
 fi
diff --git a/completion/available/bash-it.completion.bash b/completion/available/bash-it.completion.bash
index 2259e37b..4fdd72d6 100644
--- a/completion/available/bash-it.completion.bash
+++ b/completion/available/bash-it.completion.bash
@@ -1,95 +1,140 @@
-# shellcheck shell=bash
+#!/usr/bin/env bash
 
-function _compreply_candidates() {
-	local IFS=$'\n'
+_bash-it-comp-enable-disable()
+{
+  local enable_disable_args="alias completion plugin"
+  COMPREPLY=( $(compgen -W "${enable_disable_args}" -- ${cur}) )
+}
+
+_bash-it-comp-list-available-not-enabled()
+{
+  subdirectory="$1"
+
+  local available_things
+
+  available_things=$(for f in `compgen -G "${BASH_IT}/$subdirectory/available/*.bash" | sort -d`;
+    do
+      file_entity=$(basename $f)
+
+      typeset enabled_component=$(command ls "${BASH_IT}/$subdirectory/enabled/"{[0-9]*$BASH_IT_LOAD_PRIORITY_SEPARATOR$file_entity,$file_entity} 2>/dev/null | head -1)
+      typeset enabled_component_global=$(command ls "${BASH_IT}/enabled/"[0-9]*$BASH_IT_LOAD_PRIORITY_SEPARATOR$file_entity 2>/dev/null | head -1)
+
+      if [ -z "$enabled_component" ] && [ -z "$enabled_component_global" ]
+      then
+        basename $f | sed -e 's/\(.*\)\..*\.bash/\1/g'
+      fi
+    done)
+
+  COMPREPLY=( $(compgen -W "all ${available_things}" -- ${cur}) )
+}
+
+_bash-it-comp-list-enabled()
+{
+  local subdirectory="$1"
+  local suffix enabled_things
 
-	read -d '' -ra COMPREPLY < <(compgen -W "${candidates[*]}" -- "${cur}")
+  suffix=$(echo "$subdirectory" | sed -e 's/plugins/plugin/g')
+
+  enabled_things=$(for f in `sort -d <(compgen -G "${BASH_IT}/$subdirectory/enabled/*.${suffix}.bash") <(compgen -G "${BASH_IT}/enabled/*.${suffix}.bash")`;
+    do
+      basename $f | sed -e 's/\(.*\)\..*\.bash/\1/g' | sed -e "s/^[0-9]*---//g"
+    done)
+
+  COMPREPLY=( $(compgen -W "all ${enabled_things}" -- ${cur}) )
 }
 
-function _bash-it() {
-	local cur prev verb file_type candidates suffix
-	COMPREPLY=()
-	cur="${COMP_WORDS[COMP_CWORD]}"
-	prev="${COMP_WORDS[COMP_CWORD - 1]}"
-	verb="${COMP_WORDS[1]}"
-	file_type="${COMP_WORDS[2]:-}"
-	candidates=('disable' 'enable' 'help' 'migrate' 'reload' 'restart' 'preview' 'profile' 'doctor' 'search' 'show' 'update' 'version')
-	case "${verb}" in
-		show)
-			candidates=('aliases' 'completions' 'plugins')
-			_compreply_candidates
-			;;
-		help)
-			if [[ "${prev}" == "aliases" ]]; then
-				candidates=('all' "$(_bash-it-component-list "${file_type}")")
-				_compreply_candidates
-			else
-				candidates=('aliases' 'completions' 'migrate' 'plugins' 'update')
-				_compreply_candidates
-			fi
-			;;
-		profile)
-			case "${file_type}" in
-				load | rm)
-					if [[ "${file_type}" == "$prev" ]]; then
-						candidates=("${BASH_IT}/profiles"/*.bash_it)
-						candidates=("${candidates[@]##*/}")
-						candidates=("${candidates[@]%%.bash_it}")
-
-						_compreply_candidates
-					fi
-					;;
-				save | list) ;;
-				*)
-					candidates=('load' 'save' 'list' 'rm')
-					_compreply_candidates
-					;;
-			esac
-			;;
-		doctor)
-			candidates=('errors' 'warnings' 'all')
-			_compreply_candidates
-			;;
-		update)
-			if [[ "${cur}" == -* ]]; then
-				candidates=('-s' '--silent')
-			else
-				candidates=('stable' 'dev')
-			fi
-			_compreply_candidates
-			;;
-		migrate | reload | restart | search | version) ;;
-		preview)
-			_bash-it-preview # completes itself
-			return 0
-			;;
-		enable | disable)
-			if [[ "${verb}" == "enable" ]]; then
-				suffix="disabled"
-			else
-				suffix="enabled"
-			fi
-			case "${file_type}" in
-				alias | completion | plugin)
-					candidates=('all' "$("_bash-it-component-list-${suffix}" "${file_type}")")
-					_compreply_candidates
-					;;
-				*)
-					candidates=('alias' 'completion' 'plugin')
-					_compreply_candidates
-					;;
-			esac
-			;;
-		*)
-			_compreply_candidates
-			;;
-	esac
+_bash-it-comp-list-available()
+{
+  subdirectory="$1"
+
+  local enabled_things
+
+  enabled_things=$(for f in `compgen -G "${BASH_IT}/$subdirectory/available/*.bash" | sort -d`;
+    do
+      basename $f | sed -e 's/\(.*\)\..*\.bash/\1/g'
+    done)
+
+  COMPREPLY=( $(compgen -W "${enabled_things}" -- ${cur}) )
+}
+
+_bash-it-comp()
+{
+  local cur prev opts
+  COMPREPLY=()
+  cur="${COMP_WORDS[COMP_CWORD]}"
+  prev="${COMP_WORDS[COMP_CWORD-1]}"
+  chose_opt="${COMP_WORDS[1]}"
+  file_type="${COMP_WORDS[2]}"
+  opts="disable enable help migrate reload restart doctor search show update version"
+  case "${chose_opt}" in
+    show)
+      local show_args="aliases completions plugins"
+      COMPREPLY=( $(compgen -W "${show_args}" -- ${cur}) )
+      return 0
+      ;;
+    help)
+      if [ x"${prev}" == x"aliases" ]; then
+        _bash-it-comp-list-available aliases
+        return 0
+      else
+        local help_args="aliases completions migrate plugins update"
+        COMPREPLY=( $(compgen -W "${help_args}" -- ${cur}) )
+        return 0
+      fi
+      ;;
+    doctor)
+      local doctor_args="errors warnings all"
+      COMPREPLY=( $(compgen -W "${doctor_args}" -- ${cur}) )
+      return 0
+      ;;
+    update)
+      if [[ ${cur} == -* ]];then
+        local update_args="-s --silent"
+      else
+        local update_args="stable dev"
+      fi
+      COMPREPLY=( $(compgen -W "${update_args}" -- ${cur}) )
+      return 0
+      ;;
+    migrate | reload | search | version)
+      return 0
+      ;;
+    enable | disable)
+      if [ x"${chose_opt}" == x"enable" ];then
+        suffix="available-not-enabled"
+      else
+        suffix="enabled"
+      fi
+      case "${file_type}" in
+        alias)
+            _bash-it-comp-list-${suffix} aliases
+            return 0
+            ;;
+        plugin)
+            _bash-it-comp-list-${suffix} plugins
+            return 0
+            ;;
+        completion)
+            _bash-it-comp-list-${suffix} completion
+            return 0
+            ;;
+        *)
+            _bash-it-comp-enable-disable
+            return 0
+            ;;
+      esac
+      ;;
+  esac
+
+  COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
+
+  return 0
 }
 
 # Activate completion for bash-it and its common misspellings
-complete -F _bash-it bash-it
-complete -F _bash-it bash-ti
-complete -F _bash-it shit
-complete -F _bash-it bashit
-complete -F _bash-it batshit
-complete -F _bash-it bash_it
+complete -F _bash-it-comp bash-it
+complete -F _bash-it-comp bash-ti
+complete -F _bash-it-comp shit
+complete -F _bash-it-comp bashit
+complete -F _bash-it-comp batshit
+complete -F _bash-it-comp bash_it
diff --git a/completion/available/brew.completion.bash b/completion/available/brew.completion.bash
index 01e5d533..5a6c8c22 100644
--- a/completion/available/brew.completion.bash
+++ b/completion/available/brew.completion.bash
@@ -4,27 +4,4 @@ about-completion "brew completion"
 
 # Load late to make sure `system` completion loads first
 # BASH_IT_LOAD_PRIORITY: 375
-
-if [[ "$OSTYPE" != 'darwin'* ]]; then
-	_log_warning "unsupported operating system - only 'Darwin' is supported"
-	return 0
-fi
-
-# Make sure brew is installed
-_bash_it_homebrew_check || return 0
-
-if [[ -r "$BASH_IT_HOMEBREW_PREFIX/etc/bash_completion.d/brew" ]]; then
-	# shellcheck disable=1090,1091
-	source "$BASH_IT_HOMEBREW_PREFIX/etc/bash_completion.d/brew"
-
-elif [[ -r "$BASH_IT_HOMEBREW_PREFIX/Library/Contributions/brew_bash_completion.sh" ]]; then
-	# shellcheck disable=1090,1091
-	source "$BASH_IT_HOMEBREW_PREFIX/Library/Contributions/brew_bash_completion.sh"
-
-elif [[ -f "$BASH_IT_HOMEBREW_PREFIX/completions/bash/brew" ]]; then
-	# For the git-clone based installation, see here for more info:
-	# https://github.com/Bash-it/bash-it/issues/1458
-	# https://docs.brew.sh/Shell-Completion
-	# shellcheck disable=1090,1091
-	source "$BASH_IT_HOMEBREW_PREFIX/completions/bash/brew"
-fi
+source "$HOME/.linuxbrew/Cellar/bash-completion/1.3_3/etc/bash_completion"
diff --git a/completion/available/cht.completion.bash b/completion/available/cht.completion.bash
new file mode 100644
index 00000000..c8c8a534
--- /dev/null
+++ b/completion/available/cht.completion.bash
@@ -0,0 +1,49 @@
+#!/usr/bin/env bash
+#                      __ __       ___
+#                     /\ \\ \    /'___`\
+#                     \ \ \\ \  /\_\ /\ \
+#                      \ \ \\ \_\/_/// /__
+#                       \ \__ ,__\ // /_\ \
+#                        \/_/\_\_//\______/
+#                           \/_/  \/_____/
+#                                         Algoritimos
+#
+#
+#      Author: Ivan Lopes
+#        Mail: ivan (at) 42algoritmos (dot) com (dot) br
+#        Site: htredis_get://www.42algoritmos.com.br
+#     License: gpl
+#       Phone: +1 561 801 7985
+#    Language: Shell Script
+#        File: redis.get.bash
+#        Date: Ter 28 Fev 2017 00:35:55 BRT
+# Description:
+#
+# ----------------------------------------------------------------------------
+#
+# ----------------------------------------------------------------------------
+
+##############################################################################
+##############################################################################
+##############################################################################
+
+# ----------------------------------------------------------------------------
+# Run!
+
+_cht_complete()
+{
+    local cur prev opts
+    _get_comp_words_by_ref -n : cur
+
+    COMPREPLY=()
+    cur="${COMP_WORDS[COMP_CWORD]}"
+    prev="${COMP_WORDS[COMP_CWORD-1]}"
+    opts="$(cht.sh :list)"
+
+    if [ ${COMP_CWORD} = 1 ]; then
+          COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
+          __ltrim_colon_completions "$cur"
+    fi
+    return 0
+}
+complete -F _cht_complete cht.sh
diff --git a/completion/available/defaults.completion.bash b/completion/available/defaults.completion.bash
index 39d7ea95..c43c0aae 100644
--- a/completion/available/defaults.completion.bash
+++ b/completion/available/defaults.completion.bash
@@ -1,5 +1,175 @@
-# shellcheck shell=bash
+# defaults
+# Bash command line completion for defaults
+#
+# Created by Jonathon Mah on 2006-11-08.
+# Copyright 2006 Playhaus. All rights reserved.
+#
+# Version 1.0 (2006-11-08)
 
-if test -s "${BASH_IT?}/vendor/github.com/gaelicWizard/bash-progcomp/defaults.completion.bash"; then
-	source "$_"
-fi
+
+_defaults_domains()
+{
+    local cur
+    COMPREPLY=()
+    cur=${COMP_WORDS[COMP_CWORD]}
+
+	local domains=$( defaults domains | sed -e 's/, /:/g' | tr : '\n' | sed -e 's/ /\\ /g' | grep "^$cur" )
+	local IFS=$'\n'
+	COMPREPLY=( $domains )
+	if [[ $( echo '-app' | grep "^$cur" ) ]]; then
+		COMPREPLY[${#COMPREPLY[@]}]="-app"
+	fi
+
+    return 0
+}
+
+
+_defaults()
+{
+	local cur prev host_opts cmds cmd domain keys key_index
+    cur=${COMP_WORDS[COMP_CWORD]}
+    prev=${COMP_WORDS[COMP_CWORD-1]}
+
+	host_opts='-currentHost -host'
+	cmds='read read-type write rename delete domains find help'
+
+	if [[ $COMP_CWORD -eq 1 ]]; then
+		COMPREPLY=( $( compgen -W "$host_opts $cmds" -- $cur ) )
+		return 0
+	elif [[ $COMP_CWORD -eq 2 ]]; then
+		if [[ "$prev" == "-currentHost" ]]; then
+			COMPREPLY=( $( compgen -W "$cmds" -- $cur ) )
+			return 0
+		elif [[ "$prev" == "-host" ]]; then
+			_known_hosts -a
+			return 0
+		else
+			_defaults_domains
+			return 0
+		fi
+	elif [[ $COMP_CWORD -eq 3 ]]; then
+		if [[ ${COMP_WORDS[1]} == "-host" ]]; then
+			_defaults_domains
+			return 0
+		fi
+    fi
+
+	# Both a domain and command have been specified
+
+	if [[ ${COMP_WORDS[1]} == [${cmds// /|}] ]]; then
+		cmd=${COMP_WORDS[1]}
+		domain=${COMP_WORDS[2]}
+		key_index=3
+		if [[ "$domain" == "-app" ]]; then
+			if [[ $COMP_CWORD -eq 3 ]]; then
+				# Completing application name. Can't help here, sorry
+				return 0
+			fi
+			domain="-app ${COMP_WORDS[3]}"
+			key_index=4
+		fi
+	elif [[ ${COMP_WORDS[2]} == "-currentHost" ]] && [[ ${COMP_WORDS[2]} == [${cmds// /|}] ]]; then
+		cmd=${COMP_WORDS[2]}
+		domain=${COMP_WORDS[3]}
+		key_index=4
+		if [[ "$domain" == "-app" ]]; then
+			if [[ $COMP_CWORD -eq 4 ]]; then
+				# Completing application name. Can't help here, sorry
+				return 0
+			fi
+			domain="-app ${COMP_WORDS[4]}"
+			key_index=5
+		fi
+	elif [[ ${COMP_WORDS[3]} == "-host" ]] && [[ ${COMP_WORDS[3]} == [${cmds// /|}] ]]; then
+		cmd=${COMP_WORDS[3]}
+		domain=${COMP_WORDS[4]}
+		key_index=5
+		if [[ "$domain" == "-app" ]]; then
+			if [[ $COMP_CWORD -eq 5 ]]; then
+				# Completing application name. Can't help here, sorry
+				return 0
+			fi
+			domain="-app ${COMP_WORDS[5]}"
+			key_index=6
+		fi
+	fi
+
+	keys=$( defaults read $domain 2>/dev/null | sed -n -e '/^    [^}) ]/p' | sed -e 's/^    \([^" ]\{1,\}\) = .*$/\1/g' -e 's/^    "\([^"]\{1,\}\)" = .*$/\1/g' | sed -e 's/ /\\ /g' )
+
+	case $cmd in
+	read|read-type)
+		# Complete key
+		local IFS=$'\n'
+		COMPREPLY=( $( echo "$keys" | grep -i "^${cur//\\/\\\\}" ) )
+		;;
+	write)
+		if [[ $key_index -eq $COMP_CWORD ]]; then
+			# Complete key
+			local IFS=$'\n'
+			COMPREPLY=( $( echo "$keys" | grep -i "^${cur//\\/\\\\}" ) )
+		elif [[ $((key_index+1)) -eq $COMP_CWORD ]]; then
+			# Complete value type
+			# Unfortunately ${COMP_WORDS[key_index]} fails on keys with spaces
+			local value_types='-string -data -integer -float -boolean -date -array -array-add -dict -dict-add'
+			local cur_type=$( defaults read-type $domain ${COMP_WORDS[key_index]} 2>/dev/null | sed -e 's/^Type is \(.*\)/-\1/' -e's/dictionary/dict/' | grep "^$cur" )
+			if [[ $cur_type ]]; then
+				COMPREPLY=( $cur_type )
+			else
+				COMPREPLY=( $( compgen -W "$value_types" -- $cur ) )
+			fi
+		elif [[ $((key_index+2)) -eq $COMP_CWORD ]]; then
+			# Complete value
+			# Unfortunately ${COMP_WORDS[key_index]} fails on keys with spaces
+			COMPREPLY=( $( defaults read $domain ${COMP_WORDS[key_index]} 2>/dev/null | grep -i "^${cur//\\/\\\\}" ) )
+		fi
+		;;
+	rename)
+		if [[ $key_index -eq $COMP_CWORD ]] ||
+		   [[ $((key_index+1)) -eq $COMP_CWORD ]]; then
+			# Complete source and destination keys
+			local IFS=$'\n'
+			COMPREPLY=( $( echo "$keys" | grep -i "^${cur//\\/\\\\}" ) )
+		fi
+		;;
+	delete)
+		if [[ $key_index -eq $COMP_CWORD ]]; then
+			# Complete key
+			local IFS=$'\n'
+			COMPREPLY=( $( echo "$keys" | grep -i "^${cur//\\/\\\\}" ) )
+		fi
+		;;
+	esac
+
+    return 0
+}
+
+complete -F _defaults -o default defaults
+
+
+# This file is licensed under the BSD license, as follows:
+#
+# Copyright (c) 2006, Playhaus
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are met:
+#
+# * Redistributions of source code must retain the above copyright notice, this
+#   list of conditions and the following disclaimer.
+# * Redistributions in binary form must reproduce the above copyright notice,
+#   this list of conditions and the following disclaimer in the documentation
+#   and/or other materials provided with the distribution.
+# * Neither the name of the Playhaus nor the names of its contributors may be
+#   used to endorse or promote products derived from this software without
+#   specific prior written permission.
+#
+# This software is provided by the copyright holders and contributors "as is"
+# and any express or implied warranties, including, but not limited to, the
+# implied warranties of merchantability and fitness for a particular purpose are
+# disclaimed. In no event shall the copyright owner or contributors be liable
+# for any direct, indirect, incidental, special, exemplary, or consequential
+# damages (including, but not limited to, procurement of substitute goods or
+# services; loss of use, data, or profits; or business interruption) however
+# caused and on any theory of liability, whether in contract, strict liability,
+# or tort (including negligence or otherwise) arising in any way out of the use
+# of this software, even if advised of the possibility of such damage.
diff --git a/completion/available/devbox.completion.bash b/completion/available/devbox.completion.bash
new file mode 100644
index 00000000..18c53b71
--- /dev/null
+++ b/completion/available/devbox.completion.bash
@@ -0,0 +1,37 @@
+#!/usr/bin/env bash
+#                      __ __       ___
+#                     /\ \\ \    /'___`\
+#                     \ \ \\ \  /\_\ /\ \
+#                      \ \ \\ \_\/_/// /__
+#                       \ \__ ,__\ // /_\ \
+#                        \/_/\_\_//\______/
+#                           \/_/  \/_____/
+#                                         Algoritimos
+#
+#
+#      Author: Ivan Lopes
+#        Mail: ivan (at) 42algoritmos (dot) com (dot) br
+#        Site: htredis_get://www.42algoritmos.com.br
+#     License: gpl
+#       Phone: +1 561 801 7985
+#    Language: Shell Script
+#        File: redis.get.bash
+#        Date: Ter 28 Fev 2017 00:35:55 BRT
+# Description:
+#
+# ----------------------------------------------------------------------------
+#
+# ----------------------------------------------------------------------------
+
+##############################################################################
+##############################################################################
+##############################################################################
+
+# ----------------------------------------------------------------------------
+# Run!
+
+DEVBOX=$(command -v devbox)
+[[ $DEVBOX ]] && eval "$( devbox completion bash)"
+
+
+
diff --git a/completion/available/fabric-completion.bash b/completion/available/fabric-completion.bash
new file mode 100644
index 00000000..7809b380
--- /dev/null
+++ b/completion/available/fabric-completion.bash
@@ -0,0 +1,133 @@
+#!/usr/bin/env bash
+#
+# Bash completion support for Fabric (http://fabfile.org/)
+#
+#
+# Copyright (C) 2011 by Konstantin Bakulin
+#
+# Permission is hereby granted, free of charge, to any person obtaining a copy
+# of this software and associated documentation files (the "Software"), to deal
+# in the Software without restriction, including without limitation the rights
+# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+# copies of the Software, and to permit persons to whom the Software is
+# furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice shall be included in
+# all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+# THE SOFTWARE.
+#
+# Thanks to:
+# - Adam Vandenberg,
+#   https://github.com/adamv/dotfiles/blob/master/completion_scripts/fab_completion.bash
+#
+# - Enrico Batista da Luz,
+#   https://github.com/ricobl/dotfiles/blob/master/bin/fab_bash_completion
+#
+
+
+# Use cache files for fab tasks or not.
+# If set to "false" command "fab --shortlist" will be executed every time.
+export FAB_COMPLETION_CACHE_TASKS=true
+
+# File name where tasks cache will be stored (in current dir).
+export FAB_COMPLETION_CACHED_TASKS_FILENAME=".fab_tasks~"
+
+
+# Set command to get time of last file modification as seconds since Epoch
+case `uname` in
+    Darwin|FreeBSD)
+        __FAB_COMPLETION_MTIME_COMMAND="stat -f '%m'"
+        ;;
+    *)
+        __FAB_COMPLETION_MTIME_COMMAND="stat -c '%Y'"
+        ;;
+esac
+
+
+#
+# Get time of last fab cache file modification as seconds since Epoch
+#
+function __fab_chache_mtime() {
+    ${__FAB_COMPLETION_MTIME_COMMAND} \
+        $FAB_COMPLETION_CACHED_TASKS_FILENAME | xargs -n 1 expr
+}
+
+
+#
+# Get time of last fabfile file/module modification as seconds since Epoch
+#
+function __fab_fabfile_mtime() {
+    local f="fabfile"
+    if [[ -e "$f.py" ]]; then
+        ${__FAB_COMPLETION_MTIME_COMMAND} "$f.py" | xargs -n 1 expr
+    else
+        # Suppose that it's a fabfile dir
+        find $f/*.py -exec ${__FAB_COMPLETION_MTIME_COMMAND} {} + \
+            | xargs -n 1 expr | sort -n -r | head -1
+    fi
+}
+
+
+#
+# Completion for "fab" command
+#
+function __fab_completion() {
+    # Return if "fab" command doesn't exists
+    [[ -e `which fab 2> /dev/null` ]] || return 0
+
+    # Variables to hold the current word and possible matches
+    local cur="${COMP_WORDS[COMP_CWORD]}"
+    local opts=()
+
+    # Generate possible matches and store them in variable "opts"
+    case "${cur}" in
+        -*)
+            if [[ -z "${__FAB_COMPLETION_LONG_OPT}" ]]; then
+                export __FAB_COMPLETION_LONG_OPT=$(
+                    fab --help | egrep -o "\-\-[A-Za-z_\-]+\=?" | sort -u)
+            fi
+            opts="${__FAB_COMPLETION_LONG_OPT}"
+            ;;
+
+        # Completion for short options is not nessary.
+        # It's left here just for history.
+        # -*)
+        #     if [[ -z "${__FAB_COMPLETION_SHORT_OPT}" ]]; then
+        #         export __FAB_COMPLETION_SHORT_OPT=$(
+        #             fab --help | egrep -o "^ +\-[A-Za-z_\]" | sort -u)
+        #     fi
+        #     opts="${__FAB_COMPLETION_SHORT_OPT}"
+        #     ;;
+
+        *)
+            # If "fabfile.py" or "fabfile" dir with "__init__.py" file exists
+            local f="fabfile"
+            if [[ -e "$f.py" || (-d "$f" && -e "$f/__init__.py") ]]; then
+                # Build a list of the available tasks
+                if $FAB_COMPLETION_CACHE_TASKS; then
+                    # If use cache
+                    if [[ ! -s ${FAB_COMPLETION_CACHED_TASKS_FILENAME} ||
+                          $(__fab_fabfile_mtime) -gt $(__fab_chache_mtime) ]]; then
+                        fab --shortlist > ${FAB_COMPLETION_CACHED_TASKS_FILENAME} \
+                            2> /dev/null
+                    fi
+                    opts=$(cat ${FAB_COMPLETION_CACHED_TASKS_FILENAME})
+                else
+                    # Without cache
+                    opts=$(fab --shortlist 2> /dev/null)
+                fi
+            fi
+            ;;
+    esac
+
+    # Set possible completions
+    COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
+}
+complete -o default -o nospace -F __fab_completion fab
diff --git a/completion/available/fabric.completion.bash b/completion/available/fabric.completion.bash
index a8984d9c..6f746454 100644
--- a/completion/available/fabric.completion.bash
+++ b/completion/available/fabric.completion.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+#!/usr/bin/env bash
 #
 # Bash completion support for Fabric (http://fabfile.org/)
 #
@@ -91,7 +91,7 @@ function __fab_completion() {
         -*)
             if [[ -z "${__FAB_COMPLETION_LONG_OPT}" ]]; then
                 export __FAB_COMPLETION_LONG_OPT=$(
-                    fab --help | grep -E -o "\-\-[A-Za-z_\-]+\=?" | sort -u)
+                    fab --help | egrep -o "\-\-[A-Za-z_\-]+\=?" | sort -u)
             fi
             opts="${__FAB_COMPLETION_LONG_OPT}"
             ;;
@@ -101,7 +101,7 @@ function __fab_completion() {
         # -*)
         #     if [[ -z "${__FAB_COMPLETION_SHORT_OPT}" ]]; then
         #         export __FAB_COMPLETION_SHORT_OPT=$(
-        #             fab --help | grep -E -o "^ +\-[A-Za-z_\]" | sort -u)
+        #             fab --help | egrep -o "^ +\-[A-Za-z_\]" | sort -u)
         #     fi
         #     opts="${__FAB_COMPLETION_SHORT_OPT}"
         #     ;;
diff --git a/completion/available/flutter.completion.bash b/completion/available/flutter.completion.bash
index 7dde5a07..62befc82 100644
--- a/completion/available/flutter.completion.bash
+++ b/completion/available/flutter.completion.bash
@@ -1,5 +1,5 @@
-# shellcheck shell=bash
+#!/usr/bin/bash
 
 if _command_exists flutter; then
-	eval "$(flutter bash-completion)"
+  eval "$(flutter bash-completion)"
 fi
diff --git a/completion/available/gh.completion.bash b/completion/available/gh.completion.bash
new file mode 100644
index 00000000..c2949382
--- /dev/null
+++ b/completion/available/gh.completion.bash
@@ -0,0 +1,366 @@
+# hub tab-completion script for bash.
+# This script complements the completion script that ships with git.
+
+# Check that git tab completion is available
+if declare -F _git > /dev/null; then
+  # Duplicate and rename the 'list_all_commands' function
+  eval "$(declare -f __git_list_all_commands | \
+        sed 's/__git_list_all_commands/__git_list_all_commands_without_hub/')"
+
+  # Wrap the 'list_all_commands' function with extra hub commands
+  __git_list_all_commands() {
+    cat <<-EOF
+alias
+pull-request
+fork
+create
+browse
+compare
+ci-status
+release
+issue
+update
+EOF
+    __git_list_all_commands_without_hub
+  }
+
+  # Ensure cached commands are cleared
+  __git_all_commands=""
+
+  ##########################
+  # hub command completions
+  ##########################
+
+  # hub alias [-s] [SHELL]
+  _git_alias() {
+    local i c=2 s=-s sh shells="bash zsh sh ksh csh fish"
+    while [ $c -lt $cword ]; do
+      i="${words[c]}"
+      case "$i" in
+        -s)
+          unset s
+          ;;
+        *)
+          for sh in $shells; do
+            if [ "$sh" = "$i" ]; then
+              unset shells
+              break
+            fi
+          done
+          ;;
+      esac
+      ((c++))
+    done
+    __gitcomp "$s $shells"
+  }
+
+  # hub browse [-u] [--|[USER/]REPOSITORY] [SUBPAGE]
+  _git_browse() {
+    local i c=2 u=-u repo subpage
+    local subpages_="commits issues tree wiki pulls branches stargazers
+      contributors network network/ graphs graphs/"
+    local subpages_network="members"
+    local subpages_graphs="commit-activity code-frequency punch-card"
+    while [ $c -lt $cword ]; do
+      i="${words[c]}"
+      case "$i" in
+        -u)
+          unset u
+          ;;
+        *)
+          if [ -z "$repo" ]; then
+            repo=$i
+          else
+            subpage=$i
+          fi
+          ;;
+      esac
+      ((c++))
+    done
+    if [ -z "$repo" ]; then
+      __gitcomp "$u -- $(__hub_github_repos '\p')"
+    elif [ -z "$subpage" ]; then
+      case "$cur" in
+        */*)
+          local pfx="${cur%/*}" cur_="${cur#*/}"
+          local subpages_var="subpages_$pfx"
+          __gitcomp "${!subpages_var}" "$pfx/" "$cur_"
+          ;;
+        *)
+          __gitcomp "$u ${subpages_}"
+          ;;
+      esac
+    else
+      __gitcomp "$u"
+    fi
+  }
+
+  # hub compare [-u] [USER[/REPOSITORY]] [[START...]END]
+  _git_compare() {
+    local i c=$((cword - 1)) u=-u user remote owner repo arg_repo rev
+    while [ $c -gt 1 ]; do
+      i="${words[c]}"
+      case "$i" in
+        -u)
+          unset u
+          ;;
+        *)
+          if [ -z "$rev" ]; then
+            # Even though the logic below is able to complete both user/repo
+            # and revision in the right place, when there is only one argument
+            # (other than -u) in the command, that argument will be taken as
+            # revision. For example:
+            # $ hub compare -u upstream
+            # > https://github.com/USER/REPO/compare/upstream
+            if __hub_github_repos '\p' | grep -Eqx "^$i(/[^/]+)?"; then
+              arg_repo=$i
+            else
+              rev=$i
+            fi
+          elif [ -z "$arg_repo" ]; then
+            arg_repo=$i
+          fi
+          ;;
+      esac
+      ((c--))
+    done
+
+    # Here we want to find out the git remote name of user/repo, in order to
+    # generate an appropriate revision list
+    if [ -z "$arg_repo" ]; then
+      user=$(__hub_github_user)
+      if [ -z "$user" ]; then
+        for i in $(__hub_github_repos); do
+          remote=${i%%:*}
+          repo=${i#*:}
+          if [ "$remote" = origin ]; then
+            break
+          fi
+        done
+      else
+        for i in $(__hub_github_repos); do
+          remote=${i%%:*}
+          repo=${i#*:}
+          owner=${repo%%/*}
+          if [ "$user" = "$owner" ]; then
+            break
+          fi
+        done
+      fi
+    else
+      for i in $(__hub_github_repos); do
+        remote=${i%%:*}
+        repo=${i#*:}
+        owner=${repo%%/*}
+        case "$arg_repo" in
+          "$repo"|"$owner")
+            break
+            ;;
+        esac
+      done
+    fi
+
+    local pfx cur_="$cur"
+    case "$cur_" in
+      *..*)
+        pfx="${cur_%%..*}..."
+        cur_="${cur_##*..}"
+        __gitcomp_nl "$(__hub_revlist $remote)" "$pfx" "$cur_"
+        ;;
+      *)
+        if [ -z "${arg_repo}${rev}" ]; then
+          __gitcomp "$u $(__hub_github_repos '\o\n\p') $(__hub_revlist $remote)"
+        elif [ -z "$rev" ]; then
+          __gitcomp "$u $(__hub_revlist $remote)"
+        else
+          __gitcomp "$u"
+        fi
+        ;;
+    esac
+  }
+
+  # hub create [NAME] [-p] [-d DESCRIPTION] [-h HOMEPAGE]
+  _git_create() {
+    local i c=2 name repo flags="-p -d -h"
+    while [ $c -lt $cword ]; do
+      i="${words[c]}"
+      case "$i" in
+        -d|-h)
+          ((c++))
+          flags=${flags/$i/}
+          ;;
+        -p)
+          flags=${flags/$i/}
+          ;;
+        *)
+          name=$i
+          ;;
+      esac
+      ((c++))
+    done
+    if [ -z "$name" ]; then
+      repo=$(basename "$(pwd)")
+    fi
+    case "$prev" in
+      -d|-h)
+        COMPREPLY=()
+        ;;
+      -p|*)
+        __gitcomp "$repo $flags"
+        ;;
+    esac
+  }
+
+  # hub fork [--no-remote]
+  _git_fork() {
+    local i c=2 remote=yes
+    while [ $c -lt $cword ]; do
+      i="${words[c]}"
+      case "$i" in
+        --no-remote)
+          unset remote
+          ;;
+      esac
+      ((c++))
+    done
+    if [ -n "$remote" ]; then
+      __gitcomp "--no-remote"
+    fi
+  }
+
+  # hub pull-request [-f] [-m <MESSAGE>|-F <FILE>|-i <ISSUE>|<ISSUE-URL>] [-b <BASE>] [-h <HEAD>]
+  _git_pull_request() {
+    local i c=2 flags="-f -m -F -i -b -h"
+    while [ $c -lt $cword ]; do
+      i="${words[c]}"
+      case "$i" in
+        -m|-F|-i|-b|-h)
+          ((c++))
+          flags=${flags/$i/}
+          ;;
+        -f)
+          flags=${flags/$i/}
+          ;;
+      esac
+      ((c++))
+    done
+    case "$prev" in
+      -i)
+        COMPREPLY=()
+        ;;
+      -b|-h)
+        # (Doesn't seem to need this...)
+        # Uncomment the following line when 'owner/repo:[TAB]' misbehaved
+        #_get_comp_words_by_ref -n : cur
+        __gitcomp_nl "$(__hub_heads)"
+        # __ltrim_colon_completions "$cur"
+        ;;
+      -F)
+        COMPREPLY=( "$cur"* )
+        ;;
+      -f|*)
+        __gitcomp "$flags"
+        ;;
+    esac
+  }
+
+  ###################
+  # Helper functions
+  ###################
+
+  # __hub_github_user [HOST]
+  # Return $GITHUB_USER or the default github user defined in hub config
+  # HOST - Host to be looked-up in hub config. Default is "github.com"
+  __hub_github_user() {
+    if [ -n "$GITHUB_USER" ]; then
+      echo $GITHUB_USER
+      return
+    fi
+    local line h k v host=${1:-github.com} config=${HUB_CONFIG:-~/.config/gh}
+    if [ -f "$config" ]; then
+      while read line; do
+        if [ "$line" = "---" ]; then
+          continue
+        fi
+        k=${line%%:*}
+        v=${line#*:}
+        if [ -z "$v" ]; then
+          if [ "$h" = "$host" ]; then
+            break
+          fi
+          h=$k
+          continue
+        fi
+        k=${k#* }
+        v=${v#* }
+        if [ "$h" = "$host" ] && [ "$k" = "user" ]; then
+          echo "$v"
+          break
+        fi
+      done < "$config"
+    fi
+  }
+
+  # __hub_github_repos [FORMAT]
+  # List all github hosted repository
+  # FORMAT - Format string contains multiple of these:
+  #   \m  remote
+  #   \p  owner/repo
+  #   \o  owner
+  #   escaped characters (\n, \t ...etc) work
+  # If omitted, prints all github repos in the format of "remote:owner/repo"
+  __hub_github_repos() {
+    local f format=$1
+    if [ -z "$(__gitdir)" ]; then
+      return
+    fi
+    if [ -z "$format" ]; then
+      format='\1:\2'
+    else
+      format=${format//\m/\1}
+      format=${format//\p/\2}
+      format=${format//\o/\3}
+    fi
+    command git config --get-regexp 'remote\.[^.]*\.url' |
+    grep -E ' ((https?|git)://|git@)github\.com[:/][^:/]+/[^/]+$' |
+    sed -E 's#^remote\.([^.]+)\.url +.+[:/](([^/]+)/[^.]+)(\.git)?$#'"$format"'#'
+  }
+
+  # __hub_heads
+  # List all local "branch", and remote "owner/repo:branch"
+  __hub_heads() {
+    local i remote repo branch dir=$(__gitdir)
+    if [ -d "$dir" ]; then
+      command git --git-dir="$dir" for-each-ref --format='%(refname:short)' \
+        "refs/heads/"
+      for i in $(__hub_github_repos); do
+        remote=${i%%:*}
+        repo=${i#*:}
+        command git --git-dir="$dir" for-each-ref --format='%(refname:short)' \
+          "refs/remotes/${remote}/" | while read branch; do
+          echo "${repo}:${branch#${remote}/}"
+        done
+      done
+    fi
+  }
+
+  # __hub_revlist [REMOTE]
+  # List all tags, and branches under REMOTE, without the "remote/" prefix
+  # REMOTE - Remote name to search branches from. Default is "origin"
+  __hub_revlist() {
+    local i remote=${1:-origin} dir=$(__gitdir)
+    if [ -d "$dir" ]; then
+      command git --git-dir="$dir" for-each-ref --format='%(refname:short)' \
+        "refs/remotes/${remote}/" | while read i; do
+        echo "${i#${remote}/}"
+      done
+      command git --git-dir="$dir" for-each-ref --format='%(refname:short)' \
+        "refs/tags/"
+    fi
+  }
+
+  # Enable completion for hub even when not using the alias
+  complete -o bashdefault -o default -o nospace -F _git gh 2>/dev/null \
+    || complete -o default -o nospace -F _git gh
+fi
+
diff --git a/completion/available/gradle.completion.bash b/completion/available/gradle.completion.bash
index ef9677c6..35971d50 100644
--- a/completion/available/gradle.completion.bash
+++ b/completion/available/gradle.completion.bash
@@ -1,5 +1,3 @@
-# shellcheck shell=bash
-
 # Copyright (c) 2017 Eric Wendelin
 
 # Permission is hereby granted, free of charge, to any person obtaining a copy of
@@ -68,7 +66,7 @@ __gradle-generate-script-cache() {
 
     if [[ ! $(find $cache_dir/$cache_name -mmin -$cache_ttl_mins 2>/dev/null) ]]; then
         # Cache all Gradle scripts
-        local gradle_build_scripts=$(find $project_root_dir -type f -name "*.gradle" -o -name "*.gradle.kts" 2>/dev/null | grep -E -v "$script_exclude_pattern")
+        local gradle_build_scripts=$(find $project_root_dir -type f -name "*.gradle" -o -name "*.gradle.kts" 2>/dev/null | egrep -v "$script_exclude_pattern")
         printf "%s\n" "${gradle_build_scripts[@]}" > $cache_dir/$cache_name
     fi
 }
diff --git a/completion/available/iprj.completion.bash b/completion/available/iprj.completion.bash
new file mode 100644
index 00000000..17337ec3
--- /dev/null
+++ b/completion/available/iprj.completion.bash
@@ -0,0 +1,9 @@
+# shellcheck shell=bash
+cite "about-completion"
+about-completion "iprj(cli tool) manager project"
+
+# ----------------------------------------------------------------------------
+# Run!
+
+IPRJ=$(command -v iprj)
+[[ $IPRJ ]] && eval "$( iprj init )"
diff --git a/completion/available/knife.completion.bash b/completion/available/knife.completion.bash
index c0fb6a99..4b9950ed 100644
--- a/completion/available/knife.completion.bash
+++ b/completion/available/knife.completion.bash
@@ -55,12 +55,12 @@ _KAC_regen_cache() {
 
 # cached files can't have spaces in their names
 _KAC_get_cache_name_from_command() {
-	echo "${@// /_SPACE_}"
+	echo "${@/ /_SPACE_}"
 }
 
 # the reverse operation from the function above
 _KAC_get_command_from_cache_name() {
-	echo "${@//_SPACE_/ }"
+	echo "${@/_SPACE_/ }"
 }
 
 # given a command as argument, it fetches the cache for that command if it can find it
diff --git a/completion/available/makefile.completion.bash b/completion/available/makefile.completion.bash
index 018586ca..e72ba6fd 100644
--- a/completion/available/makefile.completion.bash
+++ b/completion/available/makefile.completion.bash
@@ -1,5 +1,3 @@
-# shellcheck shell=bash
-
 # Bash completion for Makefile
 # Loosely adapted from http://stackoverflow.com/a/38415982/1472048
 
@@ -19,7 +17,7 @@ _makecomplete() {
   for f in "${files[@]}" ; do
     while IFS='' read -r line ; do
       targets+=("$line")
-    done < <(grep -E -o '^[a-zA-Z0-9_-]+:([^=]|$)' "$f" | cut -d':' -f1)
+    done < <(grep -oE '^[a-zA-Z0-9_-]+:([^=]|$)' "$f" | cut -d':' -f1)
   done
 
   [ "${#targets[@]}" -eq 0 ] && return 0
diff --git a/completion/available/pipenv.completion.bash b/completion/available/pipenv.completion.bash
index 4adfab95..52451b8a 100644
--- a/completion/available/pipenv.completion.bash
+++ b/completion/available/pipenv.completion.bash
@@ -1,4 +1,4 @@
 # shellcheck shell=bash
 if _command_exists pipenv; then
-	eval "$(_PIPENV_COMPLETE=bash_source pipenv)"
+	eval "$(pipenv --completion)"
 fi
diff --git a/completion/available/projects.completion.bash b/completion/available/projects.completion.bash
index df4f5754..90735ee1 100644
--- a/completion/available/projects.completion.bash
+++ b/completion/available/projects.completion.bash
@@ -7,7 +7,7 @@ _is_function _rl_enabled ||
 _pj() {
   _is_function _init_completion || return
   _is_function _rl_enabled || return
-  [ -n "$BASH_IT_PROJECT_PATHS" ] || return
+  [ -n "$PROJECT_PATHS" ] || return
   shift
   [ "$1" == "open" ] && shift
 
@@ -21,7 +21,7 @@ _pj() {
   local -r mark_dirs=$(_rl_enabled mark-directories && echo y)
   local -r mark_symdirs=$(_rl_enabled mark-symlinked-directories && echo y)
 
-  for i in ${BASH_IT_PROJECT_PATHS//:/$'\n'}; do
+  for i in ${PROJECT_PATHS//:/$'\n'}; do
     # create an array of matched subdirs
     k="${#COMPREPLY[@]}"
     for j in $( compgen -d $i/$cur ); do
diff --git a/completion/available/redis_alias.completion.bash b/completion/available/redis_alias.completion.bash
new file mode 100644
index 00000000..8b2fa6e3
--- /dev/null
+++ b/completion/available/redis_alias.completion.bash
@@ -0,0 +1,46 @@
+#!/usr/bin/env bash
+#                      __ __       ___
+#                     /\ \\ \    /'___`\
+#                     \ \ \\ \  /\_\ /\ \
+#                      \ \ \\ \_\/_/// /__
+#                       \ \__ ,__\ // /_\ \
+#                        \/_/\_\_//\______/
+#                           \/_/  \/_____/
+#                                         Algoritimos
+#
+#
+#      Author: Ivan Lopes
+#        Mail: ivan (at) 42algoritmos (dot) com (dot) br
+#        Site: htredis_get://www.42algoritmos.com.br
+#     License: gpl
+#       Phone: +1 561 801 7985
+#    Language: Shell Script
+#        File: redis.get.bash
+#        Date: Ter 28 Fev 2017 00:35:55 BRT
+# Description:
+#
+# ----------------------------------------------------------------------------
+#
+# ----------------------------------------------------------------------------
+
+##############################################################################
+##############################################################################
+##############################################################################
+
+# ----------------------------------------------------------------------------
+# Run!
+
+_redis_get()
+{
+    local cur prev opts
+    COMPREPLY=()
+    cur="${COMP_WORDS[COMP_CWORD]}"
+    prev="${COMP_WORDS[COMP_CWORD-1]}"
+    opts=`redis.keys | grep -v vimmru| sed.joinlines`
+
+    COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
+    return 0
+}
+
+complete -F _redis_get redis.get redis.del redis.list
+
diff --git a/completion/available/svn.completion.bash b/completion/available/svn.completion.bash
index 2f0a23fe..eabc15c9 100644
--- a/completion/available/svn.completion.bash
+++ b/completion/available/svn.completion.bash
@@ -1,40 +1,1514 @@
-# shellcheck shell=bash
+# ------------------------------------------------------------
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
 #
-# Locate and load completions for `svn`.
+#   http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+# ------------------------------------------------------------
+
+# Programmable completion for the Subversion svn command under bash. Source
+# this file (or on some systems add it to ~/.bash_completion and start a new
+# shell) and bash's completion mechanism will know all about svn's options!
+# Provides completion for the svnadmin, svndumpfilter, svnlook and svnsync
+# commands as well.  Who wants to read man pages/help text...
+
+# Known to work with bash 3.* with programmable completion and extended
+# pattern matching enabled (use 'shopt -s extglob progcomp' to enable
+# these if they are not already enabled).
+
+shopt -s extglob
+
+# Tree helper functions which only use bash, to ease readability.
+
+# look for value associated to key from stdin in K/V hash file format
+# val=$(_svn_read_hashfile svn:realmstring < some/file)
+function _svn_read_hashfile()
+{
+  local tkey=$1 key= val=
+  while true; do
+    read tag len
+    [ $tag = 'END' ] && break
+    [ $tag != 'K' ] && {
+      #echo "unexpected tag '$tag' instead of 'K'" >&2
+      return
+    }
+    read -r -n $len key ; read
+    read tag len
+    [ $tag != 'V' ] && {
+      #echo "unexpected tag '$tag' instead of 'V'" >&2
+      return
+    }
+    read -r -n $len val ; read
+    if [[ $key = $tkey ]] ; then
+      echo "$val"
+      return
+    fi
+  done
+  #echo "target key '$tkey' not found" >&2
+}
+
+# _svn_grcut shell-regular-expression
+# extract filenames from 'svn status' output
+function _svn_grcut()
+{
+    local re=$1 line= old_IFS
+    # fix IFS, so that leading spaces are not ignored by next read.
+    # (there is a leading space in svn status output if only a prop is changed)
+    old_IFS="$IFS"
+    IFS=$'\n'
+    while read -r line ; do
+	[[ ! $re || $line == $re ]] && echo "${line/????????/}"
+    done
+    IFS="$old_IFS"
+}
+
+# extract stuff from svn info output
+# _svn_info (URL|Repository Root)
+function _svn_info()
+{
+  local what=$1 line=
+  LANG=C LC_MESSAGES=C svn info --non-interactive 2> /dev/null | \
+  while read line ; do
+    [[ $line == *"$what: "* ]] && echo ${line#*: }
+  done
+}
+
+# _svn_lls (dir|file|all) files...
+# list svn-managed files from list
+# some 'svn status --all-files' would be welcome here?
+function _svn_lls()
+{
+    local opt=$1 f=
+    shift
+    for f in "$@" ; do
+	# could try to check in .svn/entries? hmmm...
+	if [[ $opt == @(dir|all) && -d "$f" ]] ; then
+	    echo "$f/"
+	elif [[ $opt == @(file|all) ]] ; then
+	    # split f in directory/file names
+	    local dn= fn="$f"
+	    [[ "$f" == */* ]] && dn=${f%\/*}/ fn=${f##*\/}
+	    # ??? this does not work for just added files, because they
+	    # do not have a content reference yet...
+	    [ -f "${dn}.svn/text-base/${fn}.svn-base" ] && echo "$f"
+	fi
+    done
+}
+
+# This completion guides the command/option order along the one suggested
+# by "svn help", although other syntaxes are allowed.
+#
+# - there is a "real" parser to check for what is available and deduce what
+#   can be suggested further.
+# - the syntax should be coherent with subversion/svn/{cl.h,main.c}
+# - although it is not a good practice, mixed options and arguments
+#   is supported by the completion as it is by the svn command.
+# - the completion works in the middle of a line,
+#   but not really in the middle of an argument or option.
+# - property names are completed: see comments about issues related to handling
+#   ":" within property names although it is a word completion separator.
+# - unknown properties are assumed to be simple file properties.
+# - --revprop and --revision options are forced to revision properties
+#   as they are mandatory in this case.
+# - argument values are suggested to some other options, eg directory names
+#   for --config-dir.
+# - values for some options can be extended with environment variables:
+#   SVN_BASH_FILE_PROPS: other properties on files/directories
+#   SVN_BASH_REV_PROPS: other properties on revisions
+#   SVN_BASH_ENCODINGS: encodings to be suggested
+#   SVN_BASH_MIME_TYPE: mime types to be suggested
+#   SVN_BASH_KEYWORDS: "svn:keywords" substitutions to be suggested
+#   SVN_BASH_USERNAME: usernames suggested for --username
+#   SVN_BASH_COMPL_EXT: completion extensions for file arguments, based on the
+#      current subcommand, so that for instance only modified files are
+#      suggested for 'revert', only not svn-managed files for 'add', and so on.
+#      Possible values are:
+#      - username: guess usernames from ~/.subversion/auth/...
+#      - urls: guess urls from ~/.subversion/auth/... or others
+#      - svnstatus: use 'svn status' for completion
+#      - recurse: allow recursion (expensive)
+#      - externals: recurse into externals (very expensive)
+#     Former options are reasonable, but beware that both later options
+#     may be unadvisable if used on large working copies.
+#     None of these costly completions are activated by default.
+#     Argument completion outside a working copy results in an error message.
+#     Filenames with spaces are not completed properly.
+#
+# TODO
+# - other options?
+# - obsolete options could be removed from auto-comp? (e.g. -N)
+# - obsolete commands could be removed? (e.g. resolved)
+# - completion does not work properly when editing in the middle of the line
+#   status/previous are those at the end of the line, not at the entry position
+# - url completion should select more cases where it is relevant
+# - url completion of http:// schemas could suggest sub directories?
+# - add completion for experimental 'obliterate' feature?
+_svn()
+{
+	local cur cmds cmdOpts pOpts mOpts rOpts qOpts nOpts optsParam opt
+
+	COMPREPLY=()
+	cur=${COMP_WORDS[COMP_CWORD]}
+
+	# Possible expansions, without pure-prefix abbreviations such as "up".
+	cmds='add blame annotate praise cat changelist cl checkout co cleanup'
+	cmds="$cmds commit ci copy cp delete remove rm diff export help import"
+	cmds="$cmds info list ls lock log merge mergeinfo mkdir move mv rename"
+	cmds="$cmds patch propdel pdel propedit pedit propget pget proplist"
+	cmds="$cmds plist propset pset relocate resolve resolved revert status"
+	cmds="$cmds  switch unlock update upgrade"
+
+	# help options have a strange command status...
+	local helpOpts='--help -h'
+	# all special options that have a command status
+	local specOpts="--version $helpOpts"
+
+	# options that require a parameter
+	# note: continued lines must end '|' continuing lines must start '|'
+	optsParam="-r|--revision|--username|--password|--targets"
+	optsParam="$optsParam|-x|--extensions|-m|--message|-F|--file"
+	optsParam="$optsParam|--encoding|--diff-cmd|--diff3-cmd|--editor-cmd"
+	optsParam="$optsParam|--old|--new|--config-dir|--config-option"
+	optsParam="$optsParam|--native-eol|-l|--limit|-c|--change"
+	optsParam="$optsParam|--depth|--set-depth|--with-revprop"
+	optsParam="$optsParam|--cl|--changelist|--accept|--show-revs"
+
+	# svn:* and other (env SVN_BASH_*_PROPS) properties
+	local svnProps revProps allProps psCmds propCmds
+
+	# svn and user configured "file" (or directory) properties
+	# the "svn:mergeinfo" prop is not included by default because it is
+	# managed automatically, so there should be no need to edit it by hand.
+	svnProps="svn:keywords svn:executable svn:needs-lock svn:externals
+	          svn:ignore svn:eol-style svn:mime-type $SVN_BASH_FILE_PROPS"
+
+	# svn and user configured revision properties
+	revProps="svn:author svn:log svn:date $SVN_BASH_REV_PROPS"
+
+	# all properties as an array variable
+	allProps=( $svnProps $revProps )
+
+	# subcommands that expect property names
+	psCmds='propset|pset|ps'
+	propCmds="$psCmds|propget|pget|pg|propedit|pedit|pe|propdel|pdel|pd"
+
+	# possible URL schemas to access a subversion server
+	local urlSchemas='file:/// http:// https:// svn:// svn+ssh://'
+
+	# Parse arguments and set various variables about what was found.
+	#
+	# cmd: the current command if available
+	#    isPropCmd: whether it expects a property name argument
+	#    isPsCmd: whether it also expects a property value argument
+	#    isHelpCmd: whether it is about help
+	#    nExpectArgs: how many arguments are expected by the command
+	# help: help requested about this command (if cmd=='help')
+	# prop: property name (if appropriate)
+	#    isRevProp: is it a special revision property
+	# val: property value (if appropriate, under pset)
+	# options: all options encountered
+	#    hasRevPropOpt: is --revprop set
+	#    hasRevisionOpt: is --revision set
+	#    hasRelocateOpt: is --relocate set
+	#    hasReintegrateOpt: is --reintegrate set
+	#    acceptOpt: the value of --accept
+	# nargs: how many arguments were found
+	# stat: status of parsing at the 'current' word
+	#
+	# prev: previous command in the loop
+	# last: status of last parameter analyzed
+	# i: index
+	local cmd= isPropCmd= isPsCmd= isHelpCmd= nExpectArgs= isCur= i=0
+	local prev= help= prop= val= isRevProp= last='none' nargs=0 stat=
+	local options= hasRevPropOpt= hasRevisionOpt= hasRelocateOpt=
+	local acceptOpt= URL= hasReintegrateOpt=
+
+	for opt in "${COMP_WORDS[@]}"
+	do
+	    # get status of current word (from previous iteration)
+	    [[ $isCur ]] && stat=$last
+
+	    # are we processing the current word
+	    isCur=
+	    [[ $i -eq $COMP_CWORD ]] && isCur=1
+	    let i++
+
+	    # FIRST must be the "svn" command
+	    [ $last = 'none' ] && { last='first'; continue ; }
+
+	    # SKIP option arguments
+	    if [[ $prev == @($optsParam) ]] ; then
+
+		# record accept value
+		[[ $prev = '--accept' ]] && acceptOpt=$opt
+
+		prev=''
+		last='skip'
+		continue ;
+	    fi
+
+	    # Argh...  This looks like a bash bug...
+	    # Redirections are passed to the completion function
+	    # although it is managed by the shell directly...
+	    # It matters because we want to tell the user when no more
+	    # completion is available, so it does not necessary
+	    # fallback to the default case.
+	    if [[ $prev == @(<|>|>>|[12]>|[12]>>) ]] ; then
+		prev=''
+		last='skip'
+		continue ;
+	    fi
+	    prev=$opt
+
+	    # get the subCoMmanD
+	    if [[ ! $cmd && $opt \
+               && ( $opt != -* || $opt == @(${specOpts// /|}) ) ]]
+            then
+		cmd=$opt
+		[[ $cmd == @($propCmds) ]] && isPropCmd=1
+		[[ $cmd == @($psCmds) ]] && isPsCmd=1
+		[[ $cmd == @(${helpOpts// /|}) ]] && cmd='help'
+		[[ $cmd = 'help' ]] && isHelpCmd=1
+	        # HELP about a command asked with an option
+		if [[ $isHelpCmd && $cmd && $cmd != 'help' && ! $help ]]
+		then
+		    help=$cmd
+		    cmd='help'
+		fi
+		last='cmd'
+		continue
+	    fi
+
+	    # HELP about a command
+	    if [[ $isHelpCmd && ! $help && $opt && $opt != -* ]]
+	    then
+		help=$opt
+		last='help'
+		continue
+	    fi
+
+	    # PROPerty name
+	    if [[ $isPropCmd && ! $prop && $opt && $opt != -* ]]
+	    then
+		prop=$opt
+		[[ $prop == @(${revProps// /|}) ]] && isRevProp=1
+		last='prop'
+		continue
+	    fi
+
+	    # property VALue
+	    if [[ $isPsCmd && $prop && ! $val && $opt != -* ]] ;
+	    then
+		val=$opt
+		last='val'
+		continue
+	    fi
+
+	    if [[ $last != 'onlyarg' ]]
+	    then
+	      # more OPTions
+	      case $opt in
+		  -r|--revision|--revision=*)
+		      hasRevisionOpt=1
+		      ;;
+		  --revprop)
+		      hasRevPropOpt=1
+		      # restrict to revision properties!
+		      allProps=( $revProps )
+		      # on revprops, only one URL is expected
+		      nExpectArgs=1
+		      ;;
+		  -h|--help)
+		      isHelpCmd=1
+		      ;;
+		  -F|--file)
+		      val='-F'
+		      ;;
+		  --relocate)
+		      hasRelocateOpt=1
+		      ;;
+		  --reintegrate)
+		      hasReintegrateOpt=1
+		      ;;
+	      esac
+
+	      # no more options, only arguments, whatever they look like.
+	      if [[ $opt = '--' && ! $isCur ]] ; then
+		  last='onlyarg'
+		  continue
+	      fi
+
+	      # options are recorded...
+	      if [[ $opt == -* ]] ; then
+		  # but not the current one!
+		  [[ ! $isCur ]] && options="$options $opt "
+		  last='opt'
+		  continue
+	      fi
+	    else
+		# onlyarg
+		let nargs++
+		continue
+	    fi
+
+	    # then we have an argument
+	    if [[ $cmd = 'merge' && ! $URL ]] ; then
+              # fist argument is the source URL for the merge
+	      URL=$opt
+	    fi
+
+	    last='arg'
+	    let nargs++
+	done
+	# end opt option processing...
+	[[ $stat ]] || stat=$last
+
+	# suggest all subcommands, including special help
+	if [[ ! $cmd || $stat = 'cmd' ]]
+	then
+	    COMPREPLY=( $( compgen -W "$cmds $specOpts" -- $cur ) )
+	    return 0
+	fi
+
+	# suggest all subcommands
+	if [[ $stat = 'help' || ( $isHelpCmd && ! $help ) ]]
+	then
+	    COMPREPLY=( $( compgen -W "$cmds" -- $cur ) )
+	    return 0
+	fi
+
+	# URL completion
+	if [[ $cmd == @(co|checkout|ls|list) && $stat = 'arg' && \
+			$SVN_BASH_COMPL_EXT == *urls* ]]
+	then
+		# see about COMP_WORDBREAKS workaround in prop completion
+		if [[ $cur == file:* ]]
+		then
+			# file completion for file:// urls
+			local where=${cur/file:/}
+			COMPREPLY=( $(compgen -d -S '/' -X '*/.*' -- $where ) )
+			return
+		elif [[ $cur == *:* ]]
+		then
+			# get known urls
+			local urls= file=
+			for file in ~/.subversion/auth/svn.simple/* ; do
+				if [ -r $file ] ; then
+					local url=$(_svn_read_hashfile svn:realmstring < $file)
+					url=${url/*</}
+					url=${url/>*/}
+					urls="$urls $url"
+				fi
+			done
+
+			# only suggest/show possible suffixes
+			local prefix=${cur%:*} suffix=${cur#*:} c= choices=
+			for c in $urls ; do
+				[[ $c == $prefix:* ]] && choices="$choices ${c#*:}"
+			done
+
+			COMPREPLY=( $(compgen -W "$choices" -- $suffix ) )
+			return
+		else
+			# show schemas
+			COMPREPLY=( $(compgen -W "$urlSchemas" -- $cur) )
+			return
+		fi
+	fi
+
+	if [[ $cmd = 'merge' || $cmd = 'mergeinfo' ]]
+	then
+	  local here=$(_svn_info URL)
+	  # suggest a possible URL for merging
+	  if [[ ! $URL && $stat = 'arg' ]] ; then
+	    # we assume a 'standard' repos with branches and trunk
+	    if [[ "$here" == */branches/* ]] ; then
+	      # we guess that it is a merge from the trunk
+	      COMPREPLY=( $(compgen -W ${here/\/branches\/*/\/trunk} -- $cur ) )
+	      return 0
+	    elif [[ "$here" == */trunk* ]] ; then
+	      # we guess that it is a merge from a branch
+	      COMPREPLY=( $(compgen -W ${here/\/trunk*/\/branches\/} -- $cur ) )
+	      return 0
+	    else
+	      # no se, let us suggest the repository root...
+	      COMPREPLY=( $(compgen -W $(_svn_info Root) -- $cur ) )
+	      return 0
+	    fi
+	  elif [[ $URL == */branches/* && $here == */trunk* && \
+	        ! $hasReintegrateOpt && $cur = '' && $stat = 'arg' ]] ; then
+	    # force --reintegrate only if the current word is empty
+	    COMPREPLY=( $(compgen -W '--reintegrate' -- $cur ) )
+	    return 0
+	  fi
+	fi
+
+	# help about option arguments
+	if [[ $stat = 'skip' ]]
+	then
+	    local previous=${COMP_WORDS[COMP_CWORD-1]}
+	    local values= dirs= beep= exes=
+
+	    [[ $previous = '--config-dir' ]] && dirs=1
+
+	    # external editor, diff, diff3...
+	    [[ $previous = --*-cmd ]] && exes=1
+
+	    [[ $previous = '--native-eol' ]] && values='LF CR CRLF'
+
+	    # just to suggest that a number is expected. hummm.
+	    [[ $previous = '--limit' ]] && values='0 1 2 3 4 5 6 7 8 9'
+
+            # some special partial help about --revision option.
+	    [[ $previous = '--revision' || $previous = '-r' ]] && \
+		values='HEAD BASE PREV COMMITTED 0 {'
+
+	    [[ $previous = '--encoding' ]] && \
+		values="latin1 utf8 $SVN_BASH_ENCODINGS"
+
+	    [[ $previous = '--extensions' || $previous = '-x' ]] && \
+		values="--unified --ignore-space-change \
+		   --ignore-all-space --ignore-eol-style --show-c-functions"
+
+	    [[ $previous = '--depth' ]] && \
+		values='empty files immediates infinity'
+
+	    [[ $previous = '--set-depth' ]] && \
+		values='empty exclude files immediates infinity'
+
+	    [[ $previous = '--accept' ]] && \
+	    {
+	        # the list is different for 'resolve'
+                if [[ $cmd = 'resolve' ]] ; then
+		    # from svn help resolve
+		    values='base working mine-full theirs-full'
+		else # checkout merge switch update
+		    values="postpone base mine-full theirs-full edit launch \
+			mine-conflict theirs-conflict"
+		fi
+	    }
+
+	    [[ $previous = '--show-revs' ]] && values='merged eligible'
+
+	    if [[ $previous = '--username' ]] ; then
+	      values="$SVN_BASH_USERNAME"
+	      if [[ $SVN_BASH_COMPL_EXT == *username* ]] ; then
+		local file=
+		# digest? others?
+		for file in ~/.subversion/auth/svn.simple/* ; do
+		  if [ -r $file ] ; then
+		    values="$values $(_svn_read_hashfile username < $file)"
+		  fi
+		done
+	      fi
+	      [[ ! "$values" ]] && beep=1
+	    fi
+
+	    # could look at ~/.subversion/ ?
+	    # hmmm... this option should not exist
+	    [[ $previous = '--password' ]] && beep=1
+
+	    # TODO: provide help about other options such as:
+	    # --old --new --with-revprop
+
+	    # if the previous option required a parameter, do something
+	    # or fallback on ordinary filename expansion
+	    [[ $values ]] && COMPREPLY=( $( compgen -W "$values" -- $cur ) )
+	    [[ $dirs ]] && COMPREPLY=( $( compgen -o dirnames -- $cur ) )
+	    [[ $exes ]] && COMPREPLY=( $( compgen -c -- $cur ) )
+	    [[ $beep ]] &&
+	    {
+		# 'no known completion'. hummm.
+		echo -en "\a"
+		COMPREPLY=( '' )
+	    }
+	    return 0
+	fi
+
+	# provide allowed property names after property commands
+	if [[ $isPropCmd && ( ! $prop || $stat = 'prop' ) && $cur != -* ]]
+	then
+	    #
+	    # Ok, this part is pretty ugly.
+	    #
+	    # The issue is that ":" is a completion word separator,
+	    # which is a good idea for file:// urls but not within
+	    # property names...
+	    #
+	    # The first idea was to remove locally ":" from COMP_WORDBREAKS
+	    # and then put it back in all cases but in property name
+	    # completion.  It does not always work.  There is a strange bug
+	    # where one may get "svn:svn:xxx" in some unclear cases.
+	    #
+	    # Thus the handling is reprogrammed here...
+	    # The code assumes that property names look like *:*,
+	    # but it also works reasonably well with simple names.
+	    #
+	    # This hack is broken in bash4... not sure what to do about it,
+            # especially while keeping the bash3 compatibility:-(
+	    local choices=
+
+	    if [[ $cur == *:* ]]
+	    then
+		# only suggest/show possible suffixes
+		local prefix=${cur%:*} suffix=${cur#*:} c=
+		for c in ${allProps[@]} ; do
+		    [[ $c == $prefix:* ]] && choices="$choices ${c#*:}"
+		done
+		# everything will be appended to the prefix because ':' is
+		# a separator, so cur is restricted to the suffix part.
+		cur=$suffix
+	    else
+		# only one choice is fine
+		COMPREPLY=( $( compgen -W "${allProps[*]}" -- $cur ) )
+		[ ${#COMPREPLY[@]} -eq 1 ] && return 0
+
+		# no ':' so only suggest prefixes?
+		local seen= n=0 last= c=
+		for c in ${allProps[@]%:*} ; do
+		    # do not put the same prefix twice...
+		    if [[ $c == $cur* && ( ! $seen || $c != @($seen) ) ]]
+		    then
+			let n++
+			last=$c
+			choices="$choices $c:"
+			if [[ $seen ]]
+			then
+			    seen="$seen|$c*"
+			else
+			    seen="$c*"
+			fi
+		    fi
+		done
+
+		# supply two choices to force a partial completion and a beep
+		[[ $n -eq 1 ]] && choices="$last:1 $last:2"
+	    fi
+
+	    COMPREPLY=( $( compgen -W "$choices" -- $cur ) )
+	    return 0
+	fi
+
+	# force mandatory --revprop option on revision properties
+	if [[ $isRevProp && ! $hasRevPropOpt ]]
+	then
+	    COMPREPLY=( $( compgen -W '--revprop' -- $cur ) )
+	    return 0
+	fi
+
+	# force mandatory --revision option on revision properties
+	if [[ $isRevProp && $hasRevPropOpt && ! $hasRevisionOpt ]]
+	then
+	    COMPREPLY=( $( compgen -W '--revision' -- $cur ) )
+	    return 0
+	fi
+
+	# possible completion when setting property values
+	if [[ $isPsCmd && $prop && ( ! $val || $stat = 'val' ) ]]
+	then
+	    # ' is a reminder for an arbitrary value
+	    local values="\' --file"
+	    case $prop in
+		svn:keywords)
+		    # just a subset?
+		    values="Id Rev URL Date Author Header \' $SVN_BASH_KEYWORDS"
+		    ;;
+		svn:executable|svn:needs-lock)
+		    # hmmm... canonical value * is special to the shell.
+		    values='\\*'
+		    ;;
+		svn:eol-style)
+		    values='native LF CR CRLF'
+		    ;;
+		svn:mime-type)
+		    # could read /etc/mime.types if available. overkill.
+		    values="text/ text/plain text/html text/xml text/rtf
+                       image/ image/png image/gif image/jpeg image/tiff
+                       audio/ audio/midi audio/mpeg
+                       video/ video/mpeg video/mp4
+                       application/ application/octet-stream
+                       $SVN_BASH_MIME_TYPE"
+		    ;;
+	    esac
+
+	    COMPREPLY=( $( compgen -W "$values" -- $cur ) )
+	    # special case for --file... return even if within an option
+	    [[ ${COMPREPLY} ]] && return 0
+	fi
+
+	# maximum number of additional arguments expected in various forms
+	case $cmd in
+	    merge)
+		nExpectArgs=3
+		;;
+	    mergeinfo)
+		nExpectArgs=1
+		;;
+	    copy|cp|move|mv|rename|ren|export|import)
+		nExpectArgs=2
+		;;
+	    switch|sw)
+		[[ ! $hasRelocateOpt ]] && nExpectArgs=2
+		;;
+	    help|h)
+		nExpectArgs=0
+		;;
+	    --version)
+		nExpectArgs=0
+		;;
+	esac
+
+	# the maximum number of arguments is reached for a command
+	if [[ $nExpectArgs && $nargs -gt $nExpectArgs ]]
+	then
+	    # some way to tell 'no completion at all'... is there a better one?
+	    # Do not say 'file completion' here.
+	    echo -en "\a"
+	    COMPREPLY=( '' )
+	    return 0
+	fi
+
+	# if not typing an option,
+	# then fallback on filename expansion...
+	if [[ $cur != -* || $stat = 'onlyarg' ]]  ; then
+
+	    # do we allow possible expensive completion here?
+	    if [[ $SVN_BASH_COMPL_EXT == *svnstatus* ]] ; then
+
+		# build status command and options
+		# "--quiet" removes 'unknown' files
+		local status='svn status --non-interactive'
+
+		[[ $SVN_BASH_COMPL_EXT == *recurse* ]] || \
+		    status="$status --non-recursive"
+
+		# I'm not sure that it can work with externals in call cases
+		# the output contains translatable sentences (even with quiet)
+		[[ $SVN_BASH_COMPL_EXT == *externals* ]] || \
+		    status="$status --ignore-externals"
+
+		local cs= files=
+		# subtlety: must not set $cur* if $cur is empty in some cases
+		[[ $cur ]] && cs=$cur*
+
+		# 'files' is set according to the current subcommand
+		case $cmd in
+		    st*) # status completion must include all files
+			files=$cur*
+			;;
+		    ci|commit|revert|di*) # anything edited
+			files=$($status $cs| _svn_grcut '@([MADR!]*| M*|_M*)')
+			;;
+		    add) # unknown files
+			files=$($status $cs| _svn_grcut '\?*')
+			;;
+		    unlock) # unlock locked files
+			files=$($status $cs| _svn_grcut '@(??L*|?????[KOTB]*)')
+			;;
+		    resolve*) # files in conflict
+			files=$($status $cs| _svn_grcut '@(?C*|C*)')
+			;;
+		    praise|blame|ann*) # any svn file but added
+			files=$( _svn_lls all $cur* )
+			;;
+		    p*) # prop commands
+			if [[ $cmd == @($propCmds) && \
+			      $prop == @(svn:ignore|svn:externals) ]] ; then
+			    # directory specific props
+			    files=$( _svn_lls dir . $cur* )
+			else
+			    # ??? added directories appear twice: foo foo/
+			    files="$( _svn_lls all $cur* )
+                                   $($status $cs | _svn_grcut 'A*' )"
+			fi
+			;;
+		    info) # information on any file
+			files="$( _svn_lls all $cur* )
+                               $($status $cs | _svn_grcut 'A*' )"
+			;;
+		    remove|rm|del*|move|mv|rename) # changing existing files
+			files=$( _svn_lls all $cur* )
+			;;
+		    mkdir) # completion in mkdir can only be for subdirs?
+			files=$( _svn_lls dir $cur* )
+			;;
+		    log|lock|up*|cl*|switch) # misc, all but added files
+			files=$( _svn_lls all $cur* )
+			;;
+		    merge) # may do a better job? URL/WCPATH
+			files=$( _svn_lls all $cur* )
+			;;
+		    ls|list) # better job? what about URLs?
+			files=$( _svn_lls all $cur* )
+			;;
+		    *) # other commands: changelist export import cat mergeinfo
+			local fallback=1
+			;;
+		esac
+
+		# when not recursive, some relevant files may exist
+		# within subdirectories, so they are added here.
+		# should it be restricted to svn-managed subdirs? no??
+		if [[ $SVN_BASH_COMPL_EXT != *recurse* ]] ; then
+		    files="$files $( _svn_lls dir $cur* )"
+		fi
+
+		# set completion depending on computed 'files'
+		if [[ $files ]] ; then
+		    COMPREPLY=( $( compgen -W "$files" -- $cur ) )
+		    # if empty, set to nope?
+		    [[ "${COMPREPLY[*]}" ]] || COMPREPLY=( '' )
+		elif [[ ! $fallback ]] ; then
+		    # this suggests no completion...
+		    echo -en "\a"
+		    COMPREPLY=( '' )
+		fi
+	    fi
+	    # else fallback to ordinary filename completion...
+	    return 0
+	fi
+
+	# otherwise build possible options for the command
+	pOpts="--username --password --no-auth-cache --non-interactive \
+	       --trust-server-cert --force-interactive"
+	mOpts="-m --message -F --file --encoding --force-log --with-revprop"
+	rOpts="-r --revision"
+	qOpts="-q --quiet"
+	nOpts="-N --non-recursive --depth"
+	gOpts="-g --use-merge-history"
+	cOpts="--cl --changelist"
+
+	cmdOpts=
+	case $cmd in
+	--version)
+		cmdOpts="$qOpts"
+		;;
+	add)
+		cmdOpts="--auto-props --no-auto-props --force --targets \
+		         --no-ignore --parents $nOpts $qOpts $pOpts"
+		;;
+	blame|annotate|ann|praise)
+		cmdOpts="$rOpts $pOpts -v --verbose --incremental --xml \
+		         -x --extensions --force $gOpts"
+		;;
+	cat)
+		cmdOpts="$rOpts $pOpts"
+		;;
+	changelist|cl)
+		cmdOpts="--targets $pOpts $qOpts $cOpts \
+                         -R --recursive --depth --remove"
+		;;
+	checkout|co)
+		cmdOpts="$rOpts $qOpts $nOpts $pOpts --ignore-externals \
+                         --force"
+		;;
+	cleanup)
+		cmdOpts="--diff3-cmd $pOpts"
+		;;
+	commit|ci)
+		cmdOpts="$mOpts $qOpts $nOpts --targets --editor-cmd $pOpts \
+		         --no-unlock $cOpts --keep-changelists \
+		         --include-externals"
+		;;
+	copy|cp)
+		cmdOpts="$mOpts $rOpts $qOpts --editor-cmd $pOpts --parents \
+		         --ignore-externals"
+		;;
+	delete|del|remove|rm)
+		cmdOpts="--force $mOpts $qOpts --targets --editor-cmd $pOpts \
+                         --keep-local"
+		;;
+	diff|di)
+		cmdOpts="$rOpts -x --extensions --diff-cmd --no-diff-deleted \
+		         $nOpts $pOpts --force --old --new --notice-ancestry \
+		         -c --change --summarize $cOpts --xml --git \
+		         --internal-diff --show-copies-as-adds \
+		         --ignore-properties --properties-only --no-diff-added \
+		         --patch-compatible"
+		;;
+	export)
+		cmdOpts="$rOpts $qOpts $pOpts $nOpts --force --native-eol \
+                         --ignore-externals --ignore-keywords"
+		;;
+	help|h|\?)
+		cmdOpts=
+		;;
+	import)
+		cmdOpts="--auto-props --no-auto-props $mOpts $qOpts $nOpts \
+		         --no-ignore --editor-cmd $pOpts --force"
+		;;
+	info)
+		cmdOpts="$pOpts $rOpts --targets -R --recursive --depth \
+                         --incremental --xml $cOpts"
+		;;
+	list|ls)
+		cmdOpts="$rOpts -v --verbose -R --recursive $pOpts \
+                         --incremental --xml --depth --include-externals"
+		;;
+	lock)
+		cmdOpts="-m --message -F --file --encoding --force-log \
+                         --targets --force $pOpts"
+		;;
+	log)
+		cmdOpts="$rOpts -v --verbose --targets $pOpts --stop-on-copy \
+		         --incremental --xml $qOpts -l --limit -c --change \
+                         $gOpts --with-all-revprops --with-revprop --depth \
+		         --diff --diff-cmd -x --extensions --internal-diff \
+		         --with-no-revprops --search --search-and"
+		;;
+	merge)
+		cmdOpts="$rOpts $nOpts $qOpts --force --dry-run --diff3-cmd \
+		         $pOpts --ignore-ancestry -c --change -x --extensions \
+                         --record-only --accept --reintegrate \
+		         --allow-mixed-revisions -v --verbose"
+		;;
+	mergeinfo)
+	        cmdOpts="$rOpts $pOpts --depth --show-revs -R --recursive"
+		;;
+	mkdir)
+		cmdOpts="$mOpts $qOpts --editor-cmd $pOpts --parents"
+		;;
+	move|mv|rename|ren)
+		cmdOpts="$mOpts $rOpts $qOpts --force --editor-cmd $pOpts \
+                         --parents --allow-mixed-revisions"
+		;;
+	patch)
+		cmdOpts="$qOpts $pOpts --dry-run --ignore-whitespace \
+			--reverse-diff --strip"
+		;;
+	propdel|pdel|pd)
+		cmdOpts="$qOpts -R --recursive $rOpts $pOpts $cOpts \
+                         --depth"
+		[[ $isRevProp || ! $prop ]] && cmdOpts="$cmdOpts --revprop"
+		;;
+	propedit|pedit|pe)
+		cmdOpts="--editor-cmd $pOpts $mOpts --force"
+		[[ $isRevProp || ! $prop ]] && \
+		    cmdOpts="$cmdOpts --revprop $rOpts"
+		;;
+	propget|pget|pg)
+	        cmdOpts="-v --verbose -R --recursive $rOpts --strict \
+		         $pOpts $cOpts --depth --xml --show-inherited-props"
+		[[ $isRevProp || ! $prop ]] && cmdOpts="$cmdOpts --revprop"
+		;;
+	proplist|plist|pl)
+		cmdOpts="-v --verbose -R --recursive $rOpts --revprop $qOpts \
+		         $pOpts $cOpts --depth --xml --show-inherited-props"
+		;;
+	propset|pset|ps)
+		cmdOpts="$qOpts --targets -R --recursive \
+		         --encoding $pOpts --force $cOpts --depth"
+		[[ $isRevProp || ! $prop ]] && \
+		    cmdOpts="$cmdOpts --revprop $rOpts"
+		[[ $val ]] || cmdOpts="$cmdOpts -F --file"
+		;;
+        relocate)
+		cmdOpts="--ignore-externals $pOpts"
+		;;
+        resolve)
+                cmdOpts="--targets -R --recursive $qOpts $pOpts --accept \
+                         --depth"
+                ;;
+	resolved)
+		cmdOpts="--targets -R --recursive $qOpts $pOpts --depth"
+		;;
+	revert)
+		cmdOpts="--targets -R --recursive $qOpts $cOpts \
+                         --depth $pOpts"
+		;;
+	status|stat|st)
+		cmdOpts="-u --show-updates -v --verbose $nOpts $qOpts $pOpts \
+		         --no-ignore --ignore-externals --incremental --xml \
+                         $cOpts"
+		;;
+	switch|sw)
+		cmdOpts="--relocate $rOpts $nOpts $qOpts $pOpts --diff3-cmd \
+                         --force --accept --ignore-externals --set-depth \
+		         --ignore-ancestry"
+		;;
+	unlock)
+		cmdOpts="--targets --force $pOpts"
+		;;
+	update|up)
+		cmdOpts="$rOpts $nOpts $qOpts $pOpts --diff3-cmd \
+                         --ignore-externals --force --accept $cOpts \
+                         --parents --editor-cmd --set-depth"
+		;;
+	upgrade)
+		cmdOpts="$qOpts $pOpts"
+		;;
+	*)
+		;;
+	esac
+
+	# add options that are nearly always available
+	[[ "$cmd" != "--version" ]] && cmdOpts="$cmdOpts $helpOpts"
+	cmdOpts="$cmdOpts --config-dir --config-option"
+
+        # --accept (edit|launch) incompatible with --non-interactive
+	if [[ $acceptOpt == @(edit|launch) ]] ;
+	then
+	    cmdOpts=${cmdOpts/ --non-interactive / }
+	fi
+
+	# take out options already given
+	for opt in $options
+	do
+		local optBase
+
+		# remove leading dashes and arguments
+		case $opt in
+		--*)    optBase=${opt/=*/} ;;
+		-*)     optBase=${opt:0:2} ;;
+		esac
+
+		cmdOpts=" $cmdOpts "
+		cmdOpts=${cmdOpts/ ${optBase} / }
+
+		# take out alternatives and mutually exclusives
+		case $optBase in
+		-v)              cmdOpts=${cmdOpts/ --verbose / } ;;
+		--verbose)       cmdOpts=${cmdOpts/ -v / } ;;
+		-N)              cmdOpts=${cmdOpts/ --non-recursive / } ;;
+		--non-recursive) cmdOpts=${cmdOpts/ -N / } ;;
+		-R)              cmdOpts=${cmdOpts/ --recursive / } ;;
+		--recursive)     cmdOpts=${cmdOpts/ -R / } ;;
+		-x)              cmdOpts=${cmdOpts/ --extensions / } ;;
+		--extensions)    cmdOpts=${cmdOpts/ -x / } ;;
+		-q)              cmdOpts=${cmdOpts/ --quiet / } ;;
+		--quiet)         cmdOpts=${cmdOpts/ -q / } ;;
+		-h)              cmdOpts=${cmdOpts/ --help / } ;;
+		--help)          cmdOpts=${cmdOpts/ -h / } ;;
+		-l)              cmdOpts=${cmdOpts/ --limit / } ;;
+		--limit)         cmdOpts=${cmdOpts/ -l / } ;;
+		-r)              cmdOpts=${cmdOpts/ --revision / } ;;
+		--revision)      cmdOpts=${cmdOpts/ -r / } ;;
+		-c)              cmdOpts=${cmdOpts/ --change / } ;;
+		--change)        cmdOpts=${cmdOpts/ -c / } ;;
+		--auto-props)    cmdOpts=${cmdOpts/ --no-auto-props / } ;;
+		--no-auto-props) cmdOpts=${cmdOpts/ --auto-props / } ;;
+		-g)              cmdOpts=${cmdOpts/ --use-merge-history / } ;;
+		--use-merge-history)
+                                 cmdOpts=${cmdOpts/ -g / } ;;
+		-m|--message|-F|--file)
+			cmdOpts=${cmdOpts/ --message / }
+			cmdOpts=${cmdOpts/ -m / }
+			cmdOpts=${cmdOpts/ --file / }
+			cmdOpts=${cmdOpts/ -F / }
+			;;
+		esac
+
+		# remove help options within help subcommand
+		if [ $isHelpCmd ] ; then
+		    cmdOpts=${cmdOpts/ -h / }
+		    cmdOpts=${cmdOpts/ --help / }
+		fi
+	done
+
+	# provide help about available options
+	COMPREPLY=( $( compgen -W "$cmdOpts" -- $cur ) )
+	return 0
+}
+complete -F _svn -o default -X '@(*/.svn|*/.svn/|.svn|.svn/)' svn
+
+_svnadmin ()
+{
+	local cur cmds cmdOpts optsParam opt helpCmds optBase i
+
+	COMPREPLY=()
+	cur=${COMP_WORDS[COMP_CWORD]}
+
+	# Possible expansions, without pure-prefix abbreviations such as "h".
+	cmds='crashtest create deltify dump freeze help hotcopy list-dblogs \
+	      list-unused-dblogs load lock lslocks lstxns pack recover rmlocks \
+	      rmtxns setlog setrevprop setuuid unlock upgrade verify --version'
+
+	if [[ $COMP_CWORD -eq 1 ]] ; then
+		COMPREPLY=( $( compgen -W "$cmds" -- $cur ) )
+		return 0
+	fi
+
+	# options that require a parameter
+	# note: continued lines must end '|' continuing lines must start '|'
+	optsParam="-r|--revision|--parent-dir|--fs-type|-M|--memory-cache-size"
+	optsParam="$optsParam|-F|--file"
+
+	# if not typing an option, or if the previous option required a
+	# parameter, then fallback on ordinary filename expansion
+	helpCmds='help|--help|h|\?'
+	if [[ ${COMP_WORDS[1]} != @($helpCmds) ]] && \
+	   [[ "$cur" != -* ]] || \
+	   [[ ${COMP_WORDS[COMP_CWORD-1]} == @($optsParam) ]] ; then
+		return 0
+	fi
+
+	cmdOpts=
+	case ${COMP_WORDS[1]} in
+	create)
+		cmdOpts="--bdb-txn-nosync --bdb-log-keep --config-dir \
+		         --fs-type --pre-1.4-compatible --pre-1.5-compatible \
+		         --pre-1.6-compatible --compatible-version"
+		;;
+	deltify)
+		cmdOpts="-r --revision -q --quiet"
+		;;
+	dump)
+		cmdOpts="-r --revision --incremental -q --quiet --deltas \
+		         -M --memory-cache-size"
+		;;
+	freeze)
+		cmdOpts="-F --file"
+		;;
+	help|h|\?)
+		cmdOpts="$cmds"
+		;;
+	hotcopy)
+		cmdOpts="--clean-logs"
+		;;
+	load)
+		cmdOpts="--ignore-uuid --force-uuid --parent-dir -q --quiet \
+		         --use-pre-commit-hook --use-post-commit-hook \
+		         --bypass-prop-validation -M --memory-cache-size"
+		;;
+	lock|unlock)
+		cmdOpts="--bypass-hooks"
+		;;
+	recover)
+		cmdOpts="--wait"
+		;;
+	rmtxns)
+		cmdOpts="-q --quiet"
+		;;
+	setlog)
+		cmdOpts="-r --revision --bypass-hooks"
+		;;
+	setrevprop)
+		cmdOpts="-r --revision --use-pre-revprop-change-hook \
+		         --use-post-revprop-change-hook"
+		;;
+	verify)
+		cmdOpts="-r --revision -q --quiet"
+		;;
+	*)
+		;;
+	esac
+
+	cmdOpts="$cmdOpts --help -h"
+
+	# take out options already given
+	for (( i=2; i<=$COMP_CWORD-1; ++i )) ; do
+		opt=${COMP_WORDS[$i]}
+
+		case $opt in
+		--*)    optBase=${opt/=*/} ;;
+		-*)     optBase=${opt:0:2} ;;
+		esac
+
+		cmdOpts=" $cmdOpts "
+		cmdOpts=${cmdOpts/ ${optBase} / }
+
+		# take out alternatives
+		case $optBase in
+		-q)              cmdOpts=${cmdOpts/ --quiet / } ;;
+		--quiet)         cmdOpts=${cmdOpts/ -q / } ;;
+		-h)              cmdOpts=${cmdOpts/ --help / } ;;
+		--help)          cmdOpts=${cmdOpts/ -h / } ;;
+		-r)              cmdOpts=${cmdOpts/ --revision / } ;;
+		--revision)      cmdOpts=${cmdOpts/ -r / } ;;
+		-F)              cmdOpts=${cmdOpts/ --file / } ;;
+		--file)          cmdOpts=${cmdOpts/ -F / } ;;
+		-M)              cmdOpts=${cmdOpts/ --memory-cache-size / } ;;
+		--memory-cache-size) cmdOpts=${cmdOpts/ --M / } ;;
+		esac
+
+		# skip next option if this one requires a parameter
+		if [[ $opt == @($optsParam) ]] ; then
+			((++i))
+		fi
+	done
+
+	COMPREPLY=( $( compgen -W "$cmdOpts" -- $cur ) )
+
+	return 0
+}
+complete -F _svnadmin -o default svnadmin
+
+_svndumpfilter ()
+{
+	local cur cmds cmdOpts optsParam opt helpCmds optBase i
+
+	COMPREPLY=()
+	cur=${COMP_WORDS[COMP_CWORD]}
+
+	# Possible expansions, without pure-prefix abbreviations such as "h".
+	cmds='exclude help include --version'
+
+	if [[ $COMP_CWORD -eq 1 ]] ; then
+		COMPREPLY=( $( compgen -W "$cmds" -- $cur ) )
+		return 0
+	fi
+
+	# options that require a parameter
+	# note: continued lines must end '|' continuing lines must start '|'
+	optsParam="--targets"
+
+	# if not typing an option, or if the previous option required a
+	# parameter, then fallback on ordinary filename expansion
+	helpCmds='help|--help|h|\?'
+	if [[ ${COMP_WORDS[1]} != @($helpCmds) ]] && \
+	   [[ "$cur" != -* ]] || \
+	   [[ ${COMP_WORDS[COMP_CWORD-1]} == @($optsParam) ]] ; then
+		return 0
+	fi
+
+	cmdOpts=
+	case ${COMP_WORDS[1]} in
+	exclude|include)
+		cmdOpts="--drop-empty-revs --renumber-revs
+		         --skip-missing-merge-sources --targets
+		         --preserve-revprops --quiet"
+		;;
+	help|h|\?)
+		cmdOpts="$cmds"
+		;;
+	*)
+		;;
+	esac
+
+	cmdOpts="$cmdOpts --help -h"
+
+	# take out options already given
+	for (( i=2; i<=$COMP_CWORD-1; ++i )) ; do
+		opt=${COMP_WORDS[$i]}
+
+		case $opt in
+		--*)    optBase=${opt/=*/} ;;
+		-*)     optBase=${opt:0:2} ;;
+		esac
+
+		cmdOpts=" $cmdOpts "
+		cmdOpts=${cmdOpts/ ${optBase} / }
+
+		# take out alternatives
+		case $optBase in
+		-h)              cmdOpts=${cmdOpts/ --help / } ;;
+		--help)          cmdOpts=${cmdOpts/ -h / } ;;
+		esac
+
+		# skip next option if this one requires a parameter
+		if [[ $opt == @($optsParam) ]] ; then
+			((++i))
+		fi
+	done
+
+	COMPREPLY=( $( compgen -W "$cmdOpts" -- $cur ) )
+
+	return 0
+}
+complete -F _svndumpfilter -o default svndumpfilter
+
+_svnlook ()
+{
+	local cur cmds cmdOpts optsParam opt helpCmds optBase i
+
+	COMPREPLY=()
+	cur=${COMP_WORDS[COMP_CWORD]}
+
+	# Possible expansions, without pure-prefix abbreviations such as "h".
+	cmds='author cat changed date diff dirs-changed help history info \
+	      lock log propget proplist tree uuid youngest --version'
+
+	if [[ $COMP_CWORD -eq 1 ]] ; then
+		COMPREPLY=( $( compgen -W "$cmds" -- $cur ) )
+		return 0
+	fi
+
+	# options that require a parameter
+	# note: continued lines must end '|' continuing lines must start '|'
+	optsParam="-r|--revision|-t|--transaction|-l|--limit|-x|--extensions"
+
+	# if not typing an option, or if the previous option required a
+	# parameter, then fallback on ordinary filename expansion
+	helpCmds='help|--help|h|\?'
+	if [[ ${COMP_WORDS[1]} != @($helpCmds) ]] && \
+	   [[ "$cur" != -* ]] || \
+	   [[ ${COMP_WORDS[COMP_CWORD-1]} == @($optsParam) ]] ; then
+		return 0
+	fi
+
+	cmdOpts=
+	case ${COMP_WORDS[1]} in
+	author)
+		cmdOpts="-r --revision -t --transaction"
+		;;
+	cat)
+		cmdOpts="-r --revision -t --transaction"
+		;;
+	changed)
+		cmdOpts="-r --revision -t --transaction --copy-info"
+		;;
+	date)
+		cmdOpts="-r --revision -t --transaction"
+		;;
+	diff)
+		cmdOpts="-r --revision -t --transaction --diff-copy-from \
+		         --no-diff-added --no-diff-deleted -x --extensions"
+		;;
+	dirs-changed)
+		cmdOpts="-r --revision -t --transaction"
+		;;
+	help|h|\?)
+		cmdOpts="$cmds"
+		;;
+	history)
+		cmdOpts="-r --revision -l --limit --show-ids"
+		;;
+	info)
+		cmdOpts="-r --revision -t --transaction"
+		;;
+	lock)
+		cmdOpts=
+		;;
+	log)
+		cmdOpts="-r --revision -t --transaction"
+		;;
+	propget|pget|pg)
+		cmdOpts="-r --revision -t --transaction --revprop"
+		;;
+	proplist|plist|pl)
+		cmdOpts="-r --revision -t --transaction --revprop -v --verbose --xml"
+		;;
+	tree)
+		cmdOpts="-r --revision -t --transaction --full-paths -N --non-recursive --show-ids"
+		;;
+	uuid)
+		cmdOpts=
+		;;
+	youngest)
+		cmdOpts=
+		;;
+	*)
+		;;
+	esac
+
+	cmdOpts="$cmdOpts --help -h"
+
+	# take out options already given
+	for (( i=2; i<=$COMP_CWORD-1; ++i )) ; do
+		opt=${COMP_WORDS[$i]}
+
+		case $opt in
+		--*)    optBase=${opt/=*/} ;;
+		-*)     optBase=${opt:0:2} ;;
+		esac
+
+		cmdOpts=" $cmdOpts "
+		cmdOpts=${cmdOpts/ ${optBase} / }
+
+		# take out alternatives
+		case $optBase in
+		-N)              cmdOpts=${cmdOpts/ --non-recursive / } ;;
+		--non-recursive) cmdOpts=${cmdOpts/ -N / } ;;
+		-h)              cmdOpts=${cmdOpts/ --help / } ;;
+		--help)          cmdOpts=${cmdOpts/ -h / } ;;
+		-l)              cmdOpts=${cmdOpts/ --limit / } ;;
+		--limit)         cmdOpts=${cmdOpts/ -l / } ;;
+		-r)              cmdOpts=${cmdOpts/ --revision / } ;;
+		--revision)      cmdOpts=${cmdOpts/ -r / } ;;
+		-t)              cmdOpts=${cmdOpts/ --transaction / } ;;
+		--transaction)   cmdOpts=${cmdOpts/ -t / } ;;
+		-v)              cmdOpts=${cmdOpts/ --verbose / } ;;
+		--verbose)       cmdOpts=${cmdOpts/ -v / } ;;
+		-x)              cmdOpts=${cmdOpts/ --extensions / } ;;
+		--extensions)    cmdOpts=${cmdOpts/ -x / } ;;
+		esac
+
+		# skip next option if this one requires a parameter
+		if [[ $opt == @($optsParam) ]] ; then
+			((++i))
+		fi
+	done
+
+	COMPREPLY=( $( compgen -W "$cmdOpts" -- $cur ) )
+
+	return 0
+}
+complete -F _svnlook -o default svnlook
+
+_svnsync ()
+{
+	local cur cmds cmdOpts optsParam opt helpCmds optBase i
+
+	COMPREPLY=()
+	cur=${COMP_WORDS[COMP_CWORD]}
+
+	# Possible expansions, without pure-prefix abbreviations such as "h".
+	cmds='copy-revprops help info initialize synchronize --version'
+
+	if [[ $COMP_CWORD -eq 1 ]] ; then
+		COMPREPLY=( $( compgen -W "$cmds" -- $cur ) )
+		return 0
+	fi
+
+	# options that require a parameter
+	# note: continued lines must end '|' continuing lines must start '|'
+	optsParam="--config-dir|--config-option|--source-username|--source-password"
+	optsParam="$optsParam|--sync-username|--sync-password"
+
+	# if not typing an option, or if the previous option required a
+	# parameter, then fallback on ordinary filename expansion
+	helpCmds='help|--help|h|\?'
+	if [[ ${COMP_WORDS[1]} != @($helpCmds) ]] && \
+	   [[ "$cur" != -* ]] || \
+	   [[ ${COMP_WORDS[COMP_CWORD-1]} == @($optsParam) ]] ; then
+		return 0
+	fi
+
+	cmdOpts=
+	case ${COMP_WORDS[1]} in
+	copy-revprops|initialize|init|synchronize|sync)
+		cmdOpts="--non-interactive --no-auth-cache --trust-server-cert \
+		         --source-username --source-password --sync-username \
+		         --sync-password --config-dir --config-option -q --quiet"
+		;;
+	help|h|\?)
+		cmdOpts="$cmds"
+		;;
+	info)
+		cmdOpts="--non-interactive --no-auth-cache --trust-server-cert \
+		         --source-username --source-password --sync-username \
+		         --sync-password --config-dir --config-option"
+		;;
+	*)
+		;;
+	esac
+
+	cmdOpts="$cmdOpts --help -h"
+
+	# take out options already given
+	for (( i=2; i<=$COMP_CWORD-1; ++i )) ; do
+		opt=${COMP_WORDS[$i]}
+
+		case $opt in
+		--*)    optBase=${opt/=*/} ;;
+		-*)     optBase=${opt:0:2} ;;
+		esac
+
+		cmdOpts=" $cmdOpts "
+		cmdOpts=${cmdOpts/ ${optBase} / }
+
+		# take out alternatives
+		case $optBase in
+		-h)              cmdOpts=${cmdOpts/ --help / } ;;
+		--help)          cmdOpts=${cmdOpts/ -h / } ;;
+		-q)              cmdOpts=${cmdOpts/ --quiet / } ;;
+		--quiet)         cmdOpts=${cmdOpts/ -q / } ;;
+		esac
+
+		# skip next option if this one requires a parameter
+		if [[ $opt == @($optsParam) ]] ; then
+			((++i))
+		fi
+	done
+
+	COMPREPLY=( $( compgen -W "$cmdOpts" -- $cur ) )
+
+	return 0
+}
+complete -F _svnsync -o default svnsync
+
+# reasonable completion for 'svnversion'
+_svnversion ()
+{
+	local cmdOpts=" -n --no-newline -c --committed -h --help --version "
+	local cur=${COMP_WORDS[COMP_CWORD]}
+
+	COMPREPLY=()
+
+	# parse current options
+	local options= wcpath= trailurl= last='none' stat= opt= i=-1 isCur=
+	for opt in ${COMP_WORDS[@]}
+	do
+		[[ $i -eq $COMP_CWORD ]] && stat=$last
+		let i++
+
+		# are we processing the current word?
+		isCur=
+		[[ $i -eq $COMP_CWORD ]] && isCur=1
+
+		# skip first command, should be 'svnversion'
+		if [ $last = 'none' ] ; then
+			last='first'
+			continue
+		fi
+
+		# get options
+		if [[ $last != 'arg' && $opt == -* ]]
+		then
+			# if '--' is at the current position, it means that we are looking
+			# for '--*' options, and not the end of option processing.
+			if [[ $opt = '--' && ! $isCur ]]
+			then
+				last='arg'
+			else
+				options="$options $opt "
+				last='opt'
+			fi
+			continue
+		fi
+		# get arguments
+		if [[ $opt != -* ]]
+		then
+			last='arg'
+			if [[ ! $wcpath ]]
+			then
+				wcpath=$opt
+			elif [[ ! $trailurl ]]
+			then
+				trailurl=$opt
+			fi
+		fi
+	done
+	[[ $stat ]] || stat=$last
+
+	# argument part
+	if [[ $cur != -* || $stat = 'arg' ]]
+	then
+		[[ $wcpath && $trailurl ]] && COMPREPLY=( '' )
+		return 0
+	fi
+
+	# suggest options, and  take out already given options
+	for opt in $options
+	do
+		# take out options
+		cmdOpts=${cmdOpts/ $opt / }
+
+		# take out alternatives
+		case $opt in
+			-n)              cmdOpts=${cmdOpts/ --no-newline / } ;;
+			--no-newline)    cmdOpts=${cmdOpts/ -n / } ;;
+			-h)              cmdOpts=${cmdOpts/ --help / } ;;
+			--help)          cmdOpts=${cmdOpts/ -h / } ;;
+			-c)              cmdOpts=${cmdOpts/ --committed / } ;;
+			--committed)     cmdOpts=${cmdOpts/ -c / } ;;
+		esac
+	done
 
-# Make sure svn is installed
-_command_exists svn || return
+	COMPREPLY=( $( compgen -W "$cmdOpts" -- $cur ) )
 
-# Don't handle completion if it's already managed
-if _completion_exists svn; then
-	_log_warning "completion already loaded - this usually means it is safe to stop using this completion"
 	return 0
-fi
-
-_svn_bash_completion_xcrun_svn=
-if _command_exists xcrun; then
-	_svn_bash_completion_xcrun_svn="$(xcrun --find svn)"
-fi
-_svn_bash_completion_paths=(
-	# Standard locations
-	"${SVN_EXE%/*}/../etc/bash_completion.d/subversion"
-	# MacOS non-system locations
-	"${_svn_bash_completion_xcrun_svn%/bin/svn}/etc/bash_completion.d/subversion"
-)
-
-# Load the first completion file found
-_svn_bash_completion_found=false
-for _comp_path in "${_svn_bash_completion_paths[@]}"; do
-	if [[ -r "$_comp_path" ]]; then
-		_svn_bash_completion_found=true
-		# shellcheck disable=SC1090 # don't follow
-		source "$_comp_path"
-		break
-	fi
-done
-
-# Cleanup
-if [[ "${_svn_bash_completion_found}" == false ]]; then
-	_log_warning "no completion files found - please try enabling the 'system' completion instead."
-fi
-unset "${!_svn_bash_completion@}"
+}
+# -X option does not seem to work?
+complete -F _svnversion -o dirnames -X '*.svn*' svnversion
diff --git a/completion/available/system.completion.bash b/completion/available/system.completion.bash
index bb1d14eb..113a93f5 100644
--- a/completion/available/system.completion.bash
+++ b/completion/available/system.completion.bash
@@ -1,52 +1,59 @@
-# shellcheck shell=bash
+#!/usr/bin/env bash
 #
 # Loads the system's Bash completion modules.
 # If Homebrew is installed (OS X), it's Bash completion modules are loaded.
 
-# Load before other completions
-# BASH_IT_LOAD_PRIORITY: 325
-
-# Bash-completion is too large and complex to expect to handle unbound variables throughout the whole codebase.
-if shopt -qo nounset; then
+if shopt -qo nounset
+then # Bash-completion is too large and complex to expect to handle unbound variables throughout the whole codebase.
 	__bash_it_restore_nounset=true
 	shopt -uo nounset
 else
 	__bash_it_restore_nounset=false
 fi
 
-# shellcheck disable=SC1090 disable=SC1091
-if [[ -r "${BASH_COMPLETION:-}" ]]; then
+if [[ -r "${BASH_COMPLETION:-}" ]] ; then
+  # shellcheck disable=SC1091
 	source "${BASH_COMPLETION}"
-elif [[ -r /etc/bash_completion ]]; then
-	source /etc/bash_completion
+
+elif [[ -r /etc/bash_completion ]] ; then
+  # shellcheck disable=SC1091
+  source /etc/bash_completion
+
 # Some distribution makes use of a profile.d script to import completion.
-elif [[ -r /etc/profile.d/bash_completion.sh ]]; then
-	source /etc/profile.d/bash_completion.sh
-elif _bash_it_homebrew_check; then
-	: "${BASH_COMPLETION_COMPAT_DIR:=${BASH_IT_HOMEBREW_PREFIX}/etc/bash_completion.d}"
-	case "${BASH_VERSION}" in
-		1* | 2* | 3.0* | 3.1*)
-			_log_warning "Cannot load completion due to version of shell. Are you using Bash 3.2+?"
-			;;
-		3.2* | 4.0* | 4.1*)
-			# Import version 1.x of bash-completion, if installed.
-			BASH_COMPLETION="${BASH_IT_HOMEBREW_PREFIX}/opt/bash-completion@1/etc/bash_completion"
-			if [[ -r "$BASH_COMPLETION" ]]; then
-				source "$BASH_COMPLETION"
-			else
-				unset BASH_COMPLETION
-			fi
-			;;
-		4.2* | 5* | *)
-			# homebrew/versions/bash-completion2 (required for projects.completion.bash) is installed to this path
-			if [[ -r "${BASH_IT_HOMEBREW_PREFIX}/opt/bash-completion@2/etc/profile.d/bash_completion.sh" ]]; then
-				source "${BASH_IT_HOMEBREW_PREFIX}/opt/bash-completion@2/etc/profile.d/bash_completion.sh"
-			fi
-			;;
-	esac
+elif [[ -r /etc/profile.d/bash_completion.sh ]] ; then
+  # shellcheck disable=SC1091
+  source /etc/profile.d/bash_completion.sh
+
+elif _bash_it_homebrew_check
+then
+  : ${BASH_COMPLETION_COMPAT_DIR:=$BASH_IT_HOMEBREW_PREFIX/etc/bash_completion.d}
+
+  case "${BASH_VERSION}" in
+  1*|2*|3.0*|3.1*)
+    _log_warning "Cannot load completion due to version of shell. Are you using Bash 3.2+?"
+    ;;
+  3.2*|4.0*|4.1*)
+    # Import version 1.x of bash-completion, if installed.
+    BASH_COMPLETION="$BASH_IT_HOMEBREW_PREFIX/opt/bash-completion@1/etc/bash_completion"
+    if [[ -r "$BASH_COMPLETION" ]] ; then
+      # shellcheck disable=SC1090
+      source "$BASH_COMPLETION"
+    else
+      unset BASH_COMPLETION
+    fi
+    ;;
+  4.2*|5*|*)
+    # homebrew/versions/bash-completion2 (required for projects.completion.bash) is installed to this path
+    if [[ -r "$BASH_IT_HOMEBREW_PREFIX"/etc/profile.d/bash_completion.sh ]] ; then
+      # shellcheck disable=SC1090
+      source "$BASH_IT_HOMEBREW_PREFIX"/etc/profile.d/bash_completion.sh
+    fi
+    ;;
+  esac
 fi
 
-if [[ ${__bash_it_restore_nounset:-false} == "true" ]]; then
+if $__bash_it_restore_nounset
+then
 	shopt -so nounset
 fi
 unset __bash_it_restore_nounset
diff --git a/completion/available/template.completion.bash b/completion/available/template.completion.bash
new file mode 100644
index 00000000..70c7e860
--- /dev/null
+++ b/completion/available/template.completion.bash
@@ -0,0 +1,87 @@
+#!/usr/bin/env bash
+#                      __ __       ___
+#                     /\ \\ \    /'___`\
+#                     \ \ \\ \  /\_\ /\ \
+#                      \ \ \\ \_\/_/// /__
+#                       \ \__ ,__\ // /_\ \
+#                        \/_/\_\_//\______/
+#                           \/_/  \/_____/
+#                                         Algoritimos
+#
+#
+#      Author: Ivan Lopes
+#        Mail: ivan (at) 42algoritmos (dot) com (dot) br
+#        Site: htredis_get://www.42algoritmos.com.br
+#     License: gpl
+#       Phone: +1 561 801 7985
+#    Language: Shell Script
+#        File: redis.get.bash
+#        Date: Ter 28 Fev 2017 00:35:55 BRT
+# Description:
+#
+# ----------------------------------------------------------------------------
+#
+# ----------------------------------------------------------------------------
+
+##############################################################################
+##############################################################################
+##############################################################################
+
+# ----------------------------------------------------------------------------
+# Run!
+
+_template()
+{
+    COMPREPLY=()
+    local word="${COMP_WORDS[COMP_CWORD]}"
+
+    if [ "$COMP_CWORD" -eq 1 ]; then
+        COMPREPLY=( $(compgen -W "$(template commands)" -- "$word") )
+    else
+        local words=("${COMP_WORDS[@]}")
+
+        if [ "$COMP_CWORD" -eq 2 ]; then
+            case x${words[1]} in
+                xgof)
+                    unset words[0]
+                    unset words[$COMP_CWORD]
+                    local completions=$(template lsgof "${words[@]}")
+                    COMPREPLY=( $(compgen -W "$completions" -- "$word") )
+                    return 0
+                ;;
+            esac
+        fi
+
+        if [ "$COMP_CWORD" -eq 3 ]; then
+            case x${words[2]} in
+                xcomportamentais)
+                    unset words[0]
+                    unset words[$COMP_CWORD]
+                    local completions=$(template lscomportamentais "${words[@]}")
+                    COMPREPLY=( $(compgen -W "$completions" -- "$word") )
+                    return 0
+                ;;
+                xcriacionais)
+                    unset words[0]
+                    unset words[$COMP_CWORD]
+                    local completions=$(template lscriacionais "${words[@]}")
+                    COMPREPLY=( $(compgen -W "$completions" -- "$word") )
+                    return 0
+                ;;
+                xestruturais)
+                    unset words[0]
+                    unset words[$COMP_CWORD]
+                    local completions=$(template lsestruturais "${words[@]}")
+                    COMPREPLY=( $(compgen -W "$completions" -- "$word") )
+                    return 0
+                ;;
+            esac
+        fi
+
+
+        COMPREPLY=( $(compgen -W "$(template completions)" -- "$word") )
+    fi
+}
+
+complete -F _template template
+
diff --git a/completion/available/tldr.completion.bash b/completion/available/tldr.completion.bash
new file mode 100644
index 00000000..493996fa
--- /dev/null
+++ b/completion/available/tldr.completion.bash
@@ -0,0 +1,43 @@
+#!/usr/bin/env bash
+
+# I don't use bash, but I remember this works.
+# If anyone has an improved, and better version, go ahead, open a pull-request.
+#
+# Copyright (C) 2016 Arvid Gerstmann
+#
+
+_tldr_get_files() {
+	local ret
+	local files="$(find $HOME/.tldrc/tldr-master/pages/$1 -name '*.md' -exec basename {} .md \;)"
+
+	IFS=$'\n\t'
+	for f in $files; do
+	    echo $f
+	done
+}
+
+_tldr_complete() {
+    COMPREPLY=()
+	local word="${COMP_WORDS[COMP_CWORD]}"
+	local cmpl=""
+    if [ "$word" = "-" ]; then
+        cmpl=$(echo $'\n-v\n-h\n-u\n-c\n-p\n-r' | sort)
+    elif [ "$word" = "--" ]; then
+        cmpl=$(echo $'--version\n--help\n--update\n--clear-cache\n--platform\n--render' | sort)
+    else
+        if [ -d "$HOME/.tldrc/tldr-master/pages" ]; then
+            local platform="$(uname)"
+            cmpl="$(_tldr_get_files common | sort | uniq)"
+            if [ "$platform" = "Darwin" ]; then
+                cmpl="${cmpl}$(_tldr_get_files osx | sort | uniq)"
+            elif [ "$platform" = "Linux" ]; then
+                cmpl="${cmpl}$(_tldr_get_files linux | sort | uniq)"
+            elif [ "$platform" = "SunOS" ]; then
+                cmpl="${cmpl}$(_tldr_get_files sunos | sort | uniq)"
+            fi
+        fi
+    fi
+    COMPREPLY=( $(compgen -W "$cmpl" -- "$word") )
+}
+
+complete -F _tldr_complete tldr
diff --git a/completion/available/tmuxinator.completion.bash b/completion/available/tmuxinator.completion.bash
new file mode 100644
index 00000000..cda27174
--- /dev/null
+++ b/completion/available/tmuxinator.completion.bash
@@ -0,0 +1,25 @@
+#!/usr/bin/env bash
+
+_tmuxinator() {
+    COMPREPLY=()
+    local word
+    word="${COMP_WORDS[COMP_CWORD]}"
+
+    if [ "$COMP_CWORD" -eq 1 ]; then
+        #local commands="$(compgen -W "$(tmuxinator commands)" -- "$word")"
+        local projects="$(compgen -W "$(tmuxinator completions start)" -- "$word")"
+
+        COMPREPLY=( $commands $projects )
+    elif [ "$COMP_CWORD" -eq 2 ]; then
+        local words
+        words=("${COMP_WORDS[@]}")
+        unset words[0]
+        unset words[$COMP_CWORD]
+        local completions
+        completions=$(tmuxinator completions "${words[@]}")
+        COMPREPLY=( $(compgen -W "$completions" -- "$word") )
+    fi
+}
+
+complete -F _tmuxinator tmuxinator mux
+alias mux="tmuxinator"
diff --git a/completion/available/tp.completion.bash b/completion/available/tp.completion.bash
new file mode 100644
index 00000000..d756c223
--- /dev/null
+++ b/completion/available/tp.completion.bash
@@ -0,0 +1,43 @@
+#!/usr/bin/env bash
+#
+# This is an example file. Don't use this for your custom scripts. Instead, create another file within the
+# custom directory.
+
+export SHELLSCRIPT_TEMPLATE_PKG=/home/ivan/developer/shell-script-tool-kit/template
+export SHELLSCRIPT_CTEMPLATE=/home/ivan/developer/shell-script-tool-kit/ctemplate
+export SHELLSCRIPT_PKG=/home/ivan/developer/shell-script-tool-kit/bin-shellscript-pakages
+export PATH=/home/ivan/developer/shell-script-tool-kit/bin-shellscript-pakages:$PATH
+export SHELLSCRIPT_PAKAGES=/home/ivan/developer/shell-script-tool-kit/archive-shellscript-pakages
+
+mvToTemplate ()
+{
+  cp $* $SHELLSCRIPT_TEMPLATE_PKG
+}
+goTemplate ()
+{
+  cd  $SHELLSCRIPT_TEMPLATE_PKG
+}
+mvToArchive ()
+{
+  cp $* $SHELLSCRIPT_PKG/../archive-shellscript-pakages
+}
+goArchive ()
+{
+  cd $SHELLSCRIPT_PKG/../archive-shellscript-pakages
+}
+
+_tp()
+{
+  local cur prev opts
+  COMPREPLY=()
+  cur="${COMP_WORDS[COMP_CWORD]}"
+  prev="${COMP_WORDS[COMP_CWORD-1]}"
+  # n=$(( $(tp list --| wc -l) -1 ))
+  opts=`tp list --| awk '{print }'| sed -e '' | sed -e :a -e 'N; # s/\n/ /; ta'`
+
+  if [[ ${cur} == --* ]] ; then
+    COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
+    return 0
+  fi
+}
+complete -F _tp tp
diff --git a/completion/available/ttjava.completion.bash b/completion/available/ttjava.completion.bash
new file mode 100644
index 00000000..8e57dbd1
--- /dev/null
+++ b/completion/available/ttjava.completion.bash
@@ -0,0 +1,7 @@
+#!/usr/bin/env bash
+
+# ----------------------------------------------------------------------------
+# Run!
+
+TTJAVA=$(command -v ttjava)
+[[ $TTJAVA ]] && eval "$( ttjava init )"
diff --git a/completion/available/vim.completion.bash b/completion/available/vim.completion.bash
new file mode 100644
index 00000000..a42a163a
--- /dev/null
+++ b/completion/available/vim.completion.bash
@@ -0,0 +1,57 @@
+#!/usr/bin/env bash
+
+export DEVELOPER_VIM_DIR=${HOME}/developer/vim/vim
+export NVIM_LISTEN_ADDRESS=/tmp/nvim.sock
+
+# Function for always using one (and only one) vim server, even when not
+# using gvim.
+# If you really want a new vim session, simply do not pass any
+# argument to this function.
+function er {
+  vim_orig=$(which 2>/dev/null vim)
+  if [ -z $vim_orig ]; then
+    echo "$SHELL: vim: command not found"
+    return 127;
+  fi
+  $vim_orig --serverlist | grep -q VIM
+  # If there is already a vimserver, use it
+  # unless no args were given
+  if [ $? -eq 0 ]; then
+    if [ $# -eq 0 ]; then
+      $vim_orig
+    else
+      $vim_orig --remote "$@"
+    fi
+  else
+    $vim_orig --servername vim "$@"
+  fi
+}
+
+_nvim_complete()
+{
+    local cur_word prev_word type_list
+
+    # COMP_WORDS is an array of words in the current command line.
+    # COMP_CWORD is the index of the current word (the one the cursor is
+    # in). So COMP_WORDS[COMP_CWORD] is the current word; we also record
+    # the previous word here, although this specific script doesn't
+    # use it yet.
+    cur_word="${COMP_WORDS[COMP_CWORD]}"
+    prev_word="${COMP_WORDS[COMP_CWORD-1]}"
+
+    # Ask nvim to generate a list of types it supports
+    type_list="`sed -n 's/.*-register\s\(.*\)\scall.*/\1/p' ~/.vim/settings/workspace.local| sed -e :a -e 'N;s/\n/ /; ta'`"
+    # Only perform completion if the current word starts with a dash ('-'),
+    # meaning that the user is trying to complete an option.
+    if [[ ${cur_word} == * ]] ; then
+        # COMPREPLY is the array of possible completions, generated with
+        # the compgen builtin.
+        COMPREPLY=( $(compgen -W "${type_list}" -- ${cur_word}) )
+    else
+        COMPREPLY=()
+    fi
+    return 0
+}
+
+# Register _nvim_complete to provide completion for the following commands
+complete -F _nvim_complete nvim vim
diff --git a/completion/available/wd.completion.bash b/completion/available/wd.completion.bash
new file mode 100644
index 00000000..1273f03d
--- /dev/null
+++ b/completion/available/wd.completion.bash
@@ -0,0 +1,163 @@
+# shellcheck shell=bash
+cite "about-completion"
+about-completion "wd completion"
+
+_wdd() {
+  local wdd="$HOME/.wdd"
+  [[ -d "$wdd" ]] || mkdir "$wdd"
+
+  echo "$wdd"
+}
+
+_warp_points() {
+  ls "$(_wdd)/"| sed 's|@||'
+}
+
+_point_from_path() {
+  echo "$1" | cut -d/ -f1
+}
+
+_path_without_point() {
+  if [[ "$1" =~ "/" ]]; then
+    echo "$1" | cut -d/ -f2-
+  fi
+}
+
+_leading_folders_from_path() {
+  if [[ "$1" =~ "/" ]]; then
+    echo "$1" | rev | cut -d/ -f2- | rev | sed 's|$|/|'
+  fi
+}
+
+_path_without_leading_folders() {
+  echo "$1" | rev | cut -d/ -f1 | rev
+}
+
+_point_destination() {
+  local wdd="$(_wdd)"
+  local point="$1"
+
+  echo "$(readlink $wdd/$point)"
+}
+
+_wd_autocomplete() {
+  local current="${COMP_WORDS[COMP_CWORD]}"
+
+  if [[ "$current" =~ "/" ]]; then
+    local point="$(_point_from_path "$current")"
+    local subpath="$(_path_without_point "$current")"
+    local destination="$(_point_destination "$point")"
+    local subfolders="$(_leading_folders_from_path "$subpath")"
+    local completions="$(ls -F "$destination/$subfolders" | sed 's|@$||')"
+    current="$(_path_without_leading_folders "$subpath")"
+
+    COMPREPLY=($(compgen -W "$completions" -P "$point/$subfolders" -- $current))
+  else
+    COMPREPLY=($(compgen -W "$(_warp_points)" -- $current))
+  fi
+}
+
+wd() {
+  local wdd="$(_wdd)"
+
+  local point_name="$2"
+  local point_path="$wdd/$point_name"
+  local point_destination="$(readlink $point_path)"
+  local tmux_on=0
+  local make_on=0
+
+  [[ -z "$point_destination" ]] && point_destination="no point destination"
+
+  case "x$1" in
+    xt)
+      shift
+      tmux_on=1
+    ;;
+    # xmk)
+    #   shift
+    #   echo $( redis-bash-cli get $1 )
+    #   return $?
+    # ;;
+    xadd)
+      if ln -s "$PWD" "$point_path" &> /dev/null; then
+        echo "Added warp point '$point_name' ($PWD)"
+        return 0
+      else
+        echo "Error adding warp point '$point_name' ($PWD)"
+        return 1
+      fi
+    ;;
+    xrm)
+      if rm -f "$point_path" &> /dev/null; then
+        echo "Removed warp point '$point_name' ($point_destination)"
+        return 0
+      else
+        echo "Error removing warp point '$point_name' ($point_destination)"
+        return 1
+      fi
+    ;;
+    xls)
+      local point_list=$(ls -l "$wdd/" | grep -v '^total' | grep -Eo '\b\w+\b ->.*' | awk -F' -> ' '{printf "\033[95m%14s\033[0m \033[92m%s\033[0m\n", $1, $2}')
+      echo "$point_list" | grep "$2"
+      return 0
+    ;;
+    xfzf)
+      local point_list=$(ls -l "$wdd/" | grep -v '^total' | grep -Eo '\b\w+\b ->.*' | awk -F' -> ' '{printf "%14s %s\n", $1, $2}')
+      ff=$(echo "$point_list" | grep "$2" | fzf-tmux -l 100% --multi --reverse --color fg:252,bg:233,hl:67,fg+:252,bg+:235,hl+:81 --color info:144,prompt:161,spinner:135,pointer:135,marker:118)
+      echo $ff| awk -F' ' '{printf "\033[95m%14s\033[0m \033[92m%s\033[0m\n", $1, $2}'
+      echo =$ff=| sed  's/= \(\w\+\) .*/wd \1/'| xcopy
+      return 0
+    ;;
+    xw)
+      cd ~/work
+      return $?
+    ;;
+    x-h | x--help)
+      echo "Usage: wd [command] <point_name>"
+      echo "Commands:"
+      echo "  add <point_name>    Adds the current working directory to your warp points"
+      echo "  rm <point_name>     Removes the named point from your warp points"
+      echo "  t <point_name>      Open points with tmux"
+      echo "  ls                  Prints all warp points"
+      echo "  ls <point_name>     Prints all warp points matching the specified name"
+      echo "  -                   warps to previous working directory"
+      echo "  -h, --help          Prints this lovely message"
+      return 0
+    ;;
+    x)
+      cd /workspace
+      return $?
+    ;;
+    x-)
+      cd -
+      return $?
+    ;;
+    x-*)
+      echo "Unknown option: '$1'"
+      return 1
+    ;;
+  esac
+
+  # if we get here, we're warping
+  local requested_point="$(_point_from_path "$1")"
+  local subpath="$(_path_without_point "$1")"
+
+  point_path="$wdd/$requested_point"
+
+  if [[ ! -L "$point_path" ]]; then
+    echo "Can't warp to point '$requested_point' because it doesn't exist."
+    return 1
+  fi
+
+  local requested_destination="$(readlink $point_path)/$subpath"
+
+  if [ $tmux_on -eq 1 ]; then
+    tmux new-window -c "$requested_destination"
+    return $?
+  fi
+
+  cd "$requested_destination"
+  return $?
+}
+
+complete -o nospace -F _wd_autocomplete wd
diff --git a/completion/available/xp.completion.bash b/completion/available/xp.completion.bash
new file mode 100644
index 00000000..49d25e7b
--- /dev/null
+++ b/completion/available/xp.completion.bash
@@ -0,0 +1,34 @@
+#!/usr/bin/env bash
+#                      __ __       ___
+#                     /\ \\ \    /'___`\
+#                     \ \ \\ \  /\_\ /\ \
+#                      \ \ \\ \_\/_/// /__
+#                       \ \__ ,__\ // /_\ \
+#                        \/_/\_\_//\______/
+#                           \/_/  \/_____/
+#                                         Algoritimos
+#
+#
+#      Author: Ivan Lopes
+#        Mail: ivan (at) 42algoritmos (dot) com (dot) br
+#        Site: htredis_get://www.42algoritmos.com.br
+#     License: gpl
+#       Phone: +1 561 801 7985
+#    Language: Shell Script
+#        File: redis.get.bash
+#        Date: Ter 28 Fev 2017 00:35:55 BRT
+# Description:
+#
+# ----------------------------------------------------------------------------
+#
+# ----------------------------------------------------------------------------
+
+##############################################################################
+##############################################################################
+##############################################################################
+
+# ----------------------------------------------------------------------------
+# Run!
+
+XP=$(command -v xp)
+[[ $XP ]] && eval "$( xp init )"
diff --git a/docs/README.md b/docs/README.md
index b307a7ab..f3d31a14 100644
--- a/docs/README.md
+++ b/docs/README.md
@@ -4,6 +4,7 @@
 ![Docs Status](https://readthedocs.org/projects/bash-it/badge/)
 ![License](https://img.shields.io/github/license/Bash-it/bash-it)
 ![shell](https://img.shields.io/badge/Shell-Bash-blue)
+[![Join the chat at https://web.libera.chat/?channel=#bash-it](https://img.shields.io/badge/chat-on%20Libera.Chat-brightgreen.svg)](https://web.libera.chat/?channel=#bash-it)
 
 **Bash-it** is a collection of community Bash commands and scripts for Bash 3.2+.
 (And a shameless ripoff of [oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh) :smiley:)
diff --git a/docs/troubleshooting.rst b/docs/troubleshooting.rst
index 93d9113a..6503699a 100644
--- a/docs/troubleshooting.rst
+++ b/docs/troubleshooting.rst
@@ -8,38 +8,9 @@ Table of Contents
 
 * `I'm stuck in the LightDM login screen after setting up bash-it. <im-stuck-in-the-lightdm-login-screen-after-setting-up-bash-it>`_
 
-* `I'm getting strange line break and wrapping behaviour on macOS. <im-getting-strange-line-break-and-wrapping-behaviour-on-macos>`_
-
 I'm stuck in the LightDM login screen after setting up bash-it
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 **Possible issue**\ : `#672 <https://github.com/Bash-it/bash-it/issues/672>`_
 
 **Solution**\ : Check `this comment <https://github.com/Bash-it/bash-it/issues/672#issuecomment-257870653>`_ for detailed information about the cause and solution for this issue.
-
-I'm getting strange line break and wrapping behaviour on macOS
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-**Possible issue**\ : `#1614 <https://github.com/Bash-it/bash-it/issues/1614>`_
-
-**Solution**\ : Bash-it requires Bash 4.?? or later to run correctly. Any reasonably current Linux distribution should have shipped with a compatible version of Bash. However, macOS users must upgrade from the included, obsolete Bash version 3. While some functionality might work with Bash 3, there is no guarantee that everything will work perfectly. Thus, we recommend using `Homebrew <https://brew.sh/>`_ to ensure Bash is up to date:
-
-x86 Mac
-^^^^^^^
-
-  .. code-block:: bash
-
-     brew install bash
-     sudo sh -c 'echo /usr/local/bin/bash >> /etc/shells'
-     chsh -s /usr/local/bin/bash
-
-M1 Mac
-^^^^^^
-
-Homebrew's default installation location on M1 is ``/opt/homebrew/bin/``:
-
-  .. code-block:: bash
-
-     brew install bash
-     sudo sh -c 'echo /opt/homebrew/bin/bash >> /etc/shells'
-     chsh -s /opt/homebrew/bin/bash
diff --git a/install.sh b/install.sh
index 58c25537..2bb78a3f 100755
--- a/install.sh
+++ b/install.sh
@@ -12,6 +12,7 @@ function _bash-it_show_usage() {
 	echo "--no-modify-config (-n): Do not modify existing config file"
 	echo "--append-to-config (-a): Keep existing config file and append bash-it templates at the end"
 	echo "--overwrite-backup (-f): Overwrite existing backup"
+	exit 0
 }
 
 # enable a thing
diff --git a/lib/command_duration.bash b/lib/command_duration.bash
index 2b5e1b4b..cd1d6636 100644
--- a/lib/command_duration.bash
+++ b/lib/command_duration.bash
@@ -2,24 +2,12 @@
 #
 # Functions for measuring and reporting how long a command takes to run.
 
-# Get shell duration in decimal format regardless of runtime locale.
-# Notice: This function runs as a sub-shell - notice '(' vs '{'.
-function _shell_duration_en() (
-	# DFARREL You would think LC_NUMERIC would do it, but not working in my local
-	LC_ALL='en_US.UTF-8'
-	printf "%s" "${EPOCHREALTIME:-$SECONDS}"
-)
-
-: "${COMMAND_DURATION_START_SECONDS:=$(_shell_duration_en)}"
+: "${COMMAND_DURATION_START_SECONDS:=${EPOCHREALTIME:-$SECONDS}}"
 : "${COMMAND_DURATION_ICON:=🕘}"
 : "${COMMAND_DURATION_MIN_SECONDS:=1}"
 
 function _command_duration_pre_exec() {
-	COMMAND_DURATION_START_SECONDS="$(_shell_duration_en)"
-}
-
-function _command_duration_pre_cmd() {
-	COMMAND_DURATION_START_SECONDS=""
+	COMMAND_DURATION_START_SECONDS="${EPOCHREALTIME:-$SECONDS}"
 }
 
 function _dynamic_clock_icon {
@@ -32,15 +20,13 @@ function _dynamic_clock_icon {
 
 function _command_duration() {
 	[[ -n "${BASH_IT_COMMAND_DURATION:-}" ]] || return
-	[[ -n "${COMMAND_DURATION_START_SECONDS:-}" ]] || return
 
 	local command_duration=0 command_start="${COMMAND_DURATION_START_SECONDS:-0}"
 	local -i minutes=0 seconds=0 deciseconds=0
 	local -i command_start_seconds="${command_start%.*}"
 	local -i command_start_deciseconds=$((10#${command_start##*.}))
 	command_start_deciseconds="${command_start_deciseconds:0:1}"
-	local current_time
-	current_time="$(_shell_duration_en)"
+	local current_time="${EPOCHREALTIME:-$SECONDS}"
 	local -i current_time_seconds="${current_time%.*}"
 	local -i current_time_deciseconds="$((10#${current_time##*.}))"
 	current_time_deciseconds="${current_time_deciseconds:0:1}"
@@ -59,18 +45,17 @@ function _command_duration() {
 		command_duration=0
 	fi
 
-	if ((command_duration >= COMMAND_DURATION_MIN_SECONDS)); then
+	if ((command_duration > 0)); then
 		minutes=$((command_duration / 60))
 		seconds=$((command_duration % 60))
+	fi
 
-		_dynamic_clock_icon "${command_duration}"
-		if ((minutes > 0)); then
-			printf "%s %s%dm %ds" "${COMMAND_DURATION_ICON:-}" "${COMMAND_DURATION_COLOR:-}" "$minutes" "$seconds"
-		else
-			printf "%s %s%d.%01ds" "${COMMAND_DURATION_ICON:-}" "${COMMAND_DURATION_COLOR:-}" "$seconds" "$deciseconds"
-		fi
+	_dynamic_clock_icon "${command_duration}"
+	if ((minutes > 0)); then
+		printf "%s %s%dm %ds" "${COMMAND_DURATION_ICON:-}" "${COMMAND_DURATION_COLOR:-}" "$minutes" "$seconds"
+	elif ((seconds >= COMMAND_DURATION_MIN_SECONDS)); then
+		printf "%s %s%d.%01ds" "${COMMAND_DURATION_ICON:-}" "${COMMAND_DURATION_COLOR:-}" "$seconds" "$deciseconds"
 	fi
 }
 
 _bash_it_library_finalize_hook+=("safe_append_preexec '_command_duration_pre_exec'")
-_bash_it_library_finalize_hook+=("safe_append_prompt_command '_command_duration_pre_cmd'")
diff --git a/lib/composure.bash b/lib/composure.bash
new file mode 100644
index 00000000..70d9027c
--- /dev/null
+++ b/lib/composure.bash
@@ -0,0 +1,380 @@
+# composure - by erichs
+# light-hearted functions for intuitive shell programming
+
+# install: source this script in your ~/.profile or ~/.${SHELL}rc script
+
+# latest source available at http://git.io/composure
+# known to work on bash, zsh, and ksh93
+
+# 'plumbing' functions
+
+composure_keywords ()
+{
+    echo "about author example group param version"
+}
+
+letterpress ()
+{
+    typeset rightcol="$1" leftcol="${2:- }"
+
+    if [ -z "$rightcol" ]; then
+        return
+    fi
+
+    printf "%-20s%s\n" "$leftcol" "$rightcol"
+}
+
+transcribe ()
+{
+    typeset func=$1
+    typeset file=$2
+    typeset operation="$3"
+
+    if git --version >/dev/null 2>&1; then
+        if [ -d ~/.composure ]; then
+            (
+                cd ~/.composure
+                if git rev-parse 2>/dev/null; then
+                    if [ ! -f $file ]; then
+                        printf "%s\n" "Oops! Couldn't find $file to version it for you..."
+                        return
+                    fi
+                    cp $file ~/.composure/$func.inc
+                    git add --all .
+                    git commit -m "$operation $func"
+                fi
+            )
+        else
+            if [ "$USE_COMPOSURE_REPO" = "0" ]; then
+                return  # if you say so...
+            fi
+            printf "%s\n" "I see you don't have a ~/.composure repo..."
+            typeset input
+            typeset valid=0
+            while [ $valid != 1 ]; do
+                printf "\n%s" 'would you like to create one? y/n: '
+                read input
+                case $input in
+                    y|yes|Y|Yes|YES)
+                        (
+                            echo 'creating git repository for your functions...'
+                            mkdir ~/.composure
+                            cd ~/.composure
+                            git init
+                            echo "composure stores your function definitions here" > README.txt
+                            git add README.txt
+                            git commit -m 'initial commit'
+                        )
+                        # if at first you don't succeed...
+                        transcribe "$func" "$file" "$operation"
+                        valid=1
+                        ;;
+                    n|no|N|No|NO)
+                        printf "%s\n" "ok. add 'export USE_COMPOSURE_REPO=0' to your startup script to disable this message."
+                        valid=1
+                    ;;
+                    *)
+                        printf "%s\n" "sorry, didn't get that..."
+                    ;;
+                esac
+            done
+       fi
+    fi
+}
+
+typeset_functions ()
+{
+    # unfortunately, there does not seem to be a easy, portable way to list just the
+    # names of the defined shell functions...
+
+    # first, determine our shell:
+    typeset shell
+    if [ -n "$SHELL" ]; then
+        shell=$(basename $SHELL)  # we assume this is set correctly!
+    else
+        # we'll have to try harder
+        # here's a hack I modified from a StackOverflow post:
+        # we loop over the ps listing for the current process ($$), and print the last column (CMD)
+        # stripping any leading hyphens bash sometimes throws in there
+        typeset x ans
+        typeset this=$(for x in $(ps -p $$); do ans=$x; done; printf "%s\n" $ans | sed 's/^-*//')
+        typeset shell=$(basename $this)  # e.g. /bin/bash => bash
+    fi
+    case "$shell" in
+        bash)
+            typeset -F | awk '{print $3}'
+            ;;
+        *)
+            # trim everything following '()' in ksh
+            typeset +f | sed 's/().*$//'
+            ;;
+    esac
+}
+
+
+# bootstrap metadata keywords for porcelain functions
+for f in $(composure_keywords)
+do
+    eval "$f() { :; }"
+done
+unset f
+
+
+# 'porcelain' functions
+
+cite ()
+{
+    about creates one or more meta keywords for use in your functions
+    param one or more keywords
+    example '$ cite url username'
+    example '$ url http://somewhere.com'
+    example '$ username alice'
+    group composure
+
+    # this is the storage half of the 'metadata' system:
+    # we create dynamic metadata keywords with function wrappers around
+    # the NOP command, ':'
+
+    # anything following a keyword will get parsed as a positional
+    # parameter, but stay resident in the ENV. As opposed to shell
+    # comments, '#', which do not get parsed and are not available
+    # at runtime.
+
+    # a BIG caveat--your metadata must be roughly parsable: do not use
+    # contractions, and consider single or double quoting if it contains
+    # non-alphanumeric characters
+
+    if [ -z "$1" ]; then
+        printf '%s\n' 'missing parameter(s)'
+        reference cite
+        return
+    fi
+
+    typeset keyword
+    for keyword in $*; do
+        eval "$keyword() { :; }"
+    done
+}
+
+draft ()
+{
+    about wraps command from history into a new function, default is last command
+    param 1: name to give function
+    param 2: optional history line number
+    example '$ ls'
+    example '$ draft list'
+    example '$ draft newfunc 1120  # wraps command at history line 1120 in newfunc()'
+    group composure
+
+    typeset func=$1
+    typeset num=$2
+    typeset cmd
+
+    if [ -z "$func" ]; then
+        printf '%s\n' 'missing parameter(s)'
+        reference draft
+        return
+    fi
+
+    # aliases bind tighter than function names, disallow them
+    if [ -n "$(LANG=C type -t $func 2>/dev/null | grep 'alias')" ]; then
+        printf '%s\n' "sorry, $(type -a $func). please choose another name."
+        return
+    fi
+
+    if [ -z "$num" ]; then
+        # parse last command from fc output
+        # some versions of 'fix command, fc' need corrective lenses...
+        typeset myopic=$(fc -ln -1 | grep draft)
+        typeset lines=1
+        if [ -n "$myopic" ]; then
+            lines=2
+        fi
+        cmd=$(fc -ln -$lines | head -1 | sed 's/^[[:blank:]]*//')
+    else
+        # parse command from history line number
+        cmd=$(eval "history | grep '^[[:blank:]]*$num' | head -1" | sed 's/^[[:blank:][:digit:]]*//')
+    fi
+    eval "$func() { $cmd; }"
+    typeset file=$(mktemp /tmp/draft.XXXX)
+    typeset -f $func > $file
+    transcribe $func $file draft
+    rm $file 2>/dev/null
+}
+
+glossary ()
+{
+    about displays help summary for all functions, or summary for a group of functions
+    param 1: optional, group name
+    example '$ glossary'
+    example '$ glossary misc'
+    group composure
+
+    typeset targetgroup=${1:-}
+
+    for func in $(typeset_functions); do
+        if [ -n "$targetgroup" ]; then
+            typeset group="$(typeset -f $func | metafor group)"
+            if [ "$group" != "$targetgroup" ]; then
+                continue  # skip non-matching groups, if specified
+            fi
+        fi
+        typeset about="$(typeset -f $func | metafor about)"
+        letterpress "$about" $func
+    done
+}
+
+metafor ()
+{
+    about prints function metadata associated with keyword
+    param 1: meta keyword
+    example '$ typeset -f glossary | metafor example'
+    group composure
+
+    typeset keyword=$1
+
+    if [ -z "$keyword" ]; then
+        printf '%s\n' 'missing parameter(s)'
+        reference metafor
+        return
+    fi
+
+    # this sed-fu is the retrieval half of the 'metadata' system:
+    # 'grep' for the metadata keyword, and then parse/filter the matching line
+
+    # grep keyword # strip trailing '|"|; # ignore thru keyword and leading '|"
+    sed -n "/$keyword / s/['\";]*$//;s/^[ 	]*$keyword ['\"]*\([^([].*\)*$/\1/p"
+}
+
+reference ()
+{
+    about displays apidoc help for a specific function
+    param 1: function name
+    example '$ reference revise'
+    group composure
+
+    typeset func=$1
+    if [ -z "$func" ]; then
+        printf '%s\n' 'missing parameter(s)'
+        reference reference
+        return
+    fi
+
+    typeset line
+
+    typeset about="$(typeset -f $func | metafor about)"
+    letterpress "$about" $func
+
+    typeset author="$(typeset -f $func | metafor author)"
+    if [ -n "$author" ]; then
+        letterpress "$author" 'author:'
+    fi
+
+    typeset version="$(typeset -f $func | metafor version)"
+    if [ -n "$version" ]; then
+        letterpress "$version" 'version:'
+    fi
+
+    if [ -n "$(typeset -f $func | metafor param)" ]; then
+        printf "parameters:\n"
+        typeset -f $func | metafor param | while read line
+        do
+            letterpress "$line"
+        done
+    fi
+
+    if [ -n "$(typeset -f $func | metafor example)" ]; then
+        printf "examples:\n"
+        typeset -f $func | metafor example | while read line
+        do
+            letterpress "$line"
+        done
+    fi
+}
+
+revise ()
+{
+    about loads function into editor for revision
+    param 1: name of function
+    example '$ revise myfunction'
+    group composure
+
+    typeset func=$1
+    typeset temp=$(mktemp /tmp/revise.XXXX)
+
+    if [ -z "$func" ]; then
+        printf '%s\n' 'missing parameter(s)'
+        reference revise
+        return
+    fi
+
+    # populate tempfile...
+    if [ -f ~/.composure/$func.inc ]; then
+        # ...with contents of latest git revision...
+        cat ~/.composure/$func.inc >> $temp
+    else
+        # ...or from ENV if not previously versioned
+        typeset -f $func >> $temp
+    fi
+
+    if [ -z "$EDITOR" ]
+    then
+      typeset EDITOR=vi
+    fi
+
+    $EDITOR $temp
+    . $temp  # source edited file
+
+    transcribe $func $temp revise
+    rm $temp
+}
+
+write ()
+{
+    about writes one or more composed function definitions to stdout
+    param one or more function names
+    example '$ write finddown foo'
+    example '$ write finddown'
+    group composure
+
+    if [ -z "$1" ]; then
+        printf '%s\n' 'missing parameter(s)'
+        reference write
+        return
+    fi
+
+# bootstrap metadata
+cat <<END
+for f in $(composure_keywords)
+do
+    eval "\$f() { :; }"
+done
+unset f
+END
+
+    # include cite() to enable custom keywords
+    typeset -f cite $*
+}
+
+: <<EOF
+License: The MIT License
+
+Copyright © 2012 Erich Smith
+
+Permission is hereby granted, free of charge, to any person obtaining a copy of this
+software and associated documentation files (the "Software"), to deal in the Software
+without restriction, including without limitation the rights to use, copy, modify,
+merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
+permit persons to whom the Software is furnished to do so, subject to the following
+conditions:
+
+The above copyright notice and this permission notice shall be included in all copies
+or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
+INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
+PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
+HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
+CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
+OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+EOF
diff --git a/lib/helpers.bash b/lib/helpers.bash
index 3675b0f2..2ee43a17 100644
--- a/lib/helpers.bash
+++ b/lib/helpers.bash
@@ -211,7 +211,7 @@ function _is_function() {
 	_example '$ _is_function ls && echo exists'
 	_group 'lib'
 	local msg="${2:-Function '$1' does not exist}"
-	if LC_ALL=C type -t "$1" | _bash-it-fgrep -q 'function'; then
+	if LC_ALL=C type -t "$1" | _bash-it-egrep -q 'function'; then
 		return 0
 	else
 		_log_debug "$msg"
diff --git a/lib/utilities.bash b/lib/utilities.bash
index 75e914b8..6d5fd5d4 100644
--- a/lib/utilities.bash
+++ b/lib/utilities.bash
@@ -60,21 +60,15 @@ function _bash-it-array-dedup() {
 	printf '%s\n' "$@" | sort -u
 }
 
-# Runs `grep` with *just* the provided arguments
+# Outputs a full path of the grep found on the filesystem
 function _bash-it-grep() {
-	: "${BASH_IT_GREP:=$(type -P grep)}"
-	"${BASH_IT_GREP:-/usr/bin/grep}" "$@"
+	: "${BASH_IT_GREP:=$(type -P egrep || type -P grep)}"
+	printf "%s" "${BASH_IT_GREP:-/usr/bin/grep}"
 }
 
-# Runs `grep` with fixed-string expressions (-F)
-function _bash-it-fgrep() {
-	: "${BASH_IT_GREP:=$(type -P grep)}"
-	"${BASH_IT_GREP:-/usr/bin/grep}" -F "$@"
-}
-
-# Runs `grep` with extended regular expressions (-E)
+# Runs `grep` with extended regular expressions
 function _bash-it-egrep() {
-	: "${BASH_IT_GREP:=$(type -P grep)}"
+	: "${BASH_IT_GREP:=$(type -P egrep || type -P grep)}"
 	"${BASH_IT_GREP:-/usr/bin/grep}" -E "$@"
 }
 
@@ -156,12 +150,12 @@ function _bash-it-component-list-matching() {
 
 function _bash-it-component-list-enabled() {
 	local IFS=$'\n' component="$1"
-	_bash-it-component-help "${component}" | _bash-it-fgrep '[x]' | awk '{print $1}' | sort -u
+	_bash-it-component-help "${component}" | _bash-it-egrep '\[x\]' | awk '{print $1}' | sort -u
 }
 
 function _bash-it-component-list-disabled() {
 	local IFS=$'\n' component="$1"
-	_bash-it-component-help "${component}" | _bash-it-fgrep -v '[x]' | awk '{print $1}' | sort -u
+	_bash-it-component-help "${component}" | _bash-it-egrep -v '\[x\]' | awk '{print $1}' | sort -u
 }
 
 # Checks if a given item is enabled for a particular component/file-type.
diff --git a/lint_clean_files.sh b/lint_clean_files.sh
index cc268604..26650b16 100755
--- a/lint_clean_files.sh
+++ b/lint_clean_files.sh
@@ -8,8 +8,8 @@
 # shellcheck disable=SC2002  # Prefer 'cat' for cleaner script
 mapfile -t FILES < <(
 	cat clean_files.txt \
-		| grep -E -v '^\s*$' \
-		| grep -E -v '^\s*#' \
+		| grep -v -E '^\s*$' \
+		| grep -v -E '^\s*#' \
 		| xargs -n1 -I{} find "{}" -type f
 )
 
diff --git a/plugins/available/.lua-version b/plugins/available/.lua-version
new file mode 100644
index 00000000..74664af7
--- /dev/null
+++ b/plugins/available/.lua-version
@@ -0,0 +1 @@
+5.3.3
diff --git a/plugins/available/alias-completion.plugin.bash b/plugins/available/alias-completion.plugin.bash
index d23779f7..eb368d93 100644
--- a/plugins/available/alias-completion.plugin.bash
+++ b/plugins/available/alias-completion.plugin.bash
@@ -1,5 +1,105 @@
 # shellcheck shell=bash
-# stub for renamed file
+# Load after the other completions to understand what needs to be completed
+# BASH_IT_LOAD_PRIORITY: 365
 
-_enable-completion aliases && _disable-plugin alias-completion
-source "${BASH_IT?}/completion/available/aliases.completion.bash"
+cite about-plugin
+about-plugin 'Automatic completion of aliases'
+
+# References:
+# http://superuser.com/a/437508/119764
+# http://stackoverflow.com/a/1793178/1228454
+
+# This needs to be a plugin so it gets executed after the completions and the aliases have been defined.
+# Bash-it loads its components in the order
+# 1) Aliases
+# 2) Completions
+# 3) Plugins
+# 4) Custom scripts
+
+# Automatically add completion for all aliases to commands having completion functions
+function alias_completion {
+	local namespace="alias_completion"
+	local tmp_file completion_loader alias_name alias_tokens line completions
+	local alias_arg_words new_completion compl_func compl_wrapper
+
+	# parse function based completion definitions, where capture group 2 => function and 3 => trigger
+	local compl_regex='complete( +[^ ]+)* -F ([^ ]+) ("[^"]+"|[^ ]+)'
+	# parse alias definitions, where capture group 1 => trigger, 2 => command, 3 => command arguments
+	local alias_regex="alias( -- | )([^=]+)='(\"[^\"]+\"|[^ ]+)(( +[^ ]+)*)'"
+
+	# create array of function completion triggers, keeping multi-word triggers together
+	eval "completions=($(complete -p | sed -Ene "/$compl_regex/s//'\3'/p"))"
+	((${#completions[@]} == 0)) && return 0
+
+	# create temporary file for wrapper functions and completions
+	tmp_file="$(mktemp -t "${namespace}-${RANDOM}XXXXXX")" || return 1
+
+	completion_loader="$(complete -p -D 2> /dev/null | sed -Ene 's/.* -F ([^ ]*).*/\1/p')"
+
+	# read in "<alias> '<aliased command>' '<command args>'" lines from defined aliases
+	# some aliases do have backslashes that needs to be interpreted
+	# shellcheck disable=SC2162
+	while read line; do
+		eval "alias_tokens=($line)" 2> /dev/null || continue # some alias arg patterns cause an eval parse error
+		# shellcheck disable=SC2154 # see `eval` above
+		alias_name="${alias_tokens[0]}" alias_cmd="${alias_tokens[1]}" alias_args="${alias_tokens[2]# }"
+
+		# skip aliases to pipes, boolean control structures and other command lists
+		# (leveraging that eval errs out if $alias_args contains unquoted shell metacharacters)
+		eval "alias_arg_words=($alias_args)" 2> /dev/null || continue
+		# avoid expanding wildcards
+		read -a alias_arg_words <<< "$alias_args"
+
+		# skip alias if there is no completion function triggered by the aliased command
+		if ! _bash-it-array-contains-element "$alias_cmd" "${completions[@]}"; then
+			if [[ -n "$completion_loader" ]]; then
+				# force loading of completions for the aliased command
+				eval "$completion_loader $alias_cmd"
+				# 124 means completion loader was successful
+				[[ $? -eq 124 ]] || continue
+				completions+=("$alias_cmd")
+			else
+				continue
+			fi
+		fi
+		new_completion="$(complete -p "$alias_cmd" 2> /dev/null)"
+
+		# create a wrapper inserting the alias arguments if any
+		if [[ -n $alias_args ]]; then
+			compl_func="${new_completion/#* -F /}"
+			compl_func="${compl_func%% *}"
+			# avoid recursive call loops by ignoring our own functions
+			if [[ "${compl_func#_"$namespace"::}" == "$compl_func" ]]; then
+				compl_wrapper="_${namespace}::${alias_name}"
+				echo "function $compl_wrapper {
+                        local compl_word=\$2
+                        local prec_word=\$3
+                        # check if prec_word is the alias itself. if so, replace it
+                        # with the last word in the unaliased form, i.e.,
+                        # alias_cmd + ' ' + alias_args.
+                        if [[ \$COMP_LINE == \"\$prec_word \$compl_word\" ]]; then
+                            prec_word='$alias_cmd $alias_args'
+                            prec_word=\${prec_word#* }
+                        fi
+                        (( COMP_CWORD += ${#alias_arg_words[@]} ))
+                        COMP_WORDS=($alias_cmd $alias_args \${COMP_WORDS[@]:1})
+                        (( COMP_POINT -= \${#COMP_LINE} ))
+                        COMP_LINE=\${COMP_LINE/$alias_name/$alias_cmd $alias_args}
+                        (( COMP_POINT += \${#COMP_LINE} ))
+                        $compl_func \"$alias_cmd\" \"\$compl_word\" \"\$prec_word\"
+                    }" >> "$tmp_file"
+				new_completion="${new_completion/ -F $compl_func / -F $compl_wrapper }"
+			fi
+		fi
+
+		# replace completion trigger by alias
+		if [[ -n $new_completion ]]; then
+			new_completion="${new_completion% *} $alias_name"
+			echo "$new_completion" >> "$tmp_file"
+		fi
+	done < <(alias -p | sed -Ene "s/$alias_regex/\2 '\3' '\4'/p")
+	# shellcheck source=/dev/null
+	source "$tmp_file" && command rm -f "$tmp_file"
+}
+
+alias_completion
diff --git a/plugins/available/android.plugin.bash b/plugins/available/android.plugin.bash
new file mode 100644
index 00000000..4c3546b8
--- /dev/null
+++ b/plugins/available/android.plugin.bash
@@ -0,0 +1,12 @@
+cite about-plugin
+about-plugin 'Load Android Development Kit Manager'
+
+CMDLINE_TOOLS=${HOME}/Android/Sdk/cmdline-tools
+if [ -d "${CMDLINE_TOOLS}" ]; then
+    export PATH=$PATH:${CMDLINE_TOOLS}/latest/bin
+fi
+
+# desliga-mobile()
+# {
+#   adb shell "su -c 'reboot -p'"
+# }
diff --git a/plugins/available/arduino.plugin.bash b/plugins/available/arduino.plugin.bash
new file mode 100644
index 00000000..0da5eb83
--- /dev/null
+++ b/plugins/available/arduino.plugin.bash
@@ -0,0 +1,18 @@
+
+cite about-plugin
+about-plugin 'Load Arduino Development Kit Manager'
+
+v=1.8.1
+v=1.8.7
+t=5.4.0-atmel3.6.1-arduino2
+
+if [ -d "/opt/arduino-${v}" ]; then
+  export ARDUINO_DIR=/opt/arduino-${v}
+  export PATH=$PATH:$ARDUINO_DIR
+fi
+if [ -d "${HOME}/developer/Arduino-Makefile" ]; then
+  #export AVR_TOOLS_DIR=/usr
+  export AVR_TOOLS_DIR=${HOME}/.arduino15/packages/arduino/tools/avr-gcc/${t}
+  export ARDMK_DIR=${HOME}/developer/Arduino-Makefile
+fi
+
diff --git a/plugins/available/autojump.plugin.bash b/plugins/available/autojump.plugin.bash
index 3dfa0bca..dc8fbbb4 100644
--- a/plugins/available/autojump.plugin.bash
+++ b/plugins/available/autojump.plugin.bash
@@ -4,11 +4,12 @@ about-plugin 'Autojump configuration, see https://github.com/wting/autojump for
 
 # Only supports the Homebrew variant, Debian and Arch at the moment.
 # Feel free to provide a PR to support other install locations
-# shellcheck disable=SC1090
 if _bash_it_homebrew_check && [[ -s "${BASH_IT_HOMEBREW_PREFIX}/etc/profile.d/autojump.sh" ]]; then
 	source "${BASH_IT_HOMEBREW_PREFIX}/etc/profile.d/autojump.sh"
 elif _command_exists dpkg && dpkg -s autojump &> /dev/null; then
+	# shellcheck disable=SC1090
 	source "$(dpkg-query -S autojump.sh | cut -d' ' -f2)"
 elif _command_exists pacman && pacman -Q autojump &> /dev/null; then
+	# shellcheck disable=SC1090
 	source "$(pacman -Ql autojump | grep autojump.sh | cut -d' ' -f2)"
 fi
diff --git a/plugins/available/aws.plugin.bash b/plugins/available/aws.plugin.bash
index 14d26cae..54a86691 100644
--- a/plugins/available/aws.plugin.bash
+++ b/plugins/available/aws.plugin.bash
@@ -1,4 +1,3 @@
-# shellcheck shell=bash
 cite about-plugin
 about-plugin 'AWS helper functions'
 
@@ -41,13 +40,13 @@ function __awskeys_help {
 function __awskeys_get {
     local ln=$(grep -n "\[ *$1 *\]" "${AWS_SHARED_CREDENTIALS_FILE}" | cut -d ":" -f 1)
     if [[ -n "${ln}" ]]; then
-        tail -n +${ln} "${AWS_SHARED_CREDENTIALS_FILE}" | grep -F -m 2 -e "aws_access_key_id" -e "aws_secret_access_key"
-        tail -n +${ln} "${AWS_SHARED_CREDENTIALS_FILE}" | grep -F -m 1 "aws_session_token"
+        tail -n +${ln} "${AWS_SHARED_CREDENTIALS_FILE}" | egrep -m 2 "aws_access_key_id|aws_secret_access_key"
+        tail -n +${ln} "${AWS_SHARED_CREDENTIALS_FILE}" | egrep -m 1 "aws_session_token"
     fi
 }
 
 function __awskeys_list {
-    local credentials_list="$((grep -E '^\[ *[a-zA-Z0-9_-]+ *\]$' "${AWS_SHARED_CREDENTIALS_FILE}"; grep "\[profile" "${AWS_CONFIG_FILE}" | sed "s|\[profile |\[|g") | sort | uniq)"
+    local credentials_list="$((egrep '^\[ *[a-zA-Z0-9_-]+ *\]$' "${AWS_SHARED_CREDENTIALS_FILE}"; grep "\[profile" "${AWS_CONFIG_FILE}" | sed "s|\[profile |\[|g") | sort | uniq)"
     if [[ -n $"{credentials_list}" ]]; then
         echo -e "Available credentials profiles:\n"
         for profile in ${credentials_list}; do
diff --git a/plugins/available/bangsh.plugin.bash b/plugins/available/bangsh.plugin.bash
new file mode 100644
index 00000000..9e1bcc7b
--- /dev/null
+++ b/plugins/available/bangsh.plugin.bash
@@ -0,0 +1,4 @@
+cite about-plugin
+about-plugin 'Load Bang.sh - for easy Shell Scripting'
+
+export PATH="$PATH:/home/ivan/developer/scripts/bangsh"
diff --git a/plugins/available/base.plugin.bash b/plugins/available/base.plugin.bash
index 1a905163..6490ab88 100644
--- a/plugins/available/base.plugin.bash
+++ b/plugins/available/base.plugin.bash
@@ -67,7 +67,7 @@ function passgen() {
 
 # Create alias pass to passgen when pass isn't installed or
 # BASH_IT_LEGACY_PASS is true.
-if ! _command_exists pass || [[ "${BASH_IT_LEGACY_PASS:-}" == true ]]; then
+if ! _command_exists pass || [[ "${BASH_IT_LEGACY_PASS:-}" = true ]]; then
 	alias pass=passgen
 fi
 
@@ -120,26 +120,21 @@ function usage() {
 	esac
 }
 
-function t() {
-	about 'todo.sh if available, otherwise one thing todo'
-	param 'if not set, display todo item'
-	param '1: todo text'
-
-	local todotxt="${XDG_STATE_HOME:-~/.local/state}/bash_it/todo.txt"
-
-	if _bash-it-component-item-is-enabled plugin todo; then
-		todo.sh "$@"
-		return
-	elif [[ ! -f "${todotxt}" && -f ~/.t ]]; then
-		mv -vn ~/.t "${todotxt}" # Verbose, so the user knows. Don't overwrite, just in case.
-	fi
-
-	if [[ "$#" -eq 0 ]]; then
-		cat "${todotxt}"
-	else
-		echo "$@" >| "${todotxt}"
-	fi
-}
+# shellcheck disable=SC2144 # the glob matches only one file
+if [[ ! -e "${BASH_IT?}/plugins/enabled/todo.plugin.bash" &&
+	! -e "${BASH_IT?}/plugins/enabled"/*"${BASH_IT_LOAD_PRIORITY_SEPARATOR-}todo.plugin.bash" ]]; then
+	# if user has installed todo plugin, skip this...
+	function t() {
+		about 'one thing todo'
+		param 'if not set, display todo item'
+		param '1: todo text'
+		if [[ "$*" == "" ]]; then
+			cat ~/.t
+		else
+			echo "$*" > ~/.t
+		fi
+	}
+fi
 
 if _command_exists mkisofs; then
 	function mkiso() {
diff --git a/plugins/available/bashacks.plugin.bash b/plugins/available/bashacks.plugin.bash
new file mode 100644
index 00000000..24687375
--- /dev/null
+++ b/plugins/available/bashacks.plugin.bash
@@ -0,0 +1,1008 @@
+# plugin for bashacks
+
+cite about-plugin
+about-plugin 'Set of functions to increase productivity while hacking with Bash'
+
+bh_dlsite()
+{
+  wget -crw $((($RANDOM%10)+1)) \
+    --user-agent 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:28.0) Gecko/20100101 Firefox/28.0' \
+    "$1"
+}
+
+bh_skel_c()
+{
+  echo -e "#include <stdio.h>\n\nint main(int argc, char *argv[]) {\n\n\n\treturn 0;\n}"
+}
+
+bh_isperlm()
+{
+  [ $# -ne 1 ] && return 1
+  perl -M"$1" -e exit &> /dev/null && echo yes ||
+    echo no
+}
+
+bh_skel_python()
+{
+  echo -e "#!/usr/bin/env python\n# *-* coding: utf-8 *-*\n\nif __name__ == "__main__":\n\t"
+}
+
+bh_asminfo()
+{
+  [ $# -lt 1 ] && return 1
+
+  local ins=${1,,}
+
+  bh_checkdir
+
+  if test -s $bh_cache/$ins.txt; then
+    cat $bh_cache/$ins.txt
+  else
+    wget -q faydoc.tripod.com/cpu/$ins.htm -O - |
+    html2text |
+    sed -n '/^===.*/,$p' |
+    sed 's/^===.*/'${ins^^}'/' | tr _ ' ' |
+    tee -a $bh_cache/$ins.txt
+  fi
+
+  test -s $bh_cache/$ins.txt || rm -f $bh_cache/$ins.txt
+
+}
+
+bh_intel()
+{
+  local   GDBINIT="$HOME/.gdbinit"
+
+  if [ "$1" == "on" ]; then
+    grep -s 'disassembly-flavor' "$GDBINIT" &> /dev/null || \
+      echo "set disassembly-flavor intel" >> "$GDBINIT"
+    alias gdb='gdb -q'
+    alias objdump='objdump -M intel-mnemonics'
+  elif [ "$1" == "off" ]; then
+    sed -i 's/set disassembly-flavor intel//' "$GDBINIT"
+    unalias objdump
+    unalias gdb
+  fi
+}
+
+bh_dumpmem()
+{
+  [ $# -le 1 -o "${EUID}" -ne 0 ] && return 1
+
+  local stack_addr=$(grep -m 1 "$1" /proc/$2/maps |
+  cut -d' ' -f1 | sed 's/^/0x/; s/-/ 0x/')
+
+  test -n "$stack_addr" && \
+    echo "dump memory "$3" $stack_addr" | gdb --pid $2 &> /dev/null
+}
+
+alias bh_dumpstack='bh_dumpmem stack'
+alias bh_dumpheap='bh_dumpmem heap'
+
+bh_bin2sc()
+{
+  [ $# -ne 1 ] && return 1
+  objdump -D "$1" | perl -ne 's/\b([a-f0-9]{2})\b/print "\\x".$1/ge'
+  echo
+}
+
+bh_sc2asm()
+{
+  local mode=32
+  local in="$1"
+
+  [ $# -eq 0 ] && return 1
+
+  [ $1 = '-m' ] && mode=$2 in="$3"
+
+  sc=$(echo "$in" | sed 's/\\x/ /g')
+  echo "$sc" | udcli -$mode -x -noff -nohex | sed 's/^ //'
+}
+
+bh_asmgrep()
+{
+  [ $# -lt 2 ] && return 1
+
+  objdump -d "$2" | grep --color -C 4 -E "$1"
+
+}
+
+bh_asm2sc()
+{
+  local obj=$(mktemp)
+  local fmt=elf32
+  local in="$1"
+
+  [ $#  -eq 0 ] && return 1
+
+  [ $1 = "-f" ] && fmt=$2 in="$3"
+
+  nasm -f $fmt -o $obj $in
+
+  objdump -D $obj | perl -ne's/\b([a-f0-9]{2})\b/print "\\x".$1/ge'
+  echo
+
+  rm -f $obj
+}
+
+bh_hex2dec()
+{
+  [ $# -eq 0 ] && return 1
+
+  echo $((0x${1#0x}))
+}
+
+bh_dec2hex()
+{
+  [ $# -eq 0 ] && return 1
+
+  printf "%x\n" "$1"
+}
+
+bh_dec2bin()
+{
+  [ $# -eq 0 ] && return 1
+  echo "obase=2;$1" | bc
+}
+
+bh_charcalc()
+{
+  [ $# -ne 3 ] && return 1
+
+  local char
+  local chars
+  local res
+  local i
+
+  case $2 in
+    +|-)
+      for i in $(echo "$1" | sed 's/./& /g'); do
+        char=$(bh_asc2dec $i)
+        res=$(($char $2 $3))
+        echo -n $(bh_dec2asc $res)
+      done
+      echo
+      ;;
+    '*')
+      for (( i=0; i<$3; i++ )); do
+        res="$res$1"
+      done
+      echo $res
+      ;;
+  esac
+
+}
+
+bh_xor()
+{
+  [ $# -lt 2 ] && return 1
+
+  echo $(($1^$2))
+}
+
+bh_pow()
+{
+  [ $# -lt 2 ] && return 1
+
+  echo $(($1**$2))
+}
+
+bh_hexcalc()
+{
+  test $# -ne 3 && return 1
+
+  echo -n 0x
+  bh_dec2hex $((0x${1#0x} $2 0x${3#0x}))
+}
+
+bh_shl()
+{
+  [ $# -lt 2 ] && return 1
+
+  echo $(($1<<$2))
+}
+
+bh_bin2dec()
+{
+  [ $# -eq 0 ] && return 1
+
+  echo $((2#$1))
+}
+
+bh_hex2bin()
+{
+  [ $# -eq 0 ] && return 1
+
+  local bin
+  local i
+
+  for i in $*; do
+    bin=$(echo "obase=2;ibase=16;$(echo $i | tr a-f A-F)" | bc)
+    echo -n "$bin "
+  done
+  echo
+}
+
+bh_shr()
+{
+  [ $# -lt 2 ] && return 1
+
+  echo $(($1>>$2))
+}
+
+bh_md5()
+{
+  [ $# -eq 0 ] && return 1
+
+  test -e $1 && \
+    md5sum < "$1" | cut -d' ' -f1 \
+    || \
+    echo -n "$1" | md5sum | cut -d' ' -f1
+}
+
+bh_rotall()
+{
+  local i
+
+  test -n "$1" || { bh_rot ; return 1; }
+
+  for i in {1..25}; do
+    echo "ROT$i $(bh_rot $i "$1")"
+  done
+}
+
+alias bh_rot5='bh_rot 5'
+alias bh_rot13='bh_rot 13'
+alias bh_rot18='bh_rot 18'
+alias bh_rot47='bh_rot 47'
+
+bh_rot()
+{
+  local n
+
+  test $# -eq 2 || return 1
+
+  # n recebe o caractere do alfabeto correspondente
+  n=$(echo -e \\x$(bh_dec2hex $(echo -e $((97+$1)))))
+
+  # rot com o tr
+  echo $2 | tr a-z $n-za-z | tr A-Z ${n^^}-ZA-Z
+}
+
+bh_unmd5()
+{
+  [ $# -eq 0 ] && return 1
+
+  local sHash="$1"
+  local sSite="http://hashtoolkit.com/reverse-hash/?hash=$sHash"
+
+  sA=$(wget -T 30 -q -O - "$sSite" --user-agent="Mozilla/5.0 (Windows NT 6.1; WOW64; rev:28.0) Gecko'20100101 Firefox/28.0" |
+  grep -A 1 'res-text' |
+  tail -1 |
+  sed -e 's/[ ]\+//g ;s/<[^>]*>//g')
+
+  [ ! -z "$sA" ] && [ "$sA" != "$sHash" ] &&
+    echo "${sA}"
+}
+
+alias bh_unsha512="bh_unmd5"
+alias bh_unsha1="bh_unmd5"
+alias bh_unsha256="bh_unmd5"
+alias bh_unsha356="bh_unmd5"
+
+bh_unbase64()
+{
+  [ $# -eq 0 ] && return 1
+  echo $1 | base64 -d
+  echo
+}
+
+bh_strxor()
+{
+  [ $# -lt 2 ] && return 1
+
+  local str
+  local xored
+  local i
+
+  # $2 is the string and $1 is the xor key
+  str=$(bh_str2hex "$2")
+
+  for i in $str; do
+    xored="$xored $(bh_dec2hex $((0x$i^$1)))"
+  done
+
+  bh_hex2str "$xored"
+}
+
+bh_keycheck()
+{
+  diff <(ssh-keygen -y -f "$1") <(cut -d' ' -f1,2 "$2") >/dev/null && echo \
+    'keys match!' || echo 'keys does not match! :('
+}
+
+bh_bin2ip()
+{
+  local sBin="$(echo $1 |
+  grep -Ewo '^(([0-1]){8}\.){3}([0-1]){8}$')"
+
+  [ $# -eq 0 -o -z "${sBin}" ] && return 1
+
+  local i
+  for i in $(echo "${sBin}" | tr . ' '); do
+    printf "%d." $(bh_bin2dec $i)
+  done | sed "s/.$/\\n/"
+}
+
+bh_get()
+{
+  [ "$1" ] || return
+  local ua='Mozilla/5.0 (Windows NT 6.1; WOW64; rv:28.0) Gecko/20100101 Firefox/28.0'
+  wget -c --user-agent "$ua" "$1"
+}
+
+bh_wscan()
+{
+  local iFace
+  local OUI
+  local MAC
+  local MACTMP
+  local MACPROD
+  local PARAM
+
+  [ "$1" == "-i" ] && {
+  iFace="$2"
+  PARAM="$3"
+} || {
+local iFace="$(iw dev |
+grep 'Interface' |
+cut -d' ' -f2)"
+PARAM="$1"
+    }
+
+    [ ${EUID} -ne 0 -o \
+      -z "${iFace}" ] && { echo 'root is required' ; return 1; }
+
+    case "$PARAM" in
+      -model)
+        iw ${iFace} scan -u |
+        grep -E '^BSS|Model:' |
+        sed -r 's/(\(.*\)|-- associated)//g' |
+        tr \\n ' ' |
+        sed 's/BSS/\n/g' | grep 'Model' |
+        sed 's/Model: //g'
+        ;;
+      -oui)
+        [ ! -z "$(echo $2 | grep -Ewo '(([0-9a-f]){2}:){2}([0-9a-f]){2}' )" ] && {
+
+        OUI=$( echo $2 | tr ':' '-' )
+        wget 'http://standards.ieee.org/cgi-bin/ouisearch' \
+          --post-data="x=${OUI}&submit2=search%21" --no-verbose -O - |
+        sed '/<pre>/,/<\/pre>/ s/^/--/g' |
+        grep '^--' |
+        sed 's/^--//g' |
+        html2text
+      } || {
+      iw ${iFace} scan -u |
+      grep -E '^BSS|SSID|OUI|Model:'
+    }
+    ;;
+  -mac)
+    [ ! -z "$(echo $2 | grep -Ewo '(([0-9a-fA-F]){2}:){5}([0-9a-fA-F]){2}' )" ] && {
+    MACTMP=$(mktemp)
+    MAC="$2"
+    wget "http://www.macvendorlookup.com/ouisearch?mac=${MAC}" -O - &> ${MACTMP}
+    MACPROD="$(cat ${MACTMP} | tr \: \\n |
+    grep -A 1 -i 'company' |
+    tail -1 |
+    cut -d\" -f2)"
+
+    [ -z "${MACPROD}" ] && echo "No Vendor Exists" ||
+      echo "${MACPROD}"
+
+    rm ${MACTMP}
+  }
+  ;;
+-wps)
+  iw ${iFace} scan |
+  grep -E '^BSS|WPS|: channel ([0-9]){1,2}' |
+  sed -e 's/: chanell//' |
+  tr \\n ' ' |
+  sed -re "s/BSS/\n/g; s/(\(on ${iFace}\)|DS Parameter set: channel|\* Version: |-- associated|:\t)//g" |
+  grep 'WPS'
+
+  ;;
+*)
+  iw ${iFace} scan |
+  grep -E '^BSS|signal|SSID|: channel ([0-9]){1,2}' |
+  sed -r 's/dBm|signal|SSID|\-\- associated|DS Parameter set|channel//g' |
+  tr \\n ' ' | sed 's/BSS/\n/g' |
+  sed "s/(on ${iFace})//" |
+  awk '{print $NF,'\t',$0 }' |
+  sed -r 's/:  ([0-9]){1,2}//g; s/([\ |\t]){2,}/_/g; s/_/\t/g'
+  echo
+  ;;
+    esac
+  }
+
+  bh_ip2geo()
+  {
+    [ $# -eq 0 -o "$1" == '-h' ] && return 1
+
+    wget -q -T 30 "http://xml.utrace.de/?query=$1" -O - |
+    sed -e '4d; s/<[^>]*>//g; s/\t//g; /^$/d' |
+    tr \\n ' '
+    echo
+  }
+
+  bh_myip()
+  {
+    [ "$1" == '-h' ] && return 1
+
+    wget -q -T 10 'www.mentebinaria.com.br/ext/ip.php' -O -
+    echo
+  }
+
+  bh_ip2bin()
+  {
+    local sIp="$(echo $1 |
+    grep -Eo '^(([0-9]){1,3}\.){3}([0-9]){1,3}$')"
+
+    [ $# -eq 0 -o -z "${sIp}" ] && return 1
+
+    local i
+    for i in $(echo "${sIp}" | tr . ' '); do
+      printf "%.8d." $(bh_dec2bin $i)
+    done | sed "s/.$/\\n/"
+  }
+
+  bh_wgetr()
+  {
+    [ "$1" ] || return
+    local ua='Mozilla/5.0 (Windows NT 6.1; WOW64; rv:28.0) Gecko/20100101 Firefox/28.0'
+    wget -crw $((($RANDOM%10)+1)) --user-agent "$ua" "$1"
+  }
+
+  bh_hostcalc()
+  {
+    local iCidr
+    local iTotalHost
+
+    bh_isdigit $1
+
+    [ $? -eq 0 \
+      -a $1 -le 30 \
+      -a $1 -ge 2 ] || return 1
+
+    iCidr=$1
+    iTotalHost=$(bh_pow 2 $((32-iCidr)))
+    echo ${iTotalHost} - 2 | bc
+  }
+
+  bh_hashes()
+  {
+    IFS=
+    [ -n "$1" ] || return
+    for i in $*; do
+      md5sum "$i"
+      sha1sum "$i"
+      sha256sum "$i"
+    done
+  }
+
+  bh_md5rename()
+  {
+    IFS=
+    local md5_hash=
+    local i=
+
+    [ -n "$1" ] || return
+
+    if which -s md5sum; then
+      for i in $*; do
+        md5_hash=$(md5sum "$i" | cut -d' ' -f1)
+        mv "$i" $md5_hash
+      done
+    elif which -s md5; then
+      for i in $*; do
+        md5_hash=$(md5 "$i" | cut -d= -f2 | tr -d ' ')
+        mv "$i" $md5_hash
+      done
+    fi
+  }
+
+  bh_bkp() {
+    cp "$1"{,.$(date +%Y%m%d)};
+  }
+
+  bh_findmime()
+  {
+    local dir=.
+    local filetype
+    local opt
+    local matches
+
+    [ -d "$2" ] && dir="$2"
+
+    case $1 in
+      '-txt')
+        opt='text/';;
+      '-zip')
+        opt='application/zip';;
+      '-exe')
+        opt='application/x-dosexec';;
+      '-msi')
+        opt='application/vnd.ms-office';;
+      *)
+        return
+    esac
+
+    # buffering results
+    matches=$(for i in "$dir"/*; do
+    filetype=$(file -Nb --mime-type "$i")
+    [[ "$filetype" =~ "$opt" ]] && echo "${i#./*}"
+  done)
+
+  [ -n "$matches" ] && echo "$matches"
+}
+
+bh_zipmal()
+{
+  [ -n "$1" ] || return
+  local name=${1%\.*}.zip
+  zip --encrypt -P virus "$name" $@
+  ls -lh "$name"
+}
+
+bh_websearch()
+{
+  local i                     # count for() pagination
+  local TYPE                  # type {mail,file,phone...}
+  local DOMAIN                # domainame
+  local TOPAGE=50             # set default pagination
+  local TMP="$(mktemp)"       # tmp file, store search
+  local AGENT="Mozilla/5.0"   # user agent browser default
+  local SEARCH                # variable to store rearch and submit google page
+  local EXTENSION             # variable to store filetype as to search for file
+  local EXTRACT               # variable with regular expression to extract data/information
+  local STRING=""             #
+  local DOWNLOAD=0            # set donwload all file - default no
+  OPTIND=0                    # getopts no crazy
+
+  # run param
+  while getopts ":g:t:s:d:e:p:" o
+  do
+    case "${o}" in
+      g) DOWNLOAD=1
+        ;;
+      t) TYPE=${OPTARG}
+        ;;
+      p)
+        if $(bh_isdigit ${OPTARG}) ; then
+          TOPAGE=$(echo 10*${OPTARG} | bc )
+        else
+          TOPAGE=50
+        fi
+        ;;
+      d) DOMAIN=${OPTARG}
+        ;;
+      s)
+        [ ! -z "$(echo "$*" | grep "t free")" ] &&
+          STRING="$OPTARG" ||
+          STRING="intext:${OPTARG}"
+        ;;
+      e) EXTENSION=${OPTARG}
+        ;;
+    esac
+  done
+
+  [ -z "${TYPE}" ] && return 1
+
+  case "${TYPE}" in
+    mail|phone|file)
+      [ -z "${DOMAIN}" ] && {
+      echo "Domain is required to type ${TYPE}"
+      return 1
+    }
+    ;;
+esac
+
+[ "${TYPE}" == "mail" ] && {
+SEARCH="%22@${DOMAIN}%22"
+EXTRACT="sed -e 's/<[^>]*>//g' |
+grep -Ewo '([A-Za-z0-9_\.\-]){1,}\@${DOMAIN}' "
+    }
+
+    [ "${TYPE}" == "file" -a ! -z "${EXTENSION}" ] && {
+    SEARCH="site:${DOMAIN}%20filetype:${EXTENSION}%20${STRING}"
+    EXTRACT="tr '<' '\n' |
+    grep -Ewo 'a href=\".*' |
+    grep -Ev \"(google|search)\" |
+    sed 's/a href=\"//g;s/&amp;sa//g' |
+    grep '/url' |
+    cut -d'=' -f2"
+  }
+
+  [ "${TYPE}" == "phone" ] && {
+  SEARCH="site:${DOMAIN}%20(contato|faleconosco|telefone|telephone|phone|contact)"
+  EXTRACT="grep -Ewo '(\(([0xx|0-9]){2,3}\)|([0-9]){2,3}).([0-9]){3,4}.([0-9]){4,5}' "
+}
+
+# free
+[ "${TYPE}" == "free" -a ! -z "${STRING}" ] && {
+SEARCH="$(echo "${STRING}"|sed 's/^intext://')"
+EXTRACT="tr '<' '\n' |
+grep -Ewo 'a href=\".*' |
+grep -Ev \"(google|search)\" |
+sed 's/a href=\"//g;s/&amp;sa//g' |
+grep '/url' |
+cut -d'=' -f2"
+    }
+    [ -z "${SEARCH}" ] && return 1
+
+    echo "[ ${TYPE} ] IN ${DOMAIN} ${EXTENSION}"
+
+    for (( i=0 ; i<=${TOPAGE} ; i+=10 ))
+    do
+      echo "[+] ${i}"
+      wget -q -T 30 -U "${AGENT}" -O - \
+        "http://www.google.com.br/search?q=${SEARCH}&btnG=&start=${i}" &> ${TMP}
+    done
+
+    echo "============================================="
+
+    [ ${DOWNLOAD} -eq 1 -a ${TYPE} == 'file' ] && {
+    # tmp file store list
+    LISTTMP=$(mktemp)
+    # directory does not exist create it
+    [ ! -d "${DOMAIN}" ] &&
+      mkdir "${DOMAIN}"
+
+    #
+    cat ${TMP} | eval ${EXTRACT} | sort -u > ${LISTTMP}
+    echo "Iniciando Download de $( cat ${LISTTMP} | wc -l ) Arquivos"
+    # if elements exist - download
+    [ $( wc -l ${LISTTMP} | cut -d" " -f1 ) -gt 0 ] &&
+      wget -P "${DOMAIN}" -i ${LISTTMP} &>/dev/null
+    [ $? -eq 0 ] &&
+      echo "Download feito em ${DOMAIN}"
+
+    rm -f ${LISTTMP}
+  } || {
+  # just list on then screen
+  cat ${TMP} | eval ${EXTRACT} | sort -u
+}
+
+rm -rf ${TMP}
+}
+
+bashacks()
+{
+  echo "use -> man bashacks"
+}
+
+bashacks_depinstall()
+{
+  [ ${EUID} -eq 0 ] && {
+  local sPktManager
+  local sPkt='gcc make html2text iw nasm gdb wget'
+  local sPathFile
+  local sPwd=$(pwd)
+  local sUdis=$(which udisks)
+
+  # debian family
+  [ -e '/etc/debian_version' ] &&
+    sPktManager="apt-get install -y -qq"
+  # OpenSuSE
+  [ -e '/etc/SuSE-release' ] &&
+    sPktManager="zypper -q --non-interactive install"
+  # centos, fedora or redhat
+  [ -e '/etc/redhat-release' -o \
+    -e '/etc/centos-release' -o \
+    -e '/etc/fedora-release' ] &&
+    sPktManager="yum -q -y install"
+
+  echo '[ Dep install ] ...'
+  ${sPktManager} ${sPkt}
+
+  [ -z "${sUdis}" ] && {
+  cd /tmp
+  echo '[ Download udis86 ] ...'
+
+  # prevent corrupt file
+  [ -e '/tmp/download' ] &&
+    rm /tmp/download
+
+  wget http://sourceforge.net/projects/udis86/files/latest/download &> /dev/null
+  tar -xf /tmp/download
+  sPathFile=$(ls -1 | grep 'udis86')
+  cd ${sPathFile}
+  ./configure &&
+    make &&
+    make install &&
+    cd udcli &&
+    make &&
+    make install
+} || echo "[ udis86 already installed on the system ]"
+
+[ $? -eq 0 ] && {
+echo
+echo -n '=====    [ OK ]'
+echo
+cd ${sPwd}
+return 0
+        }
+      } || echo "root is required"
+      return 1
+    }
+
+    bh_checkdir() { test -d $bh_cache || mkdir -p $bh_cache; }
+
+    bh_user_path="$HOME/.config/bashacks"
+    bh_cache="$bh_user_path/cache/asm"
+
+    bh_str2hex()
+    {
+      [ $# -eq 0 ] && return 1
+
+      case "$1" in
+        "-s")
+          echo -n "$2" | hexdump -ve '/1 "%02x"' | sed 's/^/0x/'
+          echo
+          ;;
+        "-x")
+          echo -n "$2" | hexdump -ve '/1 "%02x"' | sed 's/../\\x&/g'
+          echo
+          ;;
+        "-0x")
+          echo -n "$2" | hexdump -ve '/1 "0x%02x "' | sed 's/\(.*\) /\1/'
+          echo
+          ;;
+        "-c")
+          echo -n '{'
+          echo -n "$2" | hexdump -ve '/1 "0x%02x, "' | sed 's/\(.*\), /\1/'
+          echo '}'
+          ;;
+        *)
+          echo -n "$1" | hexdump -ve '/1 "%02x "' | sed 's/\(.*\) /\1/'
+          echo
+          ;;
+      esac
+    }
+
+    bh_isdigit()
+    {
+      [ $# -ne 1 ] && return 1
+
+      echo "$1" | grep -Eqw '^[0-9]+$'
+    }
+
+    bh_str2hexr()
+    {
+      [ $# -eq 0 ] && return 1
+
+      case "$1" in
+        "-x" | "-0x" | "-c" | "-s")
+          bh_str2hex $1 "$(echo "$2" | rev)"
+          ;;
+        *)
+          bh_str2hex "$(echo "$1" | rev)"
+          ;;
+      esac
+    }
+
+    bh_islower()
+    {
+      [ $# -eq 0 ] && return 1
+
+      echo "$1" | grep -Eqw '^[a-z]+$'
+    }
+
+    bh_isspace()
+    {
+      local str="$(echo $1 |
+      hexdump -ve '/1 "%02x"'|
+      sed 's/../x& /g' )"
+      for h in $str;
+      do
+        case $h in
+          x09|x0a|x0b|x0c|x0d|x20) return 0
+            ;;
+          *) return 1
+            ;;
+        esac
+      done
+    }
+
+    bh_isgraph()
+    {
+      local char_in="$1"
+
+      # dec 33 - 126
+
+      [ "${#char_in}" -gt 2 ] && return 1
+
+      [ $(bh_asc2dec "${char_in}") -ge 33 -a \
+        $(bh_asc2dec "${char_in}") -le 126 ] &&
+        return 0
+
+      return 1
+    }
+
+    bh_urlencode(){
+      [ $# -ne 1 ] && return 1;
+      echo -ne "$1" | perl -pe 's/\W/"%".unpack "H*",$&/gei'
+      echo
+    }
+
+    bh_asciitable()
+    {
+      echo -en \
+        "Dec Hex    Dec Hex    Dec Hex  Dec Hex  Dec Hex  Dec Hex   Dec Hex   Dec Hex\n\
+        0 00 NUL  16 10 DLE  32 20    48 30 0  64 40 @  80 50 P   96 60 \`  112 70 p\n\
+        1 01 SOH  17 11 DC1  33 21 !  49 31 1  65 41 A  81 51 Q   97 61 a  113 71 q\n\
+        2 02 STX  18 12 DC2  34 22 \"  50 32 2  66 42 B  82 52 R   98 62 b  114 72 r\n\
+        3 03 ETX  19 13 DC3  35 23 #  51 33 3  67 43 C  83 53 S   99 63 c  115 73 s\n\
+        4 04 EOT  20 14 DC4  36 24 $  52 34 4  68 44 D  84 54 T  100 64 d  116 74 t\n\
+        5 05 ENQ  21 15 NAK  37 25 %  53 35 5  69 45 E  85 55 U  101 65 e  117 75 u\n\
+        6 06 ACK  22 16 SYN  38 26 &  54 36 6  70 46 F  86 56 V  102 66 f  118 76 v\n\
+        7 07 BEL  23 17 ETB  39 27 '  55 37 7  71 47 G  87 57 W  103 67 g  119 77 w\n\
+        8 08 BS   24 18 CAN  40 28 (  56 38 8  72 48 H  88 58 X  104 68 h  120 78 x\n\
+        9 09 HT   25 19 EM   41 29 )  57 39 9  73 49 I  89 59 Y  105 69 i  121 79 y\n\
+        10 0A LF   26 1A SUB  42 2A *  58 3A :  74 4A J  90 5A Z  106 6A j  122 7A z\n\
+        11 0B VT   27 1B ESC  43 2B +  59 3B ;  75 4B K  91 5B [  107 6B k  123 7B {\n\
+        12 0C FF   28 1C FS   44 2C ,  60 3C <  76 4C L  92 5C \\  108 6C l  124 7C |\n\
+        13 0D CR   29 1D GS   45 2D -  61 3D =  77 4D M  93 5D ]  109 6D m  125 7D }\n\
+        14 0E SO   30 1E RS   46 2E .  62 3E >  78 4E N  94 5E ^  110 6E n  126 7E ~\n\
+        15 0F SI   31 1F US   47 2F /  63 3F ?  79 4F O  95 5F _  111 6F o  127 7F DEL\n"
+    }
+
+    bh_iscntrl() {
+      local iCHAR=$(bh_asc2dec "$1")
+      [ $iCHAR -le 31 -o \
+        $iCHAR -eq 127 ] && return 0 ||
+        return 1
+    }
+
+    bh_isprint()
+    {
+      # nao ta rolando
+      local i
+
+      for i in $(bh_str2hex -0x "$1" | sed 's/\(....\)/\1 /g'); do
+        [ $(($i)) -ge 32 -a $(($i)) -le 127 ] || return 1
+      done
+      return 0
+    }
+
+    bh_ispunct() {
+      if $(bh_isgraph "$1")
+      then
+        if ! $(bh_isalnum "$1")
+        then
+          return 0
+        fi
+      else
+        return 1
+      fi
+      return 1
+    }
+
+    bh_isalpha()
+    {
+      [ $# -ne 1 ] && return 1
+
+      echo "$1" | grep -Eqw '^[A-Za-z]+$'
+    }
+
+    bh_utf8table()
+    {
+      echo -en \
+        "Hex      Hex      Hex      Hex      Hex      Hex      Hex      Hex\n\
+        c2 a0    c2 ac ¬  c2 b8 ¸  c3 84 Ä  c3 90 Ð  c3 9c Ü  c3 a8 è  c3 b4 ô\n\
+        c2 a1 ¡  c2 ad ­  c2 b9 ¹  c3 85 Å  c3 91 Ñ  c3 9d Ý  c3 a9 é  c3 b5 õ\n\
+        c2 a2 ¢  c2 ae ®  c2 ba º  c3 86 Æ  c3 92 Ò  c3 9e Þ  c3 aa ê  c3 b6 ö\n\
+        c2 a3 £  c2 af ¯  c2 bb »  c3 87 Ç  c3 93 Ó  c3 9f ß  c3 ab ë  c3 b7 ÷\n\
+        c2 a4 ¤  c2 b0 °  c2 bc ¼  c3 88 È  c3 94 Ô  c3 a0 à  c3 ac ì  c3 b8 ø\n\
+        c2 a5 ¥  c2 b1 ±  c2 bd ½  c3 89 É  c3 95 Õ  c3 a1 á  c3 ad í  c3 b9 ù\n\
+        c2 a6 ¦  c2 b2 ²  c2 be ¾  c3 8a Ê  c3 96 Ö  c3 a2 â  c3 ae î  c3 ba ú\n\
+        c2 a7 §  c2 b3 ³  c2 bf ¿  c3 8b Ë  c3 97 ×  c3 a3 ã  c3 af ï  c3 bb û\n\
+        c2 a8 ¨  c2 b4 ´  c3 80 À  c3 8c Ì  c3 98 Ø  c3 a4 ä  c3 b0 ð  c3 bc ü\n\
+        c2 a9 ©  c2 b5 µ  c3 81 Á  c3 8d Í  c3 99 Ù  c3 a5 å  c3 b1 ñ  c3 bd ý\n\
+        c2 aa ª  c2 b6 ¶  c3 82 Â  c3 8e Î  c3 9a Ú  c3 a6 æ  c3 b2 ò  c3 be þ\n\
+        c2 ab «  c2 b7 ·  c3 83 Ã  c3 8f Ï  c3 9b Û  c3 a7 ç  c3 b3 ó  c3 bf ÿ\n"
+    }
+
+    bh_isascii() {
+      local c2d=$(bh_asc2dec "1")
+
+      if $(bh_isdigit $c2d)
+      then
+        [ $c2d -lt 127 \
+          -a $c2d -gt 0 ] &&
+          return 0 ||
+          return 1
+      fi
+      return 1
+    }
+
+    bh_hex2str()
+    {
+      [ $# -ne 1 ] && return 1
+
+      local hex
+      local str
+      local i
+
+      hex=$(echo $1 | sed 's/\(0x\|\\x\| \|{\|}\|,\)//g')
+
+      # insert a space each two chars
+      hex=$(echo $hex | sed 's/../& /g')
+
+      # prefix with \x, needed by echo
+      for i in $hex; do
+        str="$str\\x$i"
+      done
+
+      echo -e $str
+    }
+
+    bh_asc2dec()
+    {
+      [ $# -ne 1 ] && return 1
+
+      printf "%d\n" "'$1"
+    }
+
+    bh_isalnum()
+    {
+      [ $# -ne 1 ] && return 1
+
+      echo "$1" | grep -Eqw '^[0-9A-Za-z]+$'
+    }
+
+    bh_isupper()
+    {
+      [ $# -ne 1 ] && return 1
+
+      echo "$1" | grep -Eqw '^[A-Z]+$'
+    }
+
+    bh_urldecode(){
+      [ $# -ne 1 ] && return 1
+      echo "$1" | perl -pe 's/%([0-9a-f]{2})/pack "H*", $1/gie'
+    }
+
+    bh_dec2asc()
+    {
+      [ $# -ne 1 ] && return 1
+
+      echo -e $(printf "\\\x%x" $1)
+    }
+
+    bh_isxdigit()
+    {
+      [ $# -ne 1 ] && return 1
+
+      echo "$1" | grep -Eqw '^[0-9A-Fa-f]+$'
+    }
+
+    bh_raffle()
+    {
+      local i
+      local interval=3
+      test -n "$3" && interval=$3
+      for i in $(seq $1 $2 | sort -R); do
+        echo $i
+        sleep $interval;
+      done
+    }
+
+    bh_matrix()
+    {
+      echo -e "\e[32m";
+      while :; do
+        printf '%*c' $(($RANDOM % 30)) $(($RANDOM % 2));
+      done
+    }
+
diff --git a/plugins/available/battery.plugin.bash b/plugins/available/battery.plugin.bash
index b38d7f9d..e8e3995f 100644
--- a/plugins/available/battery.plugin.bash
+++ b/plugins/available/battery.plugin.bash
@@ -1,130 +1,149 @@
-# shellcheck shell=bash
+cite about-plugin
 about-plugin 'display info about your battery charge level'
 
-function ac_adapter_connected() {
-	local batteries
-	if _command_exists upower; then
-		IFS=$'\n' read -d '' -ra batteries < <(upower -e | grep -i BAT)
-		upower -i "${batteries[0]:-}" | grep 'state' | grep -q 'charging\|fully-charged'
-	elif _command_exists acpi; then
-		acpi -a | grep -q "on-line"
-	elif _command_exists pmset; then
-		pmset -g batt | grep -q 'AC Power'
-	elif _command_exists ioreg; then
-		ioreg -n AppleSmartBattery -r | grep -q '"ExternalConnected" = Yes'
-	elif _command_exists WMIC; then
-		WMIC Path Win32_Battery Get BatteryStatus /Format:List | grep -q 'BatteryStatus=2'
-	fi
+ac_adapter_connected(){
+  if _command_exists upower;
+  then
+    upower -i $(upower -e | grep -i BAT) | grep 'state' | grep -q 'charging\|fully-charged'
+    return $?
+  elif _command_exists acpi;
+  then
+    acpi -a | grep -q "on-line"
+    return $?
+  elif _command_exists pmset;
+  then
+    pmset -g batt | grep -q 'AC Power'
+    return $?
+  elif _command_exists ioreg;
+  then
+    ioreg -n AppleSmartBattery -r | grep -q '"ExternalConnected" = Yes'
+    return $?
+  elif _command_exists WMIC;
+  then
+    WMIC Path Win32_Battery Get BatteryStatus /Format:List | grep -q 'BatteryStatus=2'
+    return $?
+  fi
 }
 
-function ac_adapter_disconnected() {
-	local batteries
-	if _command_exists upower; then
-		IFS=$'\n' read -d '' -ra batteries < <(upower -e | grep -i BAT)
-		upower -i "${batteries[0]:-}" | grep 'state' | grep -q 'discharging'
-	elif _command_exists acpi; then
-		acpi -a | grep -q "off-line"
-	elif _command_exists pmset; then
-		pmset -g batt | grep -q 'Battery Power'
-	elif _command_exists ioreg; then
-		ioreg -n AppleSmartBattery -r | grep -q '"ExternalConnected" = No'
-	elif _command_exists WMIC; then
-		WMIC Path Win32_Battery Get BatteryStatus /Format:List | grep -q 'BatteryStatus=1'
-	fi
+ac_adapter_disconnected(){
+  if _command_exists upower;
+  then
+    upower -i $(upower -e | grep -i BAT) | grep 'state' | grep -q 'discharging'
+    return $?
+  elif _command_exists acpi;
+  then
+    acpi -a | grep -q "off-line"
+    return $?
+  elif _command_exists pmset;
+  then
+    pmset -g batt | grep -q 'Battery Power'
+    return $?
+  elif _command_exists ioreg;
+  then
+    ioreg -n AppleSmartBattery -r | grep -q '"ExternalConnected" = No'
+    return $?
+  elif _command_exists WMIC;
+  then
+    WMIC Path Win32_Battery Get BatteryStatus /Format:List | grep -q 'BatteryStatus=1'
+    return $?
+  fi
 }
 
-function battery_percentage() {
-	about 'displays battery charge as a percentage of full (100%)'
-	group 'battery'
+battery_percentage(){
+  about 'displays battery charge as a percentage of full (100%)'
+  group 'battery'
 
-	local command_output batteries
+  declare COMMAND_OUTPUT="no"
 
-	if _command_exists upower; then
-		IFS=$'\n' read -d '' -ra batteries < <(upower -e | grep -i BAT)
-		command_output="$(upower --show-info "${batteries[0]:-}" | grep percentage | grep -o '[0-9]\+' | head -1)"
-	elif _command_exists acpi; then
-		command_output=$(acpi -b | awk -F, '/,/{gsub(/ /, "", $0); gsub(/%/,"", $0); print $2}')
-	elif _command_exists pmset; then
-		command_output=$(pmset -g ps | sed -n 's/.*[[:blank:]]+*\(.*%\).*/\1/p' | grep -o '[0-9]\+' | head -1)
-	elif _command_exists ioreg; then
-		command_output=$(ioreg -n AppleSmartBattery -r | awk '$1~/Capacity/{c[$1]=$3} END{OFMT="%05.2f"; max=c["\"MaxCapacity\""]; print (max>0? 100*c["\"CurrentCapacity\""]/max: "?")}' | grep -o '[0-9]\+' | head -1)
-	elif _command_exists WMIC; then
-		command_output=$(WMIC PATH Win32_Battery Get EstimatedChargeRemaining /Format:List | grep -o '[0-9]\+' | head -1)
-	else
-		command_output="no"
-	fi
+  if _command_exists upower;
+  then
+    COMMAND_OUTPUT=$(upower --show-info $(upower --enumerate | grep -i BAT) | grep percentage | grep -o "[0-9]\+" | head -1)
+  elif _command_exists acpi;
+  then
+    COMMAND_OUTPUT=$(acpi -b | awk -F, '/,/{gsub(/ /, "", $0); gsub(/%/,"", $0); print $2}' )
+  elif _command_exists pmset;
+  then
+    COMMAND_OUTPUT=$(pmset -g ps | sed -n 's/.*[[:blank:]]+*\(.*%\).*/\1/p' | grep -o "[0-9]\+" | head -1)
+  elif _command_exists ioreg;
+  then
+    COMMAND_OUTPUT=$(ioreg -n AppleSmartBattery -r | awk '$1~/Capacity/{c[$1]=$3} END{OFMT="%05.2f"; max=c["\"MaxCapacity\""]; print (max>0? 100*c["\"CurrentCapacity\""]/max: "?")}' | grep -o "[0-9]\+" | head -1)
+  elif _command_exists WMIC;
+  then
+    COMMAND_OUTPUT=$(WMIC PATH Win32_Battery Get EstimatedChargeRemaining /Format:List | grep -o '[0-9]\+' | head -1)
+  else
+    COMMAND_OUTPUT="no"
+  fi
 
-	if [[ "${command_output}" != "no" ]]; then
-		printf "%02d" "${command_output:--1}"
-	else
-		echo "${command_output}"
-	fi
+  if [ "${COMMAND_OUTPUT}" != "no" ]; then
+    printf "%02d" "${COMMAND_OUTPUT:--1}"
+  else
+    echo "${COMMAND_OUTPUT}"
+  fi
 }
 
-function battery_charge() {
-	about 'graphical display of your battery charge'
-	group 'battery'
+battery_charge(){
+  about 'graphical display of your battery charge'
+  group 'battery'
 
-	# Full char
-	local f_c='▸'
-	# Depleted char
-	local d_c='▹'
-	local depleted_color="${normal?}"
-	local full_color="${green?}"
-	local half_color="${yellow?}"
-	local danger_color="${red?}"
-	#local battery_output="${depleted_color}${d_c}${d_c}${d_c}${d_c}${d_c}"
-	local battery_percentage
-	battery_percentage=$(battery_percentage)
+  # Full char
+  local F_C='▸'
+  # Depleted char
+  local D_C='▹'
+  local DEPLETED_COLOR="${normal}"
+  local FULL_COLOR="${green}"
+  local HALF_COLOR="${yellow}"
+  local DANGER_COLOR="${red}"
+  local BATTERY_OUTPUT="${DEPLETED_COLOR}${D_C}${D_C}${D_C}${D_C}${D_C}"
+  local BATTERY_PERC=$(battery_percentage)
 
-	case $battery_percentage in
-		no)
-			echo ""
-			;;
-		9*)
-			echo "${full_color}${f_c}${f_c}${f_c}${f_c}${f_c}${normal?}"
-			;;
-		8*)
-			echo "${full_color}${f_c}${f_c}${f_c}${f_c}${half_color}${f_c}${normal?}"
-			;;
-		7*)
-			echo "${full_color}${f_c}${f_c}${f_c}${f_c}${depleted_color}${d_c}${normal?}"
-			;;
-		6*)
-			echo "${full_color}${f_c}${f_c}${f_c}${half_color}${f_c}${depleted_color}${d_c}${normal?}"
-			;;
-		5*)
-			echo "${full_color}${f_c}${f_c}${f_c}${depleted_color}${d_c}${d_c}${normal?}"
-			;;
-		4*)
-			echo "${full_color}${f_c}${f_c}${half_color}${f_c}${depleted_color}${d_c}${d_c}${normal?}"
-			;;
-		3*)
-			echo "${full_color}${f_c}${f_c}${depleted_color}${d_c}${d_c}${d_c}${normal?}"
-			;;
-		2*)
-			echo "${full_color}${f_c}${half_color}${f_c}${depleted_color}${d_c}${d_c}${d_c}${normal?}"
-			;;
-		1*)
-			echo "${full_color}${f_c}${depleted_color}${d_c}${d_c}${d_c}${d_c}${normal?}"
-			;;
-		05)
-			echo "${danger_color}${f_c}${depleted_color}${d_c}${d_c}${d_c}${d_c}${normal?}"
-			;;
-		04)
-			echo "${danger_color}${f_c}${depleted_color}${d_c}${d_c}${d_c}${d_c}${normal?}"
-			;;
-		03)
-			echo "${danger_color}${f_c}${depleted_color}${d_c}${d_c}${d_c}${d_c}${normal?}"
-			;;
-		02)
-			echo "${danger_color}${f_c}${depleted_color}${d_c}${d_c}${d_c}${d_c}${normal?}"
-			;;
-		0*)
-			echo "${half_color}${f_c}${depleted_color}${d_c}${d_c}${d_c}${d_c}${normal?}"
-			;;
-		*)
-			echo "${danger_color}UNPLG${normal?}"
-			;;
-	esac
+  case $BATTERY_PERC in
+    no)
+      echo ""
+    ;;
+    9*)
+      echo "${FULL_COLOR}${F_C}${F_C}${F_C}${F_C}${F_C}${normal}"
+    ;;
+    8*)
+      echo "${FULL_COLOR}${F_C}${F_C}${F_C}${F_C}${HALF_COLOR}${F_C}${normal}"
+    ;;
+    7*)
+      echo "${FULL_COLOR}${F_C}${F_C}${F_C}${F_C}${DEPLETED_COLOR}${D_C}${normal}"
+    ;;
+    6*)
+      echo "${FULL_COLOR}${F_C}${F_C}${F_C}${HALF_COLOR}${F_C}${DEPLETED_COLOR}${D_C}${normal}"
+    ;;
+    5*)
+      echo "${FULL_COLOR}${F_C}${F_C}${F_C}${DEPLETED_COLOR}${D_C}${D_C}${normal}"
+    ;;
+    4*)
+      echo "${FULL_COLOR}${F_C}${F_C}${HALF_COLOR}${F_C}${DEPLETED_COLOR}${D_C}${D_C}${normal}"
+    ;;
+    3*)
+      echo "${FULL_COLOR}${F_C}${F_C}${DEPLETED_COLOR}${D_C}${D_C}${D_C}${normal}"
+    ;;
+    2*)
+      echo "${FULL_COLOR}${F_C}${HALF_COLOR}${F_C}${DEPLETED_COLOR}${D_C}${D_C}${D_C}${normal}"
+    ;;
+    1*)
+      echo "${FULL_COLOR}${F_C}${DEPLETED_COLOR}${D_C}${D_C}${D_C}${D_C}${normal}"
+    ;;
+    05)
+      echo "${DANGER_COLOR}${F_C}${DEPLETED_COLOR}${D_C}${D_C}${D_C}${D_C}${normal}"
+    ;;
+    04)
+      echo "${DANGER_COLOR}${F_C}${DEPLETED_COLOR}${D_C}${D_C}${D_C}${D_C}${normal}"
+    ;;
+    03)
+      echo "${DANGER_COLOR}${F_C}${DEPLETED_COLOR}${D_C}${D_C}${D_C}${D_C}${normal}"
+    ;;
+    02)
+      echo "${DANGER_COLOR}${F_C}${DEPLETED_COLOR}${D_C}${D_C}${D_C}${D_C}${normal}"
+    ;;
+    0*)
+      echo "${HALF_COLOR}${F_C}${DEPLETED_COLOR}${D_C}${D_C}${D_C}${D_C}${normal}"
+    ;;
+    *)
+      echo "${DANGER_COLOR}UNPLG${normal}"
+    ;;
+  esac
 }
diff --git a/plugins/available/blesh.plugin.bash b/plugins/available/blesh.plugin.bash
index 6acd19ff..7b1ce74e 100644
--- a/plugins/available/blesh.plugin.bash
+++ b/plugins/available/blesh.plugin.bash
@@ -10,7 +10,7 @@ fi
 _bash_it_ble_path=${XDG_DATA_HOME:-$HOME/.local/share}/blesh/ble.sh
 if [[ -f $_bash_it_ble_path ]]; then
 	# shellcheck disable=1090
-	source "$_bash_it_ble_path" --attach=prompt
+	source "$_bash_it_ble_path"
 else
 	_log_error "Could not find ble.sh in $_bash_it_ble_path"
 	_log_error "Please install using the following command:"
diff --git a/plugins/available/brew.plugin.bash b/plugins/available/brew.plugin.bash
new file mode 100644
index 00000000..dfeadcf2
--- /dev/null
+++ b/plugins/available/brew.plugin.bash
@@ -0,0 +1,27 @@
+# plugin for brew
+
+cite about-plugin
+about-plugin 'brew plugin for Linux'
+
+# linuxbrew
+
+if [[ -e "${HOME}/.linuxbrew/bin" ]]; then
+
+  # load plenv bin dir into path if it exists
+  pathmunge "${HOME}/.linuxbrew/bin"
+
+fi
+
+if [[ $(which brew) ]]; then
+
+  # init brew
+  #eval "$(brew shellenv)"
+
+  eval $(brew shellenv)
+  # export HOMEBREW_PREFIX="/home/ivan/developer/env/linuxbrew"
+  # export HOMEBREW_CELLAR="/home/ivan/developer/env/linuxbrew/Cellar"
+  # export HOMEBREW_REPOSITORY="/home/ivan/developer/env/linuxbrew/Homebrew"
+  # export PATH="${PATH}:/home/ivan/developer/env/linuxbrew/bin:/home/ivan/developer/env/linuxbrew/sbin"
+  # export MANPATH="/home/ivan/developer/env/linuxbrew/share/man${MANPATH+:$MANPATH}:"
+  # export INFOPATH="/home/ivan/developer/env/linuxbrew/share/info:${INFOPATH:-}"
+fi
diff --git a/plugins/available/cabal.plugin.bash b/plugins/available/cabal.plugin.bash
new file mode 100644
index 00000000..63e9f7f5
--- /dev/null
+++ b/plugins/available/cabal.plugin.bash
@@ -0,0 +1,26 @@
+cite about-plugin
+about-plugin 'load pyenv, if you are using it'
+
+export PYENV_ROOT="$HOME/.pyenv"
+pathmunge "$PYENV_ROOT/bin"
+
+[[ `which pyenv 2>/dev/null` ]] && eval "$(pyenv init - bash)"
+
+#Load pyenv virtualenv if the virtualenv plugin is installed.
+if pyenv virtualenv-init - &> /dev/null; then
+  eval "$(pyenv virtualenv-init - bash)"
+fi
+about-plugin 'Load cabal Development Kit Manager'
+# cabal
+
+if [ -d "/opt/cabal/bin" ]; then
+  export PATH=/opt/cabal/bin:$PATH
+fi
+
+if [ -d "/opt/ghc/bin" ]; then
+  export PATH=/opt/ghc/bin:$PATH
+fi
+
+if [ -d "$HOME/.cabal/bin" ]; then
+  export PATH=$HOME/.cabal/bin:$PATH
+fi
diff --git a/plugins/available/cmd-returned-notify.plugin.bash b/plugins/available/cmd-returned-notify.plugin.bash
index e6d221fa..d9be5e4e 100644
--- a/plugins/available/cmd-returned-notify.plugin.bash
+++ b/plugins/available/cmd-returned-notify.plugin.bash
@@ -2,16 +2,15 @@
 cite about-plugin
 about-plugin 'Alert (BEL) when process ends after a threshold of seconds'
 
-function precmd_return_notification() {
-	local command_start="${COMMAND_DURATION_START_SECONDS:=0}"
-	local current_time
-	current_time="$(_shell_duration_en)"
-	local -i command_duration="$((${current_time%.*} - ${command_start%.*}))"
-	if [[ "${command_duration}" -gt "${NOTIFY_IF_COMMAND_RETURNS_AFTER:-5}" ]]; then
-		printf '\a'
-	fi
-	return 0
+precmd_return_notification() {
+	export LAST_COMMAND_DURATION=$(($(date +%s) - ${LAST_COMMAND_TIME:=$(date +%s)}))
+	[[ ${LAST_COMMAND_DURATION} -gt ${NOTIFY_IF_COMMAND_RETURNS_AFTER:-5} ]] && echo -e "\a"
+	export LAST_COMMAND_TIME=
 }
 
-safe_append_prompt_command 'precmd_return_notification'
-safe_append_preexec '_command_duration_pre_exec'
+preexec_return_notification() {
+	[[ -z "${LAST_COMMAND_TIME}" ]] && LAST_COMMAND_TIME=$(date +%s)
+}
+
+precmd_functions+=(precmd_return_notification)
+preexec_functions+=(preexec_return_notification)
diff --git a/plugins/available/colors.plugin.bash b/plugins/available/colors.plugin.bash
index 73c144b8..47f55609 100644
--- a/plugins/available/colors.plugin.bash
+++ b/plugins/available/colors.plugin.bash
@@ -8,13 +8,13 @@ function __() {
 function __make_ansi() {
 	next=$1
 	shift
-	echo -e "\[\e[$("__$next" "$@")m\]"
+	echo "\[\e[$("__$next" "$@")m\]"
 }
 
 function __make_echo() {
 	next=$1
 	shift
-	echo -e "\033[$("__$next" "$@")m"
+	echo "\033[$("__$next" "$@")m"
 }
 
 function __reset() {
diff --git a/plugins/available/dart.plugin.bash b/plugins/available/dart.plugin.bash
new file mode 100644
index 00000000..0bc9910e
--- /dev/null
+++ b/plugins/available/dart.plugin.bash
@@ -0,0 +1,7 @@
+cite about-plugin
+about-plugin 'Load Dart interpreter'
+
+export PATH="$PATH":"$HOME/.pub-cache/bin"
+# if [ -e "/usr/lib/dart/bin" ]; then
+#   pathmunge "/usr/lib/dart/bin"
+# fi
diff --git a/plugins/available/dirs.plugin.bash b/plugins/available/dirs.plugin.bash
index 55d2e88a..2c1adf7a 100644
--- a/plugins/available/dirs.plugin.bash
+++ b/plugins/available/dirs.plugin.bash
@@ -1,4 +1,3 @@
-# shellcheck shell=bash
 # Directory stack navigation:
 #
 # Add to stack with: pu /path/to/directory
@@ -33,90 +32,76 @@ alias pu="pushd"
 alias po="popd"
 
 function dirs-help() {
-	about 'directory navigation alias usage'
-	group 'dirs'
-
-	echo "Directory Navigation Alias Usage"
-	echo
-	echo "Use the power of directory stacking to move"
-	echo "between several locations with ease."
-	echo
-	echo "d	: Show directory stack."
-	echo "po	: Remove current location from stack."
-	echo "pc	: Adds current location to stack."
-	echo "pu <dir>: Adds given location to stack."
-	echo "1	: Change to stack location 1."
-	echo "2	: Change to stack location 2."
-	echo "3	: Change to stack location 3."
-	echo "4	: Change to stack location 4."
-	echo "5	: Change to stack location 5."
-	echo "6	: Change to stack location 6."
-	echo "7	: Change to stack location 7."
-	echo "8	: Change to stack location 8."
-	echo "9	: Change to stack location 9."
+  about 'directory navigation alias usage'
+  group 'dirs'
+
+  echo "Directory Navigation Alias Usage"
+  echo
+  echo "Use the power of directory stacking to move"
+  echo "between several locations with ease."
+  echo
+  echo "d	: Show directory stack."
+  echo "po	: Remove current location from stack."
+  echo "pc	: Adds current location to stack."
+  echo "pu <dir>: Adds given location to stack."
+  echo "1	: Change to stack location 1."
+  echo "2	: Change to stack location 2."
+  echo "3	: Change to stack location 3."
+  echo "4	: Change to stack location 4."
+  echo "5	: Change to stack location 5."
+  echo "6	: Change to stack location 6."
+  echo "7	: Change to stack location 7."
+  echo "8	: Change to stack location 8."
+  echo "9	: Change to stack location 9."
 }
 
 # Add bookmarking functionality
 # Usage:
 
-: "${BASH_IT_DIRS_BKS:=${XDG_STATE_HOME:-${HOME}/.local/state}/bash_it/dirs}"
-if [[ -f "${BASH_IT_DIRS_BKS?}" ]]; then
-	# shellcheck disable=SC1090
-	source "${BASH_IT_DIRS_BKS?}"
+if [ ! -f ~/.dirs ]; then  # if doesn't exist, create it
+    touch ~/.dirs
 else
-	mkdir -p "${BASH_IT_DIRS_BKS%/*}"
-	if [[ -f ~/.dirs ]]; then
-		mv -vn ~/.dirs "${BASH_IT_DIRS_BKS?}"
-		# shellcheck disable=SC1090
-		source "${BASH_IT_DIRS_BKS?}"
-	else
-		touch "${BASH_IT_DIRS_BKS?}"
-	fi
+    source ~/.dirs
 fi
 
-alias L='cat "${BASH_IT_DIRS_BKS?}"'
+alias L='cat ~/.dirs'
 
 # Goes to destination dir, otherwise stay in the dir
-function G() {
-	about 'goes to destination dir'
-	param '1: directory'
-	example '$ G ..'
-	group 'dirs'
+G () {
+    about 'goes to destination dir'
+    param '1: directory'
+    example '$ G ..'
+    group 'dirs'
 
-	cd "${1:-${PWD}}" || return
+    cd "${1:-${PWD}}" ;
 }
 
-function S() {
-	about 'save a bookmark'
-	param '1: bookmark name'
-	example '$ S mybkmrk'
-	group 'dirs'
-
-	[[ $# -eq 1 ]] || {
-		echo "${FUNCNAME[0]} function requires 1 argument"
-		return 1
-	}
-
-	sed "/$1/d" "${BASH_IT_DIRS_BKS?}" > "${BASH_IT_DIRS_BKS?}.new"
-	command mv "${BASH_IT_DIRS_BKS?}.new" "${BASH_IT_DIRS_BKS?}"
-	echo "$1"=\""${PWD}"\" >> "${BASH_IT_DIRS_BKS?}"
-	# shellcheck disable=SC1090
-	source "${BASH_IT_DIRS_BKS?}"
+S () {
+    about 'save a bookmark'
+    param '1: bookmark name'
+    example '$ S mybkmrk'
+    group 'dirs'
+
+    [[ $# -eq 1 ]] || { echo "${FUNCNAME[0]} function requires 1 argument"; return 1; }
+
+    sed "/$@/d" ~/.dirs > ~/.dirs1;
+    \mv ~/.dirs1 ~/.dirs;
+    echo "$@"=\""${PWD}"\" >> ~/.dirs;
+    source ~/.dirs ;
 }
 
-function R() {
-	about 'remove a bookmark'
-	param '1: bookmark name'
-	example '$ R mybkmrk'
-	group 'dirs'
+R () {
+    about 'remove a bookmark'
+    param '1: bookmark name'
+    example '$ R mybkmrk'
+    group 'dirs'
 
-	[[ $# -eq 1 ]] || {
-		echo "${FUNCNAME[0]} function requires 1 argument"
-		return 1
-	}
+    [[ $# -eq 1 ]] || { echo "${FUNCNAME[0]} function requires 1 argument"; return 1; }
 
-	sed "/$1/d" "${BASH_IT_DIRS_BKS?}" > "${BASH_IT_DIRS_BKS?}.new"
-	command mv "${BASH_IT_DIRS_BKS?}.new" "${BASH_IT_DIRS_BKS?}"
+    sed "/$@/d" ~/.dirs > ~/.dirs1;
+    \mv ~/.dirs1 ~/.dirs;
 }
 
-alias U='source "${BASH_IT_DIRS_BKS?}"' # Update bookmark stack
+alias U='source ~/.dirs' 	# Update bookmark stack
+# Set the Bash option so that no '$' is required when using the above facility
+shopt -s cdable_vars
diff --git a/plugins/available/fzf.plugin.bash b/plugins/available/fzf.plugin.bash
index 21182ac2..c4f5ea84 100644
--- a/plugins/available/fzf.plugin.bash
+++ b/plugins/available/fzf.plugin.bash
@@ -4,15 +4,14 @@
 cite about-plugin
 about-plugin 'load fzf, if you are using it'
 
+_command_exists fzf || return
+
 if [ -r ~/.fzf.bash ] ; then
   source ~/.fzf.bash
 elif [ -r "${XDG_CONFIG_HOME:-$HOME/.config}"/fzf/fzf.bash ] ; then
   source "${XDG_CONFIG_HOME:-$HOME/.config}"/fzf/fzf.bash
 fi
 
-# No need to continue if the command is not present
-_command_exists fzf || return
-
 if [ -z ${FZF_DEFAULT_COMMAND+x}  ] && _command_exists fd ; then
   export FZF_DEFAULT_COMMAND='fd --type f'
 fi
diff --git a/plugins/available/gh.plugin.bash b/plugins/available/gh.plugin.bash
new file mode 100644
index 00000000..fb429317
--- /dev/null
+++ b/plugins/available/gh.plugin.bash
@@ -0,0 +1,4 @@
+cite about-plugin
+about-plugin 'load gh, if you are using it (DEPRECATED, use hub instead)'
+
+command -v gh 2> /dev/null && eval "$(gh alias -s)"
diff --git a/plugins/available/ghcup.plugin.bash b/plugins/available/ghcup.plugin.bash
new file mode 100644
index 00000000..450c9863
--- /dev/null
+++ b/plugins/available/ghcup.plugin.bash
@@ -0,0 +1,10 @@
+cite about-plugin
+about-plugin 'load ghcup, if you are using it'
+
+export GHCUP_ROOT="$HOME/.ghcup"
+pathmunge "$GHCUP_ROOT/bin"
+
+if [ -f "/home/ivan/.ghcup/env" ]; then
+    source "/home/ivan/.ghcup/env"
+fi
+
diff --git a/plugins/available/gif.plugin.bash b/plugins/available/gif.plugin.bash
index a04ff5c7..49c36e4c 100644
--- a/plugins/available/gif.plugin.bash
+++ b/plugins/available/gif.plugin.bash
@@ -1,4 +1,4 @@
-# shellcheck shell=bash
+cite about-plugin
 about-plugin 'video to gif, gif to WebM helper functions'
 
 # Based loosely on:
@@ -12,310 +12,287 @@ about-plugin 'video to gif, gif to WebM helper functions'
 # Optional: if lossy is not important, Ubuntu has gifsicle packaged for apt-get, instead of giflossy
 # Optional: gifski (from `brew install gifski` or github.com/ImageOptim/gifski)
 #           for high quality huge files.
-function v2gif() {
-	about 'Converts a .mov/.avi/.mp4 file into an into an animated GIF.'
-	group 'gif'
-	param '1: MOV/AVI/MP4 file name(s)'
-	param '2: -w <num> ; Optional: max width in pixels'
-	param '3: -l <num> ; Optional: extra lossy level for smaller files (80-200 make sense, needs giflossy instead of gifsicle)'
-	param '4: -h       ; Optional: high quality using gifski (installed seperately) - overrides "--lossy" above!'
-	param '5: -d       ; Optional: delete the original video file if succeeded'
-	param '6: -t       ; Optional: Tag the result with quality stamp for comparison use'
-	param '7: -f <num> ; Optional: Change number of frames per second (default 10 or original FPS if mediainfo installed)'
-	param '8: -a <num> ; Optional: Alert if resulting file is over <num> kilobytes (default is 5000, 0 turns off)'
-	param '9: -m       ; Optional: Also create a WebM file (will one day replace GIF, Smaller and higher quality than mp4)'
-	example '$ v2gif foo.mov'
-	example '$ v2gif foo.mov -w 600'
-	example '$ v2gif -l 100 -d *.mp4'
-	example '$ v2gif -dh *.avi'
-	example '$ v2gif -thw 600 *.avi *.mov'
-
-	local convert ffmpeg mediainfo gifsicle getopt args gifski out_size
-
-	convert="$(type -p convert)"
-	[[ -x "$convert" ]] || {
-		echo "No convert found!"
-		return 2
-	}
-	ffmpeg="$(type -p ffmpeg)"
-	[[ -x "$ffmpeg" ]] || {
-		echo "No ffmpeg found!"
-		return 2
-	}
-	mediainfo="$(type -p mediainfo)"
-	[[ -x "$mediainfo" ]] || {
-		echo "No mediainfo found!"
-		return 2
-	}
-	gifsicle="$(type -p gifsicle)"
-	[[ -x "$gifsicle" ]] || {
-		echo "No gifsicle found!"
-		return 2
-	}
-	getopt="$(type -p getopt)"
-
-	if [[ "$OSTYPE" == "darwin"* ]]; then
-		# Getopt on BSD is incompatible with GNU
-		getopt=/usr/local/opt/gnu-getopt/bin/getopt
-		[[ -x "$getopt" ]] || {
-			echo "No GNU-getopt found!"
-			return 2
-		}
-	fi
-
-	# Parse the options
-	args=$("$getopt" -l "alert:" -l "lossy:" -l "width:" -l del,delete -l high -l tag -l "fps:" -l webm -o "a:l:w:f:dhmt" -- "$@") || {
-		echo 'Terminating...' >&2
-		return 2
-	}
-
-	eval set -- "$args"
-	local use_gifski=""
-	local opt_del_after=""
-	local maxsize=""
-	local lossiness=""
-	local maxwidthski=""
-	local giftagopt=""
-	local giftag=""
-	local defaultfps=10
-	local infps=""
-	local fps=""
-	local make_webm=""
-	local alert=5000
-	while [[ $# -ge 1 ]]; do
-		case "$1" in
-			--)
-				# No more options left.
-				shift
-				break
-				;;
-			-d | --del | --delete)
-				# Delete after
-				opt_del_after="true"
-				shift
-				;;
-			-h | --high)
-				#High Quality, use gifski
-				gifski="$(type -p gifski)"
-				[[ -x "$gifski" ]] || {
-					echo "No gifski found!"
-					return 2
-				}
-				use_gifski=true
-				giftag="${giftag}-h"
-				shift
-				;;
-			-w | --width)
-				maxsize="-vf scale=$2:-1"
-				maxwidthski="-W $2"
-				giftag="${giftag}-w$2"
-				shift 2
-				;;
-			-t | --tag)
-				# mark with a quality tag
-				giftagopt="true"
-				shift
-				;;
-			-l | --lossy)
-				# Use giflossy parameter
-				lossiness="--lossy=$2"
-				giftag="${giftag}-l$2"
-				shift 2
-				;;
-			-f | --fps)
-				# select fps
-				infps="$2"
-				giftag="${giftag}-f$2"
-				shift 2
-				;;
-			-a | --alert)
-				# set size alert
-				alert="$2"
-				shift 2
-				;;
-			-m | --webm)
-				# set size alert
-				make_webm="true"
-				shift
-				;;
-		esac
-	done
-
-	if [[ -z "$*" ]]; then
-		echo "$(tput setaf 1)No input files given. Example: v2gif file [file...] [-w <max width (pixels)>] [-l <lossy level>] $(tput sgr 0)"
-		echo "-d/--del/--delete Delete original vid if done suceessfully (and file not over the size limit)"
-		echo "-h/--high         High Quality - use Gifski instead of gifsicle"
-		echo "-w/--width N      Lock maximum gif width to N pixels, resize if necessary"
-		echo "-t/--tag          Add a tag to the output gif describing the options used (useful for comparing several options)"
-		echo "-l/--lossy N      Use the Giflossy parameter for gifsicle (If your version supports it)"
-		echo "-f/--fps N        Override autodetection of incoming vid FPS (useful for downsampling)"
-		echo "-a/--alert N      Alert if over N kilobytes (Defaults to 5000)"
-		echo "-m/--webm         Also create a webm file"
-		return 1
-	fi
-
-	# Prepare the quality tag if requested.
-	[[ -z "$giftag" ]] && giftag="-default"
-	[[ -z "$giftagopt" ]] && giftag=""
-
-	for file; do
-
-		local output_file="${file%.*}${giftag}.gif"
-		local del_after=$opt_del_after
-
-		if [[ -n "$make_webm" ]]; then
-			$ffmpeg -loglevel panic -i "$file" \
-				-c:v libvpx -crf 4 -threads 0 -an -b:v 2M -auto-alt-ref 0 \
-				-quality best -loop 0 "${file%.*}.webm" || return 2
-		fi
-
-		# Set FPS to match the video if possible, otherwise fallback to default.
-		if [[ -n "$infps" ]]; then
-			fps=$infps
-		else
-			fps=$defaultfps
-			if [[ -x "$mediainfo" ]]; then
-				fps=$($mediainfo "$file" | grep "Frame rate   " | sed 's/.*: \([0-9.]\+\) .*/\1/' | head -1)
-				[[ -z "$fps" ]] && fps=$($mediainfo "$file" | grep "Minimum frame rate" | sed 's/.*: \([0-9.]\+\) .*/\1/' | head -1)
-			fi
-		fi
-
-		echo "$(tput setaf 2)Creating '$output_file' at $fps FPS ...$(tput sgr 0)"
-
-		if [[ "$use_gifski" = "true" ]]; then
-			# I trust @pornel to do his own resizing optimization choices
-			$ffmpeg -loglevel panic -i "$file" -r "$fps" -vcodec png v2gif-tmp-%05d.png \
-				&& $gifski v2gif-tmp-*.png "$maxwidthski" --fps "$(printf "%.0f" "$fps")" -o "$output_file" || return 2
-		else
-			$ffmpeg -loglevel panic -i "$file" "$maxsize" -r "$fps" -vcodec png v2gif-tmp-%05d.png \
-				&& $convert +dither -layers Optimize v2gif-tmp-*.png GIF:- \
-				| $gifsicle "$lossiness" --no-warnings --colors 256 --delay="$(echo "100/$fps" | bc)" --loop --optimize=3 --multifile - > "$output_file" || return 2
-		fi
-
-		rm v2gif-tmp-*.png
-
-		# Checking if the file is bigger than Twitter likes and warn
-		if [[ $alert -gt 0 ]]; then
-			out_size=$(wc --bytes < "$output_file")
-			if [[ $out_size -gt $((alert * 1000)) ]]; then
-				echo "$(tput setaf 3)Warning: '$output_file' is $((out_size / 1000))kb.$(tput sgr 0)"
-				[[ "$del_after" == "true" ]] && echo "$(tput setaf 3)Warning: Keeping '$file' even though --del requested.$(tput sgr 0)"
-				del_after=""
-			fi
-		fi
-
-		[[ "$del_after" = "true" ]] && rm "$file"
-
-	done
-
-	echo "$(tput setaf 2)Done.$(tput sgr 0)"
+function v2gif {
+  about 'Converts a .mov/.avi/.mp4 file into an into an animated GIF.'
+  group 'gif'
+  param '1: MOV/AVI/MP4 file name(s)'
+  param '2: -w <num> ; Optional: max width in pixels'
+  param '3: -l <num> ; Optional: extra lossy level for smaller files (80-200 make sense, needs giflossy instead of gifsicle)'
+  param '4: -h       ; Optional: high quality using gifski (installed seperately) - overrides "--lossy" above!'
+  param '5: -d       ; Optional: delete the original video file if succeeded'
+  param '6: -t       ; Optional: Tag the result with quality stamp for comparison use'
+  param '7: -f <num> ; Optional: Change number of frames per second (default 10 or original FPS if mediainfo installed)'
+  param '8: -a <num> ; Optional: Alert if resulting file is over <num> kilobytes (default is 5000, 0 turns off)'
+  param '9: -m       ; Optional: Also create a WebM file (will one day replace GIF, Smaller and higher quality than mp4)'
+  example '$ v2gif foo.mov'
+  example '$ v2gif foo.mov -w 600'
+  example '$ v2gif -l 100 -d *.mp4'
+  example '$ v2gif -dh *.avi'
+  example '$ v2gif -thw 600 *.avi *.mov'
+
+  local convert=$(which convert)     ; [[ -x "$convert" ]]   || { echo "No convert found!" ; return 2 ;}
+  local ffmpeg=$(which ffmpeg)       ; [[ -x "$ffmpeg" ]]    || { echo "No ffmpeg found!" ; return 2 ;}
+  local mediainfo=$(which mediainfo) ; [[ -x "$mediainfo" ]] || { echo "No mediainfo found!" ; return 2 ;}
+  local gifsicle=$(which gifsicle)   ; [[ -x "$gifsicle" ]]  || { echo "No gifsicle found!" ; return 2 ;}
+  local getopt=$(which getopt)
+
+  if [[ "$OSTYPE" == "darwin"* ]] ; then
+  # Getopt on BSD is incompatible with GNU
+    getopt=/usr/local/opt/gnu-getopt/bin/getopt
+    [[ -x "$getopt" ]] || { echo "No GNU-getopt found!" ; return 2 ;}
+  fi
+
+  # Parse the options
+  local args=$($getopt -l "alert:" -l "lossy:" -l "width:" -l del,delete -l high -l tag -l "fps:" -l webm -o "a:l:w:f:dhmt" -- "$@")
+
+  if [ $? -ne 0 ]; then
+    echo 'Terminating...' >&2
+    return 2
+  fi
+
+  eval set -- "$args"
+  local use_gifski=""
+  local opt_del_after=""
+  local maxsize=""
+  local lossiness=""
+  local maxwidthski=""
+  local giftagopt=""
+  local giftag=""
+  local defaultfps=10
+  local infps=""
+  local fps=""
+  local make_webm=""
+  local alert=5000
+  while [ $# -ge 1 ]; do
+    case "$1" in
+      --)
+        # No more options left.
+        shift
+        break
+        ;;
+      -d|--del|--delete)
+        # Delete after
+        opt_del_after="true"
+        shift
+        ;;
+      -h|--high)
+        #High Quality, use gifski
+        local gifski=$(which gifski) ; [[ -x "$gifski" ]] || { echo "No gifski found!" ; return 2 ; }
+        use_gifski=true
+        giftag="${giftag}-h"
+        shift
+        ;;
+      -w|--width)
+        maxsize="-vf scale=$2:-1"
+        maxwidthski="-W $2"
+        giftag="${giftag}-w$2"
+        shift 2
+        ;;
+      -t|--tag)
+        # mark with a quality tag
+        giftagopt="true"
+        shift
+        ;;
+      -l|--lossy)
+        # Use giflossy parameter
+        lossiness="--lossy=$2"
+        giftag="${giftag}-l$2"
+        shift 2
+        ;;
+      -f|--fps)
+        # select fps
+        infps="$2"
+        giftag="${giftag}-f$2"
+        shift 2
+        ;;
+      -a|--alert)
+        # set size alert
+        alert="$2"
+        shift 2
+        ;;
+      -m|--webm)
+        # set size alert
+        make_webm="true"
+        shift
+        ;;
+    esac
+  done
+
+  if [[ -z "$*" ]]; then
+    echo "$(tput setaf 1)No input files given. Example: v2gif file [file...] [-w <max width (pixels)>] [-l <lossy level>] $(tput sgr 0)"
+    echo "-d/--del/--delete Delete original vid if done suceessfully (and file not over the size limit)"
+    echo "-h/--high         High Quality - use Gifski instead of gifsicle"
+    echo "-w/--width N      Lock maximum gif width to N pixels, resize if necessary"
+    echo "-t/--tag          Add a tag to the output gif describing the options used (useful for comparing several options)"
+    echo "-l/--lossy N      Use the Giflossy parameter for gifsicle (If your version supports it)"
+    echo "-f/--fps N        Override autodetection of incoming vid FPS (useful for downsampling)"
+    echo "-a/--alert N      Alert if over N kilobytes (Defaults to 5000)"
+    echo "-m/--webm         Also create a webm file"
+    return 1
+  fi
+
+  # Prepare the quality tag if requested.
+  [[ -z "$giftag" ]] && giftag="-default"
+  [[ -z "$giftagopt" ]] && giftag=""
+
+  for file ; do
+
+    local output_file="${file%.*}${giftag}.gif"
+    local del_after=$opt_del_after
+
+    if [[ "$make_webm" ]] ; then
+      $ffmpeg -loglevel panic -i "$file" \
+        -c:v libvpx -crf 4 -threads 0 -an -b:v 2M -auto-alt-ref 0 \
+        -quality best -loop 0 "${file%.*}.webm" || return 2
+    fi
+
+    # Set FPS to match the video if possible, otherwise fallback to default.
+    if [[ "$infps" ]] ; then
+      fps=$infps
+    else
+      fps=$defaultfps
+      if [[ -x $mediainfo ]] ; then
+        fps=$($mediainfo "$file" | grep "Frame rate   " |sed 's/.*: \([0-9.]\+\) .*/\1/' | head -1)
+        [[ -z "$fps" ]] && fps=$($mediainfo "$file" | grep "Minimum frame rate" |sed 's/.*: \([0-9.]\+\) .*/\1/' | head -1)
+      fi
+    fi
+
+    echo "$(tput setaf 2)Creating '$output_file' at $fps FPS ...$(tput sgr 0)"
+
+    if [[ "$use_gifski" = "true" ]] ; then
+      # I trust @pornel to do his own resizing optimization choices
+      $ffmpeg -loglevel panic -i "$file" -r $fps -vcodec png v2gif-tmp-%05d.png && \
+        $gifski v2gif-tmp-*.png $maxwidthski --fps $(printf "%.0f" $fps) -o "$output_file" || return 2
+    else
+      $ffmpeg -loglevel panic -i "$file" $maxsize -r $fps -vcodec png v2gif-tmp-%05d.png && \
+        $convert +dither -layers Optimize v2gif-tmp-*.png GIF:- | \
+        $gifsicle $lossiness --no-warnings --colors 256 --delay=$(echo "100/$fps"|bc) --loop --optimize=3 --multifile - > "$output_file" || return 2
+    fi
+
+    rm v2gif-tmp-*.png
+
+    # Checking if the file is bigger than Twitter likes and warn
+    if [[ $alert -gt 0 ]] ; then
+      local out_size=$(wc --bytes < "$output_file")
+      if [[ $out_size -gt $(( alert * 1000 )) ]] ; then
+        echo "$(tput setaf 3)Warning: '$output_file' is $((out_size/1000))kb.$(tput sgr 0)"
+        [[ "$del_after" == "true" ]] && echo "$(tput setaf 3)Warning: Keeping '$file' even though --del requested.$(tput sgr 0)"
+        del_after=""
+      fi
+    fi
+
+    [[ "$del_after" = "true" ]] && rm "$file"
+
+  done
+
+  echo "$(tput setaf 2)Done.$(tput sgr 0)"
 }
 
 function any2webm() {
-	about 'Converts an movies and Animated GIF files into an into a modern quality WebM video.'
-	group 'gif'
-	param '1: GIF/video file name(s)'
-	param '2: -s <WxH> ; Optional: set <W>idth and <H>eight in pixels'
-	param '3: -d       ; Optional: delete the original file if succeeded'
-	param '4: -t       ; Optional: Tag the result with quality stamp for comparison use'
-	param '5: -f <num> ; Optional: Change number of frames per second'
-	param '6: -b <num> ; Optional: Set Bandwidth (quality/size of resulting file), Defaults to 2M (bits/sec, accepts fractions)"'
-	param '7: -a <num> ; Optional: Alert if resulting file is over <num> kilobytes (default is 5000, 0 turns off)'
-	example '$ any2webm foo.gif'
-	example '$ any2webm *.mov -b 1.5M -s 600x480'
-
-	local args out_size
-
-	# Parse the options
-	args=$(getopt -l alert -l "bandwidth:" -l "width:" -l del,delete -l tag -l "fps:" -l webm -o "a:b:w:f:dt" -- "$@") || {
-		echo 'Terminating...' >&2
-		return 2
-	}
-
-	eval set -- "$args"
-	local opt_del_after=""
-	local size=""
-	local webmtagopt=""
-	local webmtag=""
-	local defaultfps=10
-	local fps=""
-	local bandwidth="2M"
-	local alert=5000
-	while [[ $# -ge 1 ]]; do
-		case "$1" in
-			--)
-				# No more options left.
-				shift
-				break
-				;;
-			-d | --del | --delete)
-				# Delete after
-				opt_del_after="true"
-				shift
-				;;
-			-s | --size)
-				size="-s $2"
-				webmtag="${webmtag}-s$2"
-				shift 2
-				;;
-			-t | --tag)
-				# mark with a quality tag
-				webmtagopt="true"
-				shift
-				;;
-			-f | --fps)
-				# select fps
-				fps="-r $2"
-				webmtag="${webmtag}-f$2"
-				shift 2
-				;;
-			-b | --bandwidth)
-				# select bandwidth
-				bandwidth="$2"
-				webmtag="${webmtag}-b$2"
-				shift 2
-				;;
-			-a | --alert)
-				# set size alert
-				alert="$2"
-				shift 2
-				;;
-		esac
-	done
-
-	if [[ -z "$*" ]]; then
-		echo "$(tput setaf 1)No input files given. Example: any2webm file [file...] [-w <max width (pixels)>] < $(tput sgr 0)"
-		return 1
-	fi
-
-	# Prepare the quality tag if requested.
-	[[ -z "$webmtag" ]] && webmtag="-default"
-	[[ -z "$webmtagopt" ]] && webmtag=""
-
-	for file; do
-
-		local output_file="${file%.*}${webmtag}.webm"
-		local del_after=$opt_del_after
-
-		echo "$(tput setaf 2)Creating '$output_file' ...$(tput sgr 0)"
-
-		$ffmpeg -loglevel panic -i "$file" \
-			-c:v libvpx -crf 4 -threads 0 -an -b:v "$bandwidth" -auto-alt-ref 0 \
-			-quality best "$fps" "$size" -loop 0 -pix_fmt yuva420p "$output_file" || return 2
-
-		# Checking if the file is bigger than Twitter likes and warn
-		if [[ $alert -gt 0 ]]; then
-			out_size=$(wc --bytes < "$output_file")
-			if [[ $out_size -gt $((alert * 1000)) ]]; then
-				echo "$(tput setaf 3)Warning: '$output_file' is $((out_size / 1000))kb.$(tput sgr 0)"
-				[[ "$del_after" == "true" ]] && echo "$(tput setaf 3)Warning: Keeping '$file' even though --del requested.$(tput sgr 0)"
-				del_after=""
-			fi
-		fi
-
-		[[ "$del_after" = "true" ]] && rm "$file"
-
-	done
-
-	echo "$(tput setaf 2)Done.$(tput sgr 0)"
+  about 'Converts an movies and Animated GIF files into an into a modern quality WebM video.'
+  group 'gif'
+  param '1: GIF/video file name(s)'
+  param '2: -s <WxH> ; Optional: set <W>idth and <H>eight in pixels'
+  param '3: -d       ; Optional: delete the original file if succeeded'
+  param '4: -t       ; Optional: Tag the result with quality stamp for comparison use'
+  param '5: -f <num> ; Optional: Change number of frames per second'
+  param '6: -b <num> ; Optional: Set Bandwidth (quality/size of resulting file), Defaults to 2M (bits/sec, accepts fractions)"'
+  param '7: -a <num> ; Optional: Alert if resulting file is over <num> kilobytes (default is 5000, 0 turns off)'
+  example '$ any2webm foo.gif'
+  example '$ any2webm *.mov -b 1.5M -s 600x480'
+
+  # Parse the options
+  local args=$(getopt -l alert -l "bandwidth:" -l "width:" -l del,delete -l tag -l "fps:" -l webm -o "a:b:w:f:dt" -- "$@")
+
+  if [ $? -ne 0 ]; then
+    echo 'Terminating...' >&2
+    return 2
+  fi
+
+  eval set -- "$args"
+  local opt_del_after=""
+  local size=""
+  local webmtagopt=""
+  local webmtag=""
+  local defaultfps=10
+  local fps=""
+  local bandwidth="2M"
+  local alert=5000
+  while [ $# -ge 1 ]; do
+    case "$1" in
+      --)
+        # No more options left.
+        shift
+        break
+        ;;
+      -d|--del|--delete)
+        # Delete after
+        opt_del_after="true"
+        shift
+        ;;
+      -s|--size)
+        size="-s $2"
+        webmtag="${webmtag}-s$2"
+        shift 2
+        ;;
+      -t|--tag)
+        # mark with a quality tag
+        webmtagopt="true"
+        shift
+        ;;
+      -f|--fps)
+        # select fps
+        fps="-r $2"
+        webmtag="${webmtag}-f$2"
+        shift 2
+        ;;
+      -b|--bandwidth)
+        # select bandwidth
+        bandwidth="$2"
+        webmtag="${webmtag}-b$2"
+        shift 2
+        ;;
+      -a|--alert)
+        # set size alert
+        alert="$2"
+        shift 2
+        ;;
+    esac
+  done
+
+  if [[ -z "$*" ]]; then
+    echo "$(tput setaf 1)No input files given. Example: any2webm file [file...] [-w <max width (pixels)>] < $(tput sgr 0)"
+    return 1
+  fi
+
+  # Prepare the quality tag if requested.
+  [[ -z "$webmtag" ]] && webmtag="-default"
+  [[ -z "$webmtagopt" ]] && webmtag=""
+
+  for file ; do
+
+    local output_file="${file%.*}${webmtag}.webm"
+    local del_after=$opt_del_after
+
+    echo "$(tput setaf 2)Creating '$output_file' ...$(tput sgr 0)"
+
+    $ffmpeg -loglevel panic -i "$file" \
+      -c:v libvpx -crf 4 -threads 0 -an -b:v $bandwidth -auto-alt-ref 0 \
+      -quality best $fps $size -loop 0 -pix_fmt yuva420p "$output_file" || return 2
+
+    # Checking if the file is bigger than Twitter likes and warn
+    if [[ $alert -gt 0 ]] ; then
+      local out_size=$(wc --bytes < "$output_file")
+      if [[ $out_size -gt $(( alert * 1000 )) ]] ; then
+        echo "$(tput setaf 3)Warning: '$output_file' is $((out_size/1000))kb.$(tput sgr 0)"
+        [[ "$del_after" == "true" ]] && echo "$(tput setaf 3)Warning: Keeping '$file' even though --del requested.$(tput sgr 0)"
+        del_after=""
+      fi
+    fi
+
+    [[ "$del_after" = "true" ]] && rm "$file"
+
+  done
+
+  echo "$(tput setaf 2)Done.$(tput sgr 0)"
 }
diff --git a/plugins/available/git-subrepo.plugin.bash b/plugins/available/git-subrepo.plugin.bash
index 6eb8d7c4..085a69b4 100644
--- a/plugins/available/git-subrepo.plugin.bash
+++ b/plugins/available/git-subrepo.plugin.bash
@@ -1,7 +1,6 @@
-# shellcheck shell=bash
+# Load git-subrepo if you are using it, and initialize completions
+
+cite about-plugin
 about-plugin 'load git-subrepo if you are using it, and initialize completions'
 
-if [[ -s "${GIT_SUBREPO_ROOT:=$HOME/.git-subrepo}/init" ]]; then
-	# shellcheck disable=SC1091
-	source "$GIT_SUBREPO_ROOT/init"
-fi
+[[ -e "${GIT_SUBREPO_ROOT:=~/.git-subrepo}/init" ]] && source "$GIT_SUBREPO_ROOT/init"
diff --git a/plugins/available/goenv.plugin.bash b/plugins/available/goenv.plugin.bash
index 17e4a0ff..daa320e5 100644
--- a/plugins/available/goenv.plugin.bash
+++ b/plugins/available/goenv.plugin.bash
@@ -24,6 +24,10 @@ if ! _command_exists goenv && [[ -x "$GOENV_ROOT/bin/goenv" ]]; then
 	pathmunge "$GOENV_ROOT/bin"
 fi
 
+if test -d "$GOPATH/bin"; then
+    pathmunge "$GOPATH/bin"
+fi
+
 # Initialize goenv
 eval "$(goenv init - bash)"
 
diff --git a/plugins/available/gradle.plugin.bash b/plugins/available/gradle.plugin.bash
index 8dec1313..59050aee 100644
--- a/plugins/available/gradle.plugin.bash
+++ b/plugins/available/gradle.plugin.bash
@@ -1,12 +1,27 @@
 cite about-plugin
 about-plugin 'Add a gw command to use gradle wrapper if present, else use system gradle'
 
+v=7.0
+if [ -d "/opt/gradle/gradle-$v" ]; then
+  GRADLE_HOME=/opt/gradle/gradle-$v
+  export PATH=$PATH:$GRADLE_HOME/bin
+fi
+
 function gw() {
   local file="gradlew"
-  local result
+  local curr_path="${PWD}"
+  local result="gradle"
 
-  result="$(_bash-it-find-in-ancestor "${file}")"
+  # Search recursively upwards for file.
+  until [[ "${curr_path}" == "/" ]]; do
+    if [[ -e "${curr_path}/${file}" ]]; then
+      result="${curr_path}/${file}"
+      break
+    else
+      curr_path=$(dirname "${curr_path}")
+    fi
+  done
 
   # Call gradle
-  "${result:-gradle}" $*
+  "${result}" $*
 }
diff --git a/plugins/available/groovy.plugin.bash b/plugins/available/groovy.plugin.bash
new file mode 100644
index 00000000..4d5b3dc8
--- /dev/null
+++ b/plugins/available/groovy.plugin.bash
@@ -0,0 +1,10 @@
+cite about-plugin
+about-plugin 'enable groovy'
+
+# groovy
+if [ -d "/opt/groovy" ]; then
+  v=3.0.7
+  export GROOVY_HOME="/opt/groovy/groovy-${v}"
+  export PATH="$PATH:${GROOVY_HOME}/bin"
+fi
+
diff --git a/plugins/available/history-search.plugin.bash b/plugins/available/history-search.plugin.bash
index 96941993..ea02eb74 100644
--- a/plugins/available/history-search.plugin.bash
+++ b/plugins/available/history-search.plugin.bash
@@ -1,4 +1,5 @@
 # shellcheck shell=bash
+cite about-plugin
 about-plugin 'search history using the prefix already entered'
 
 # enter a few characters and press UpArrow/DownArrow
diff --git a/plugins/available/history-substring-search.plugin.bash b/plugins/available/history-substring-search.plugin.bash
index dde32720..e0e37f43 100644
--- a/plugins/available/history-substring-search.plugin.bash
+++ b/plugins/available/history-substring-search.plugin.bash
@@ -1,4 +1,5 @@
 # shellcheck shell=bash
+cite about-plugin
 about-plugin 'search history using the substring already entered'
 
 # enter a few characters and press UpArrow/DownArrow
diff --git a/plugins/available/history.plugin.bash b/plugins/available/history.plugin.bash
index d9e930c3..08ca8de6 100644
--- a/plugins/available/history.plugin.bash
+++ b/plugins/available/history.plugin.bash
@@ -1,26 +1,29 @@
 # shellcheck shell=bash
+cite about-plugin
 about-plugin 'improve history handling with sane defaults'
 
-# Append the history list to the file named by the value of the HISTFILE
-# variable when the shell exits, rather than overwriting the file.
+# append to bash_history if Terminal.app quits
 shopt -s histappend
 
-# 'ignorespace': don't save command lines which begin with a space to history
-# 'erasedups' (alternative 'ignoredups'): don't save duplicates to history
-# 'autoshare': automatically share history between multiple running shells
-: "${HISTCONTROL:=ignorespace:erasedups:autoshare}"
+# erase duplicates; alternative option: export HISTCONTROL=ignoredups
+export HISTCONTROL=${HISTCONTROL:-ignorespace:erasedups}
 
 # resize history to 100x the default (500)
-: "${HISTSIZE:=50000}"
+export HISTSIZE=${HISTSIZE:-50000}
 
-function top-history() {
+top-history() {
 	about 'print the name and count of the most commonly run tools'
 
-	# - Make sure formatting doesn't interfer with our parsing
-	# - Use awk to count how many times the first command on each line has been called
-	# - Truncate to 10 lines
-	# - Print in column format
-	HISTTIMEFORMAT='' history \
+	if [[ -n $HISTTIMEFORMAT ]]; then
+		# To parse history we need a predictable format, which HISTTIMEFORMAT
+		# gets in the way of. So we unset it and set a trap to guarantee the
+		# user's environment returns to normal even if the pipeline below fails.
+		# shellcheck disable=SC2064
+		trap "export HISTTIMEFORMAT='$HISTTIMEFORMAT'" RETURN
+		unset HISTTIMEFORMAT
+	fi
+
+	history \
 		| awk '{
 				a[$2]++
 			}END{
diff --git a/plugins/available/java.plugin.bash b/plugins/available/java.plugin.bash
index 2a80a99a..98e46247 100644
--- a/plugins/available/java.plugin.bash
+++ b/plugins/available/java.plugin.bash
@@ -1,11 +1,11 @@
-# shellcheck shell=bash
+cite about-plugin
 about-plugin 'Java and JAR helper functions'
 
 function jar_manifest {
-	about "extracts the specified JAR file's MANIFEST file and prints it to stdout"
-	group 'java'
-	param '1: JAR file to extract the MANIFEST from'
-	example 'jar_manifest lib/foo.jar'
+  about "extracts the specified JAR file's MANIFEST file and prints it to stdout"
+  group 'java'
+  param '1: JAR file to extract the MANIFEST from'
+  example 'jar_manifest lib/foo.jar'
 
-	unzip -c "${1:?${FUNCNAME[0]}: JAR file must be specified}" META-INF/MANIFEST.MF
+  unzip -c $1 META-INF/MANIFEST.MF
 }
diff --git a/plugins/available/jbang.plugin.bash b/plugins/available/jbang.plugin.bash
new file mode 100644
index 00000000..d0cc3141
--- /dev/null
+++ b/plugins/available/jbang.plugin.bash
@@ -0,0 +1,10 @@
+# Load jbang, if you are using it
+
+cite about-plugin
+about-plugin 'load jbang, if you are using it'
+
+pathmunge "$HOME"/.jbang/bin
+# Add Jbang to environment
+# alias j!=jbang
+# export PATH="$HOME/.jbang/bin:$PATH"
+
diff --git a/plugins/available/jekyll.plugin.bash b/plugins/available/jekyll.plugin.bash
index 3c12d826..c340c432 100644
--- a/plugins/available/jekyll.plugin.bash
+++ b/plugins/available/jekyll.plugin.bash
@@ -1,288 +1,367 @@
-# shellcheck shell=bash
 cite about-plugin
 about-plugin 'manage your jekyll site'
 
-function editpost() {
-	about 'edit a post'
-	param '1: site directory'
-	group 'jekyll'
-
-	local SITE site POST DATE TITLE POSTS
-	local -i COUNTER=1 POST_TO_EDIT ret
-	if [[ -z "${1:-}" ]]; then
-		echo "Error: no site specified."
-		echo "The site is the name of the directory your project is in."
-		return 1
-	fi
-
-	for site in "${SITES[@]:-}"; do
-		if [[ "${site##*/}" == "$1" ]]; then
-			SITE="${site}"
-			break
-		fi
-	done
-
-	if [[ -z "${SITE:-}" ]]; then
-		echo "No such site."
-		return 1
-	fi
-
-	pushd "${SITE}/_posts" > /dev/null || return
-
-	for POST in *; do
-		DATE="$(echo "${POST}" | grep -E -o "[0-9]{4}-[0-9]{1,2}-[0-9]{1,2}")"
-		TITLE="$(grep -E -o "title: (.+)" < "${POST}")"
-		TITLE="${TITLE/title: /}"
-		echo "${COUNTER}) 	${DATE}	${TITLE}"
-		POSTS[COUNTER]="$POST"
-		COUNTER="$((COUNTER + 1))"
-	done > >(less)
-	read -rp "Number of post to edit: " POST_TO_EDIT
-	"${JEKYLL_EDITOR:-${VISUAL:-${EDITOR:-${ALTERNATE_EDITOR:-nano}}}}" "${POSTS[POST_TO_EDIT]}"
-	ret="$?"
-	popd > /dev/null || return "$ret"
-	return "$ret"
+editpost() {
+  about 'edit a post'
+  param '1: site directory'
+  group 'jekyll'
+
+  unset SITE
+  if [ -z "$1" ]
+  then
+    echo "Error: no site specified."
+    echo "The site is the name of the directory your project is in."
+    return 1
+  fi
+
+  for site in ${SITES[@]}
+  do
+    if [ "${site##*/}" = "$1" ]
+    then
+      SITE=$site
+      break
+    fi
+  done
+
+  if [ -z "$SITE" ]
+  then
+    echo "No such site."
+    return 1
+  fi
+
+  builtin cd "$SITE/_posts"
+
+  COUNTER=1
+  NUMBER="$RANDOM"
+  TMPFILE="/tmp/editpost-$NUMBER"
+
+  for POST in *
+  do
+    DATE=`echo $POST | grep -oE "[0-9]{4}-[0-9]{1,2}-[0-9]{1,2}"`
+    TITLE=`cat $POST | grep -oE "title: (.+)"`
+    TITLE=`echo $TITLE | sed 's/title: //'`
+    echo "$COUNTER) 	$DATE	$TITLE" >> "$TMPFILE"
+    POSTS[$COUNTER]=$POST
+    COUNTER=`expr $COUNTER + 1`
+  done
+  less $TMPFILE
+  read -p "Number of post to edit: " POST_TO_EDIT
+  if [ -z "$JEKYLL_EDITOR" ]
+  then
+    nano "${POSTS[$POST_TO_EDIT]}"
+  else
+    "$JEKYLL_EDITOR" "${POSTS[$POST_TO_EDIT]}"
+  fi
 }
 
-function newpost() {
-	about 'create a new post'
-	param '1: site directory'
-	group 'jekyll'
-
-	local SITE site FNAME_POST_TITLE FNAME YAML_DATE
-	local JEKYLL_FORMATTING FNAME_DATE OPTIONS OPTION POST_TYPE POST_TITLE
-	local -i loc=0 ret
-	if [[ -z "${1:-}" ]]; then
-		echo "Error: no site specified."
-		echo "The site is the name of the directory your project is in."
-		return 1
-	fi
-
-	if [[ -z "${SITE}" ]]; then
-		echo "No such site."
-		return 1
-	fi
-
-	for site in "${SITES[@]}"; do
-		if [[ "${site##*/}" == "$1" ]]; then
-			SITE="$site"
-			JEKYLL_FORMATTING="${MARKUPS[loc]}"
-			break
-		fi
-		loc=$((loc + 1))
-	done
-
-	# Change directory into the local jekyll root
-	pushd "${SITE}/_posts" > /dev/null || return
-
-	# Get the date for the new post's filename
-	FNAME_DATE="$(date "+%Y-%m-%d")"
-
-	# If the user is using markdown or textile formatting, let them choose what type of post they want. Sort of like Tumblr.
-	OPTIONS=('Text' 'Quote' 'Image' 'Audio' 'Video' 'Link')
-
-	if [[ $JEKYLL_FORMATTING == "markdown" || $JEKYLL_FORMATTING == "textile" ]]; then
-		select OPTION in "${OPTIONS[@]}"; do
-			POST_TYPE="${OPTION}"
-			break
-		done
-	fi
-
-	# Get the title for the new post
-	read -rp "Enter title of the new post: " POST_TITLE
-
-	# Convert the spaces in the title to hyphens for use in the filename
-	FNAME_POST_TITLE="${POST_TITLE/ /-}"
-
-	# Now, put it all together for the full filename
-	FNAME="$FNAME_DATE-$FNAME_POST_TITLE.$JEKYLL_FORMATTING"
-
-	# And, finally, create the actual post file. But we're not done yet...
-	{
-		# Write a little stuff to the file for the YAML Front Matter
-		echo "---"
-
-		# Now we have to get the date, again. But this time for in the header (YAML Front Matter) of the file
-		YAML_DATE="$(date "+%B %d %Y %X")"
-
-		# Echo the YAML Formatted date to the post file
-		echo "date: $YAML_DATE"
-
-		# Echo the original post title to the YAML Front Matter header
-		echo "title: $POST_TITLE"
-
-		# And, now, echo the "post" layout to the YAML Front Matter header
-		echo "layout: post"
-
-		# Close the YAML Front Matter Header
-		echo "---"
-
-		echo
-	} > "${FNAME}"
-
-	# Generate template text based on the post type
-	if [[ $JEKYLL_FORMATTING == "markdown" ]]; then
-		case $POST_TYPE in
-			"Text")
-				true
-				;;
-			"Quote")
-				echo "> Quote"
-				echo
-				echo "&mdash; Author"
-				;;
-			"Image")
-				echo "![Alternate Text](/path/to/image/or/url)"
-				;;
-			"Audio")
-				echo "<html><audio src=\"/path/to/audio/file\" controls=\"controls\"></audio></html>"
-				;;
-			"Video")
-				echo "<html><video src=\"/path/to/video\" controls=\"controls\"></video></html>"
-				;;
-			"Link")
-				echo "[link][1]"
-				echo
-				echo "> Quote"
-				echo
-				echo "[1]: url"
-				;;
-		esac
-	elif [[ $JEKYLL_FORMATTING == "textile" ]]; then
-		case $POST_TYPE in
-			"Text")
-				true
-				;;
-			"Quote")
-				echo "bq. Quote"
-				echo
-				echo "&mdash; Author"
-				;;
-			"Image")
-				echo "!url(alt text)"
-				;;
-			"Audio")
-				echo "<html><audio src=\"/path/to/audio/file\" controls=\"controls\"></audio></html>"
-				;;
-			"Video")
-				echo "<html><video src=\"/path/to/video\" controls=\"controls\"></video></html>"
-				;;
-			"Link")
-				echo "\"Site\":url"
-				echo
-				echo "bq. Quote"
-				;;
-		esac
-	fi >> "${FNAME}"
-
-	# Open the file in your favorite editor
-	"${JEKYLL_EDITOR:-${VISUAL:-${EDITOR:-${ALTERNATE_EDITOR:-nano}}}}" "${FNAME}"
-	ret="$?"
-	popd > /dev/null || return "$ret"
-	return "$ret"
+newpost() {
+  about 'create a new post'
+  param '1: site directory'
+  group 'jekyll'
+
+  unset SITE
+  if [ -z "$1" ]
+  then
+    echo "Error: no site specified."
+    echo "The site is the name of the directory your project is in."
+    return 1
+  fi
+
+  if [ -z "$SITE" ]
+  then
+    echo "No such site."
+    return 1
+  fi
+
+  loc=0
+
+  for site in ${SITES[@]}
+  do
+    if [ "${site##*/}" = "$1" ]
+    then
+      SITE=$site
+      JEKYLL_FORMATTING=${MARKUPS[$loc]}
+      break
+    fi
+    loc=$(($loc+1))
+  done
+
+  # 'builtin cd' into the local jekyll root
+
+  builtin cd "$SITE/_posts"
+
+  # Get the date for the new post's filename
+
+  FNAME_DATE=$(date "+%Y-%m-%d")
+
+  # If the user is using markdown or textile formatting, let them choose what type of post they want. Sort of like Tumblr.
+
+  OPTIONS="Text Quote Image Audio Video Link"
+
+  if [ $JEKYLL_FORMATTING = "markdown" -o $JEKYLL_FORMATTING = "textile" ]
+  then
+    select OPTION in $OPTIONS
+    do
+      if [[ $OPTION = "Text" ]]
+      then
+        POST_TYPE="Text"
+        break
+      fi
+
+      if [[ $OPTION = "Quote" ]]
+      then
+        POST_TYPE="Quote"
+        break
+      fi
+
+      if [[ $OPTION = "Image" ]]
+      then
+        POST_TYPE="Image"
+        break
+      fi
+
+      if [[ $OPTION = "Audio" ]]
+      then
+        POST_TYPE="Audio"
+        break
+      fi
+
+      if [[ $OPTION = "Video" ]]
+      then
+        POST_TYPE="Video"
+        break
+      fi
+
+      if [[ $OPTION = "Link" ]]
+      then
+        POST_TYPE="Link"
+        break
+      fi
+    done
+  fi
+
+  # Get the title for the new post
+
+  read -p "Enter title of the new post: " POST_TITLE
+
+  # Convert the spaces in the title to hyphens for use in the filename
+
+  FNAME_POST_TITLE=`echo $POST_TITLE | tr ' ' "-"`
+
+  # Now, put it all together for the full filename
+
+  FNAME="$FNAME_DATE-$FNAME_POST_TITLE.$JEKYLL_FORMATTING"
+
+  # And, finally, create the actual post file. But we're not done yet...
+
+  touch "$FNAME"
+
+  # Write a little stuff to the file for the YAML Front Matter
+
+  echo "---" >> $FNAME
+
+  # Now we have to get the date, again. But this time for in the header (YAML Front Matter) of
+  # the file
+
+  YAML_DATE=$(date "+%B %d %Y %X")
+
+  # Echo the YAML Formatted date to the post file
+
+  echo "date: $YAML_DATE" >> $FNAME
+
+  # Echo the original post title to the YAML Front Matter header
+
+  echo "title: $POST_TITLE" >> $FNAME
+
+  # And, now, echo the "post" layout to the YAML Front Matter header
+
+  echo "layout: post" >> $FNAME
+
+  # Close the YAML Front Matter Header
+
+  echo "---" >> $FNAME
+  echo >> $FNAME
+
+  # Generate template text based on the post type
+
+  if [[ $JEKYLL_FORMATTING = "markdown" ]]
+  then
+    if [[ $POST_TYPE = "Text" ]]
+    then
+      true
+    fi
+
+    if [[ $POST_TYPE = "Quote" ]]
+    then
+      echo "> Quote" >> $FNAME
+      echo >> $FNAME
+      echo "&mdash; Author" >> $FNAME
+    fi
+
+    if [[ $POST_TYPE = "Image" ]]
+    then
+      echo "![Alternate Text](/path/to/image/or/url)" >> $FNAME
+    fi
+
+    if [[ $POST_TYPE = "Audio" ]]
+    then
+      echo "<html><audio src=\"/path/to/audio/file\" controls=\"controls\"></audio></html>" >> $FNAME
+    fi
+
+    if [[ $POST_TYPE = "Video" ]]
+    then
+      echo "<html><video src=\"/path/to/video\" controls=\"controls\"></video></html>" >> $FNAME
+    fi
+
+    if [[ $POST_TYPE = "Link" ]]
+    then
+      echo "[link][1]" >> $FNAME
+      echo >> $FNAME
+      echo "> Quote" >> $FNAME
+      echo >> $FNAME
+      echo "[1]: url" >> $FNAME
+    fi
+  fi
+
+  if [[ $JEKYLL_FORMATTING = "textile" ]]
+  then
+    if [[ $POST_TYPE = "Text" ]]
+    then
+      true
+    fi
+
+    if [[ $POST_TYPE = "Quote" ]]
+    then
+      echo "bq. Quote" >> $FNAME
+      echo >> $FNAME
+      echo "&mdash; Author" >> $FNAME
+    fi
+
+    if [[ $POST_TYPE = "Image" ]]
+    then
+      echo "!url(alt text)" >> $FNAME
+    fi
+
+    if [[ $POST_TYPE = "Audio" ]]
+    then
+      echo "<html><audio src=\"/path/to/audio/file\" controls=\"controls\"></audio></html>" >> $FNAME
+    fi
+
+    if [[ $POST_TYPE = "Video" ]]
+    then
+      echo "<html><video src=\"/path/to/video\" controls=\"controls\"></video></html>" >> $FNAME
+    fi
+
+    if [[ $POST_TYPE = "Link" ]]
+    then
+      echo "\"Site\":url" >> $FNAME
+      echo >> $FNAME
+      echo "bq. Quote" >> $FNAME
+    fi
+  fi
+
+  # Open the file in your favorite editor
+
+  "$JEKYLL_EDITOR" $FNAME
 }
 
 function testsite() {
-	about 'launches local jekyll server'
-	param '1: site directory'
-	group 'jekyll'
-
-	local SITE site
-	local -i ret
-	if [[ -z "${1:-}" ]]; then
-		echo "Error: no site specified."
-		echo "The site is the name of the directory your project is in."
-		return 1
-	fi
-
-	for site in "${SITES[@]}"; do
-		if [[ "${site##*/}" == "$1" ]]; then
-			SITE="$site"
-			break
-		fi
-	done
-
-	if [[ -z "${SITE}" ]]; then
-		echo "No such site."
-		return 1
-	fi
-
-	pushd "${SITE}" > /dev/null || return
-	jekyll --server --auto
-	ret="$?"
-	popd > /dev/null || return "$ret"
-	return "$ret"
+  about 'launches local jekyll server'
+  param '1: site directory'
+  group 'jekyll'
+
+  unset SITE
+  if [ -z "$1" ]
+  then
+    echo "Error: no site specified."
+    echo "The site is the name of the directory your project is in."
+    return 1
+  fi
+
+  for site in ${SITES[@]}
+  do
+    if [ "${site##*/}" = "$1" ]
+    then
+      SITE=$site
+      break
+    fi
+  done
+
+  if [ -z "$SITE" ]
+  then
+    echo "No such site."
+    return 1
+  fi
+
+  builtin cd $SITE
+  jekyll --server --auto
 }
 
 function buildsite() {
-	about 'builds site'
-	param '1: site directory'
-	group 'jekyll'
-
-	local SITE site
-	local -i ret
-	if [[ -z "${1:-}" ]]; then
-		echo "Error: no site specified."
-		echo "The site is the name of the directory your project is in."
-		return 1
-	fi
-
-	for site in "${SITES[@]}"; do
-		if [[ "${site##*/}" == "$1" ]]; then
-			SITE="$site"
-			break
-		fi
-	done
-
-	if [[ -z "${SITE}" ]]; then
-		echo "No such site."
-		return 1
-	fi
-
-	pushd "${SITE}" > /dev/null || return
-	rm -rf _site
-	jekyll --no-server
-	ret="$?"
-	popd > /dev/null || return "$ret"
-	return "$ret"
+  about 'builds site'
+  param '1: site directory'
+  group 'jekyll'
+
+  unset SITE
+  if [ -z "$1" ]
+  then
+    echo "Error: no site specified."
+    echo "The site is the name of the directory your project is in."
+    return 1
+  fi
+
+  for site in ${SITES[@]}
+  do
+    if [ "${site##*/}" = "$1" ]
+    then
+      SITE=$site
+      break
+    fi
+  done
+
+  if [ -z "$SITE" ]
+  then
+    echo "No such site."
+    return 1
+  fi
+
+  builtin cd $SITE
+  rm -rf _site
+  jekyll --no-server
 }
 
 function deploysite() {
-	about 'rsyncs site to remote host'
-	param '1: site directory'
-	group 'jekyll'
-
-	local SITE site REMOTE
-	local -i loc=0 ret
-	if [[ -z "${1:-}" ]]; then
-		echo "Error: no site specified."
-		echo "The site is the name of the directory your project is in."
-		return 1
-	fi
-
-	for site in "${SITES[@]}"; do
-		if [[ "${site##*/}" == "$1" ]]; then
-			SITE="$site"
-			# shellcheck disable=SC2153 # who knows
-			REMOTE="${REMOTES[loc]}"
-			break
-		fi
-		loc=$((loc + 1))
-	done
-
-	if [[ -z "${SITE}" ]]; then
-		echo "No such site."
-		return 1
-	fi
-
-	pushd "${SITE}" > /dev/null || return
-	rsync -rz "${REMOTE?}"
-	ret="$?"
-	popd > /dev/null || return "$ret"
-	return "$ret"
+  about 'rsyncs site to remote host'
+  param '1: site directory'
+  group 'jekyll'
+
+  unset SITE
+  if [ -z "$1" ]
+  then
+    echo "Error: no site specified."
+    echo "The site is the name of the directory your project is in."
+    return 1
+  fi
+
+  loc=0
+
+  for site in ${SITES[@]}
+  do
+    if [ "${site##*/}" = "$1" ]
+    then
+      SITE=$site
+      REMOTE=${REMOTES[$loc]}
+      break
+    fi
+    loc=$(($loc+1))
+  done
+
+  if [ -z "$SITE" ]
+  then
+    echo "No such site."
+    return 1
+  fi
+
+  builtin cd $SITE
+  rsync -rz $REMOTE
 }
-
-# Load the Jekyll config
-if [[ -s "$HOME/.jekyllconfig" ]]; then
-	source "$HOME/.jekyllconfig"
-fi
diff --git a/plugins/available/keycode.plugin.bash b/plugins/available/keycode.plugin.bash
new file mode 100644
index 00000000..c074e85d
--- /dev/null
+++ b/plugins/available/keycode.plugin.bash
@@ -0,0 +1,52 @@
+cite about-plugin
+about-plugin 'caps lock virando grave'
+
+# use xev para ver keycode ...
+# ----------------------------------------------------------------------------
+# dead + _ + key => key + space
+# xmodmap -e 'eycode 194  = dead_grave'
+
+# 1 2 [3] 4 5
+#xmodmap -e 'keycode 194  = grave'       # `
+
+# 1 2 3 [4] 5
+#xmodmap -e 'keycode 195  = asciitilde '       # ~
+
+# 1 2 3 4 [5]
+#xmodmap -e 'keycode 196  = asciicircum'  # ^
+
+## caps lock virando grave
+
+if [[ ! -f /tmp/keycode ]]; then
+# apago o caps lock
+xmodmap -e 'clear lock'
+#xmodmap -e 'keycode 66 = grave acute dead_grave'
+xmodmap -e 'keycode 66 = tab iso_left_tab iso_left_tab'
+
+echo on > /tmp/keycode
+fi
+
+# <caps lock>        : `
+# <shift><caps lock> : ´
+
+## caps lock virando grave e dead_grave
+#xmodmap -e 'keycode 66 = grave'  # `
+#xmodmap -e 'keycode 66 = dead_acute'  # `
+## <caps lock> retorna grave
+## <shift><caps lock> retorna retorna dead_grave
+
+# botões especiais
+# ================
+
+#_____________________________________________________________________-
+# [carta] [home] [msn] [fone] <1,2,3,4,5,*> [>/||] [|<<] [>>|] [#]
+# <esc>  [f1]  .......................................    [f12]
+# [papel]
+# [foto]      teclado
+# [lupa+]
+# [lupa]
+#_____________________________________________________________________-
+
+# [papel]
+# keycode 243 (keysym 0x1008ff5b, xf86documents)
+#xmodmap -e 'keycode 243 = acute grave dead_grave'
diff --git a/plugins/available/latex.plugin.bash b/plugins/available/latex.plugin.bash
index 474f4abc..6ebb70d3 100644
--- a/plugins/available/latex.plugin.bash
+++ b/plugins/available/latex.plugin.bash
@@ -1,19 +1,9 @@
-# shellcheck shell=bash
-about-plugin 'add MacTeX to PATH'
-
-_bash_it_plugin_latex_paths=(
-	# Standard locations
-	/usr/local/texbin
-	# MacOS locations
-	/Library/TeX/texbin
-)
+cite about-plugin
+about-plugin 'use mactex'
 
 # add mactex to the path if its present
-for _bash_it_plugin_latex_path in "${_bash_it_plugin_latex_paths[@]}"; do
-	if [[ -d "$_bash_it_plugin_latex_path/" ]]; then
-		pathmunge "$_bash_it_plugin_latex_path" after && break
-	fi
-done
-
-# Cleanup
-unset "${!_bash_it_plugin_latex_@}"
+MACTEX_PATH=/usr/local/texlive/2009/bin/universal-darwin
+if [[ -d  $MACTEX_PATH ]]; then
+  pathmunge $MACTEX_PATH after
+fi
+unset MACTEX_PATH
diff --git a/plugins/available/luaenv.plugin.bash b/plugins/available/luaenv.plugin.bash
new file mode 100644
index 00000000..1e2efade
--- /dev/null
+++ b/plugins/available/luaenv.plugin.bash
@@ -0,0 +1,12 @@
+cite about-plugin
+about-plugin 'load luaenv, if you are using it'
+
+export luaenv_ROOT="$HOME/.luaenv"
+pathmunge "$luaenv_ROOT/bin"
+
+[[ `which luaenv 2>/dev/null` ]] && eval "$(luaenv init - bash)"
+
+#Load luaenv virtualenv if the virtualenv plugin is installed.
+if luaenv virtualenv-init - &> /dev/null; then
+  eval "$(luaenv virtualenv-init - bash)"
+fi
diff --git a/plugins/available/man.plugin.bash b/plugins/available/man.plugin.bash
index b981565f..473f04fd 100644
--- a/plugins/available/man.plugin.bash
+++ b/plugins/available/man.plugin.bash
@@ -1,14 +1,10 @@
-# shellcheck shell=bash
+cite about-plugin
 about-plugin 'colorize man pages for better readability'
 
-: "${LESS_TERMCAP_mb:=$'\e[1;32m'}"
-: "${LESS_TERMCAP_md:=$'\e[1;32m'}"
-: "${LESS_TERMCAP_me:=$'\e[0m'}"
-: "${LESS_TERMCAP_se:=$'\e[0m'}"
-: "${LESS_TERMCAP_so:=$'\e[01;33m'}"
-: "${LESS_TERMCAP_ue:=$'\e[0m'}"
-: "${LESS_TERMCAP_us:=$'\e[1;4;31m'}"
-
-: "${LESS:=}"
-export "${!LESS_TERMCAP@}"
-export LESS="R${LESS#-}"
+export LESS_TERMCAP_mb=$'\e[1;32m'
+export LESS_TERMCAP_md=$'\e[1;32m'
+export LESS_TERMCAP_me=$'\e[0m'
+export LESS_TERMCAP_se=$'\e[0m'
+export LESS_TERMCAP_so=$'\e[01;33m'
+export LESS_TERMCAP_ue=$'\e[0m'
+export LESS_TERMCAP_us=$'\e[1;4;31m'
diff --git a/plugins/available/ndenv.plugin.bash b/plugins/available/ndenv.plugin.bash
new file mode 100644
index 00000000..c1b4f902
--- /dev/null
+++ b/plugins/available/ndenv.plugin.bash
@@ -0,0 +1,12 @@
+cite about-plugin
+about-plugin 'load ndenv, if you are using it'
+
+export ndenv_ROOT="$HOME/.ndenv"
+pathmunge "$ndenv_ROOT/bin"
+
+[[ `which ndenv 2>/dev/null` ]] && eval "$(ndenv init - bash)"
+
+#Load ndenv virtualenv if the virtualenv plugin is installed.
+if ndenv virtualenv-init - &> /dev/null; then
+  eval "$(ndenv virtualenv-init - bash)"
+fi
diff --git a/plugins/available/nginx.plugin.bash b/plugins/available/nginx.plugin.bash
index 8d75a881..c540a23a 100644
--- a/plugins/available/nginx.plugin.bash
+++ b/plugins/available/nginx.plugin.bash
@@ -1,55 +1,66 @@
-# shellcheck shell=bash
+cite about-plugin
 about-plugin 'manage your nginx service'
 
-pathmunge "${NGINX_PATH:=/opt/nginx}/sbin" after
-export NGINX_PATH
+export NGINX_PATH='/opt/nginx'
+pathmunge $NGINX_PATH/sbin after
 
 function nginx_reload() {
-	about 'reload your nginx config'
-	group 'nginx'
-
-	local FILE="${NGINX_PATH?}/logs/nginx.pid"
-	if [[ -s $FILE ]]; then
-		echo "Reloading NGINX..."
-		read -r PID < "${FILE}"
-		sudo kill -HUP "${PID?}"
-	else
-		echo "Nginx pid file not found"
-		return 0
-	fi
+  about 'reload your nginx config'
+  group 'nginx'
+
+  FILE="${NGINX_PATH}/logs/nginx.pid"
+  if [ -e $FILE ]; then
+    echo "Reloading NGINX..."
+    PID=`cat $NGINX_PATH/logs/nginx.pid`
+    sudo kill -HUP $PID
+  else
+    echo "Nginx pid file not found"
+    return 0
+  fi
 }
 
 function nginx_stop() {
-	about 'stop nginx'
-	group 'nginx'
-
-	local FILE="${NGINX_PATH?}/logs/nginx.pid"
-	if [[ -s $FILE ]]; then
-		echo "Stopping NGINX..."
-		read -r PID < "${FILE}"
-		sudo kill -INT "${PID?}"
-	else
-		echo "Nginx pid file not found"
-		return 0
-	fi
+  about 'stop nginx'
+  group 'nginx'
+
+  FILE="${NGINX_PATH}/logs/nginx.pid"
+  if [ -e $FILE ]; then
+    echo "Stopping NGINX..."
+    PID=`cat $NGINX_PATH/logs/nginx.pid`
+    sudo kill -INT $PID
+  else
+    echo "Nginx pid file not found"
+    return 0
+  fi
 }
 
 function nginx_start() {
-	about 'start nginx'
-	group 'nginx'
-
-	local FILE="${NGINX_PATH?}/sbin/nginx"
-	if [[ -x $FILE ]]; then
-		echo "Starting NGINX..."
-		sudo "${FILE}"
-	else
-		echo "Couldn't start nginx"
-	fi
+  about 'start nginx'
+  group 'nginx'
+
+  FILE="${NGINX_PATH}/sbin/nginx"
+  if [ -e $FILE ]; then
+    echo "Starting NGINX..."
+    sudo $NGINX_PATH/sbin/nginx
+  else
+    echo "Couldn't start nginx"
+  fi
 }
 
 function nginx_restart() {
-	about 'restart nginx'
-	group 'nginx'
+  about 'restart nginx'
+  group 'nginx'
 
-	nginx_stop && nginx_start
+  FILE="${NGINX_PATH}/logs/nginx.pid"
+  if [ -e $FILE ]; then
+    echo "Stopping NGINX..."
+    PID=`cat $NGINX_PATH/logs/nginx.pid`
+    sudo kill -INT $PID
+    sleep 1
+    echo "Starting NGINX..."
+    sudo $NGINX_PATH/sbin/nginx
+  else
+    echo "Nginx pid file not found"
+    return 0
+  fi
 }
diff --git a/plugins/available/osx-timemachine.plugin.bash b/plugins/available/osx-timemachine.plugin.bash
index e30d37bd..3d7ff00c 100644
--- a/plugins/available/osx-timemachine.plugin.bash
+++ b/plugins/available/osx-timemachine.plugin.bash
@@ -1,95 +1,84 @@
-# shellcheck shell=bash
+cite about-plugin
 about-plugin 'OS X Time Machine functions'
 
-if [[ "${OSTYPE}" != 'darwin'* ]]; then
-	_log_warning "This plugin only works with Mac OS X"
-	return 1
-fi
-
 function time-machine-destination() {
-	group "osx-timemachine"
-	about "Shows the OS X Time Machine destination/mount point"
+  group "osx-timemachine"
+  about "Shows the OS X Time Machine destination/mount point"
 
-	tmutil destinationinfo | grep "Mount Point" | sed -e 's/Mount Point   : \(.*\)/\1/g'
+  echo $(tmutil destinationinfo | grep "Mount Point" | sed -e 's/Mount Point   : \(.*\)/\1/g')
 }
 
 function time-machine-list-machines() {
-	group "osx-timemachine"
-	about "Lists the OS X Time Machine machines on the backup volume"
+  group "osx-timemachine"
+  about "Lists the OS X Time Machine machines on the backup volume"
 
-	local tmdest
-	tmdest="$(time-machine-destination)/Backups.backupdb"
+  local tmdest="$(time-machine-destination)/Backups.backupdb"
 
-	find "$tmdest" -maxdepth 1 -mindepth 1 -type d | grep -v "/\." | while read -r line; do
-		echo "${line##*/}"
-	done
+  find "$tmdest" -maxdepth 1 -mindepth 1 -type d | grep -v "/\." | while read line ; do
+    echo "${line##*/}"
+  done
 }
 
 function time-machine-list-all-backups() {
-	group "osx-timemachine"
-	about "Shows all of the backups for the specified machine"
-	param "1: Machine name (optional)"
-	example "time-machine-list-all-backups my-laptop"
-
-	# Use the local hostname if none provided
-	local COMPUTERNAME BACKUP_LOCATION
-	COMPUTERNAME=${1:-$(scutil --get ComputerName)}
-	BACKUP_LOCATION="$(time-machine-destination)/Backups.backupdb/$COMPUTERNAME"
-
-	find "$BACKUP_LOCATION" -maxdepth 1 -mindepth 1 -type d | while read -r line; do
-		echo "$line"
-	done
+  group "osx-timemachine"
+  about "Shows all of the backups for the specified machine"
+  param "1: Machine name (optional)"
+  example "time-machine-list-all-backups my-laptop"
+
+  # Use the local hostname if none provided
+  local COMPUTERNAME=${1:-$(scutil --get ComputerName)}
+  local BACKUP_LOCATION="$(time-machine-destination)/Backups.backupdb/$COMPUTERNAME"
+
+  find "$BACKUP_LOCATION" -maxdepth 1 -mindepth 1 -type d | while read line ; do
+    echo "$line"
+  done
 }
 
 function time-machine-list-old-backups() {
-	group "osx-timemachine"
-	about "Shows all of the backups for the specified machine, except for the most recent backup"
-	param "1: Machine name (optional)"
-	example "time-machine-list-old-backups my-laptop"
-
-	# Use the local hostname if none provided
-	local COMPUTERNAME BACKUP_LOCATION
-	COMPUTERNAME=${1:-$(scutil --get ComputerName)}
-	BACKUP_LOCATION="$(time-machine-destination)/Backups.backupdb/$COMPUTERNAME"
-
-	# List all but the most recent one
-	find "$BACKUP_LOCATION" -maxdepth 1 -mindepth 1 -type d -name 2\* | sed \$d | while read -r line; do
-		echo "$line"
-	done
+  group "osx-timemachine"
+  about "Shows all of the backups for the specified machine, except for the most recent backup"
+  param "1: Machine name (optional)"
+  example "time-machine-list-old-backups my-laptop"
+
+  # Use the local hostname if none provided
+  local COMPUTERNAME=${1:-$(scutil --get ComputerName)}
+  local BACKUP_LOCATION="$(time-machine-destination)/Backups.backupdb/$COMPUTERNAME"
+
+  # List all but the most recent one
+  find "$BACKUP_LOCATION" -maxdepth 1 -mindepth 1 -type d -name 2\* | sed \$d | while read line ; do
+    echo "$line"
+  done
 }
 
 # Taken from here: http://stackoverflow.com/a/30547074/1228454
 function _tm_startsudo() {
-	local -x SUDO_COMMAND="plugin/osx-timemachine: keep 'sudo' token alive during long-run 'tmutil' commands"
-	sudo "-${SUDO_ASKPASS:+A}v" # validate without running a command, using `ssh-askpass` if available.
-	(while sudo "-${SUDO_ASKPASS:+A}v"; do
-		sleep 50
-	done) &
-	SUDO_PID="$!"
-	trap _tm_stopsudo SIGINT SIGTERM
+    sudo -v
+    ( while true; do sudo -v; sleep 50; done; ) &
+    SUDO_PID="$!"
+    trap _tm_stopsudo SIGINT SIGTERM
 }
 function _tm_stopsudo() {
-	kill "$SUDO_PID"
-	trap - SIGINT SIGTERM
-	sudo -k
+    kill "$SUDO_PID"
+    trap - SIGINT SIGTERM
+    sudo -k
 }
 
 function time-machine-delete-old-backups() {
-	group "osx-timemachine"
-	about "Deletes all of the backups for the specified machine, with the exception of the most recent one"
-	param "1: Machine name (optional)"
-	example "time-machine-delete-old-backups my-laptop"
+  group "osx-timemachine"
+  about "Deletes all of the backups for the specified machine, with the exception of the most recent one"
+  param "1: Machine name (optional)"
+  example "time-machine-delete-old-backups my-laptop"
 
-	# Use the local hostname if none provided
-	local COMPUTERNAME=${1:-$(scutil --get ComputerName)} _old_backup
+  # Use the local hostname if none provided
+  local COMPUTERNAME=${1:-$(scutil --get ComputerName)}
 
-	# Ask for sudo credentials only once
-	_tm_startsudo
+  # Ask for sudo credentials only once
+  _tm_startsudo
 
-	while read -r _old_backup; do
-		# Delete the backup
-		sudo tmutil delete "$_old_backup"
-	done <<< "$(time-machine-list-old-backups "$COMPUTERNAME")"
+  echo "$(time-machine-list-old-backups "$COMPUTERNAME")" | while read i ; do
+    # Delete the backup
+    sudo tmutil delete "$i"
+  done
 
-	_tm_stopsudo
+  _tm_stopsudo
 }
diff --git a/plugins/available/osx.plugin.bash b/plugins/available/osx.plugin.bash
index 139f58a1..ca1f66b8 100644
--- a/plugins/available/osx.plugin.bash
+++ b/plugins/available/osx.plugin.bash
@@ -1,21 +1,23 @@
-# shellcheck shell=bash
+cite about-plugin
 about-plugin 'osx-specific functions'
 
-if [[ "${OSTYPE}" != 'darwin'* ]]; then
-	_log_warning "This plugin only works with Mac OS X."
-	return 1
-fi
-
 # OS X: Open new tabs in same directory
-if _is_function update_terminal_cwd; then
-	safe_append_prompt_command 'update_terminal_cwd'
+if [[ $OSTYPE == 'darwin'* ]]; then
+  if type update_terminal_cwd > /dev/null 2>&1 ; then
+    if ! [[ $PROMPT_COMMAND =~ (^|;)update_terminal_cwd($|;) ]] ; then
+      PROMPT_COMMAND="${PROMPT_COMMAND%;};update_terminal_cwd"
+      declared="$(declare -p PROMPT_COMMAND)"
+      [[ "$declared" =~ \ -[aAilrtu]*x[aAilrtu]*\  ]] 2>/dev/null
+      [[ $? -eq 0 ]] && export PROMPT_COMMAND
+    fi
+  fi
 fi
 
 function tab() {
-	about 'opens a new terminal tab'
-	group 'osx'
+  about 'opens a new terminal tab'
+  group 'osx'
 
-	osascript 2> /dev/null << EOF
+  osascript 2>/dev/null <<EOF
     tell application "System Events"
       tell process "Terminal" to keystroke "t" using command down
     end
@@ -28,105 +30,147 @@ EOF
 
 # renames the current os x terminal tab title
 function tabname {
-	printf '%b' "\e]1;$1\a"
+  printf "\e]1;$1\a"
 }
 
 # renames the current os x terminal window title
 function winname {
-	printf '%b' "\e]2;$1\a"
+  printf "\e]2;$1\a"
+}
+
+# this one switches your os x dock between 2d and 3d
+# thanks to savier.zwetschge.org
+function dock-switch() {
+    about 'switch dock between 2d and 3d'
+    param '1: "2d" or "3d"'
+    example '$ dock-switch 2d'
+    group 'osx'
+
+    if [[ "$OSTYPE" = 'darwin'* ]]; then
+
+        if [[ $1 = 3d ]] ; then
+            defaults write com.apple.dock no-glass -boolean NO
+            killall Dock
+
+        elif [[ $1 = 2d ]] ; then
+            defaults write com.apple.dock no-glass -boolean YES
+            killall Dock
+
+        else
+            echo "usage:"
+            echo "dock-switch 2d"
+            echo "dock-switch 3d."
+        fi
+    else
+        echo "Sorry, this only works on Mac OS X"
+    fi
 }
 
-function pman() {
-	about 'view man documentation in Preview'
-	param '1: man page to view'
-	example '$ pman bash'
-	group 'osx'
-	man -t "${1}" | open -fa 'Preview'
+function pman ()
+{
+    about 'view man documentation in Preview'
+    param '1: man page to view'
+    example '$ pman bash'
+    group 'osx'
+    man -t "${1}" | open -fa $PREVIEW
 }
 
-function pri() {
-	about 'display information about Ruby classes, modules, or methods, in Preview'
-	param '1: Ruby method, module, or class'
-	example '$ pri Array'
-	group 'osx'
-	ri -T "${1}" | open -fa 'Preview'
+function pri ()
+{
+    about 'display information about Ruby classes, modules, or methods, in Preview'
+    param '1: Ruby method, module, or class'
+    example '$ pri Array'
+    group 'osx'
+    ri -T "${1}" | open -fa $PREVIEW
 }
 
 # Download a file and open it in Preview
 function prevcurl() {
-	about 'download a file and open it in Preview'
-	param '1: url'
-	group 'osx'
-
-	curl "$*" | open -fa 'Preview'
+  about 'download a file and open it in Preview'
+  param '1: url'
+  group 'osx'
+
+  if [[ ! $OSTYPE = 'darwin'* ]]
+  then
+    echo "This function only works with Mac OS X"
+    return 1
+  fi
+  curl "$*" | open -fa $PREVIEW
 }
 
 function refresh-launchpad() {
-	about 'Reset launchpad layout in macOS'
-	example '$ refresh-launchpad'
-	group 'osx'
-
-	defaults write com.apple.dock ResetLaunchPad -bool TRUE
-	killall Dock
+  about 'Reset launchpad layout in macOS'
+  example '$ refresh-launchpad'
+  group 'osx'
+
+  if [[ "$OSTYPE" = 'darwin'* ]];then
+    defaults write com.apple.dock ResetLaunchPad -bool TRUE
+    killall Dock
+  else
+    echo "Sorry, this only works on Mac OS X"
+  fi
 }
 
-function list-jvms() {
-	about 'List java virtual machines and their states in macOS'
-	example 'list-jvms'
-	group 'osx'
-
-	local JVMS_DIR="/Library/Java/JavaVirtualMachines"
-	# The following variables are intended to impact the enclosing scope, not local.
-	JVMS=("${JVMS_DIR}"/*)
-	JVMS_STATES=()
-
-	# Map state of JVM
-	for ((i = 0; i < ${#JVMS[@]}; i++)); do
-		if [[ -f "${JVMS[i]}/Contents/Info.plist" ]]; then
-			JVMS_STATES[i]=enabled
-		else
-			JVMS_STATES[i]=disabled
-		fi
-		printf '%s\t%s\t%s\n' "${i}" "${JVMS[i]##*/}" "${JVMS_STATES[i]}"
-	done
+function list-jvms(){
+  about 'List java virtual machines and their states in macOS'
+  example 'list-jvms'
+  group 'osx'
+
+  JVMS_DIR="/Library/Java/JavaVirtualMachines"
+  JVMS=( $(ls ${JVMS_DIR}) )
+  JVMS_STATES=()
+
+  # Map state of JVM
+  for (( i = 0; i < ${#JVMS[@]}; i++ )); do
+    if [[ -f "${JVMS_DIR}/${JVMS[$i]}/Contents/Info.plist" ]]; then
+      JVMS_STATES[${i}]=enabled
+    else
+      JVMS_STATES[${i}]=disabled
+    fi
+      echo "${i} ${JVMS[$i]} ${JVMS_STATES[$i]}"
+  done
 }
 
-function pick-default-jvm() {
-	about 'Pick the default Java Virtual Machines in system-wide scope in macOS'
-	example 'pick-default-jvm'
-
-	# Declare variables
-	local JVMS JVMS_STATES
-	local DEFAULT_JVM_DIR DEFAULT_JVM OPTION
-
-	# Call function for listing
-	list-jvms
-
-	# OPTION for default jdk and set variables
-	while [[ ! "$OPTION" =~ ^[0-9]+$ || OPTION -ge "${#JVMS[@]}" ]]; do
-		read -rp "Enter Default JVM: " OPTION
-		if [[ ! "$OPTION" =~ ^[0-9]+$ ]]; then
-			echo "Please enter a number"
-		fi
-
-		if [[ OPTION -ge "${#JVMS[@]}" ]]; then
-			echo "Please select one of the displayed JVMs"
-		fi
-	done
-
-	DEFAULT_JVM_DIR="${JVMS[OPTION]}"
-	DEFAULT_JVM="${JVMS[OPTION]##*/}"
-
-	# Disable all jdk
-	for ((i = 0; i < ${#JVMS[@]}; i++)); do
-		if [[ "${JVMS[i]}" != "${DEFAULT_JVM_DIR}" && -f "${JVMS[i]}/Contents/Info.plist" ]]; then
-			sudo mv "${JVMS[i]}/Contents/Info.plist" "${JVMS[i]}/Contents/Info.plist.disable"
-		fi
-	done
-
-	# Enable default jdk
-	if [[ -f "${DEFAULT_JVM_DIR}/Contents/Info.plist.disable" ]]; then
-		sudo mv -vn "${DEFAULT_JVM_DIR}/Contents/Info.plist.disable" "${DEFAULT_JVM_DIR}/Contents/Info.plist" \
-			&& echo "Enabled ${DEFAULT_JVM} as default JVM"
-	fi
+function pick-default-jvm(){
+  about 'Pick the default Java Virtual Machines in system-wide scope in macOS'
+  example 'pick-default-jvm'
+
+  # Call function for listing
+  list-jvms
+
+  # Declare variables
+  local DEFAULT_JVM_DIR=""
+  local DEFAULT_JVM=""
+  local OPTION=""
+
+  # OPTION for default jdk and set variables
+  while [[ ! "$OPTION" =~ ^[0-9]+$ || OPTION -ge "${#JVMS[@]}" ]]; do
+    read -p "Enter Default JVM: "  OPTION
+      if [[ ! "$OPTION" =~ ^[0-9]+$  ]]; then
+        echo "Please enter a number"
+      fi
+
+      if [[ OPTION -ge "${#JVMS[@]}" ]]; then
+        echo "Please select one of the displayed JVMs"
+      fi
+  done
+
+  DEFAULT_JVM_DIR="${JVMS_DIR}/${JVMS[$OPTION]}"
+  DEFAULT_JVM="${JVMS[$OPTION]}"
+
+  # Disable all jdk
+  for (( i = 0; i < ${#JVMS[@]}; i++ )); do
+    if [[ -f "${JVMS_DIR}/${JVMS[$i]}/Contents/Info.plist" ]]; then
+      sudo mv "${JVMS_DIR}/${JVMS[$i]}/Contents/Info.plist" "${JVMS_DIR}/${JVMS[$i]}/Contents/Info.plist.disable"
+    fi
+  done
+
+  # Enable default jdk
+  if [[ -f "${DEFAULT_JVM_DIR}/Contents/Info.plist.disable" ]]; then
+    sudo mv "${DEFAULT_JVM_DIR}/Contents/Info.plist.disable" "${DEFAULT_JVM_DIR}/Contents/Info.plist"
+    echo "Enabled ${DEFAULT_JVM} as default JVM"
+  fi
 }
+
+# Make this backwards compatible
+alias pcurl='prevcurl'
diff --git a/plugins/available/pandoc.plugin.bash b/plugins/available/pandoc.plugin.bash
new file mode 100644
index 00000000..d28376c3
--- /dev/null
+++ b/plugins/available/pandoc.plugin.bash
@@ -0,0 +1,11 @@
+# plugin for npandoc
+
+cite about-plugin
+about-plugin 'pandoc plugin for node'
+
+if [[ `which pandoc` ]] ; then
+
+  # init pandoc
+  eval "$(pandoc --bash-completion)"
+
+fi
diff --git a/plugins/available/perl5.plugin.bash b/plugins/available/perl5.plugin.bash
new file mode 100644
index 00000000..6f7d7cb2
--- /dev/null
+++ b/plugins/available/perl5.plugin.bash
@@ -0,0 +1,16 @@
+# Load perl5, if you are using it
+
+cite about-plugin
+about-plugin 'load perl5, if you are using it'
+
+pathmunge "$HOME"/perl5/bin
+PERL5LIB="/home/ivan/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
+PERL_LOCAL_LIB_ROOT="/home/ivan/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
+PERL_MB_OPT="--install_base \"/home/ivan/perl5\""; export PERL_MB_OPT;
+PERL_MM_OPT="INSTALL_BASE=/home/ivan/perl5"; export PERL_MM_OPT;
+
+# PATH="/home/ivan/perl5/bin${PATH:+:${PATH}}"; export PATH;
+# PERL5LIB="/home/ivan/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
+# PERL_LOCAL_LIB_ROOT="/home/ivan/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
+# PERL_MB_OPT="--install_base \"/home/ivan/perl5\""; export PERL_MB_OPT;
+# PERL_MM_OPT="INSTALL_BASE=/home/ivan/perl5"; export PERL_MM_OPT;
diff --git a/plugins/available/plenv.plugin.bash b/plugins/available/plenv.plugin.bash
index 79a9cf49..1da2d61b 100644
--- a/plugins/available/plenv.plugin.bash
+++ b/plugins/available/plenv.plugin.bash
@@ -1,16 +1,18 @@
-# shellcheck shell=bash
-#
 # plugin for plenv
 
 cite about-plugin
 about-plugin 'plenv plugin for Perl'
 
-if [[ -d "${HOME}/.plenv/bin" ]]; then
-	# load plenv bin dir into path if it exists
-	pathmunge "${HOME}/.plenv/bin"
+if [[ -e "${HOME}/.plenv/bin" ]] ; then
+
+  # load plenv bin dir into path if it exists
+  pathmunge "${HOME}/.plenv/bin"
+
 fi
 
-if _command_exists plenv; then
-	# init plenv
-	eval "$(plenv init - bash)"
+if [[ `which plenv` ]] ; then
+
+  # init plenv
+  eval "$(plenv init - bash)"
+
 fi
diff --git a/plugins/available/postgres.plugin.bash b/plugins/available/postgres.plugin.bash
index 9f66152b..8f239985 100644
--- a/plugins/available/postgres.plugin.bash
+++ b/plugins/available/postgres.plugin.bash
@@ -1,4 +1,3 @@
-# shellcheck shell=bash
 cite about-plugin
 about-plugin 'postgres helper functions'
 
@@ -51,7 +50,7 @@ function postgres_status {
 
 
 function is_postgres_running {
-  $POSTGRES_BIN/pg_ctl -D $PGDATA status | grep -F -o "no server running"
+  $POSTGRES_BIN/pg_ctl -D $PGDATA status | egrep -o "no server running"
 }
 
 
diff --git a/plugins/available/projects.plugin.bash b/plugins/available/projects.plugin.bash
index 34fa001e..775ec813 100644
--- a/plugins/available/projects.plugin.bash
+++ b/plugins/available/projects.plugin.bash
@@ -1,57 +1,75 @@
-# shellcheck shell=bash
-about-plugin 'quickly navigate configured project paths'
-
-: "${BASH_IT_PROJECT_PATHS:=$HOME/Projects:$HOME/src:$HOME/work}"
-
-function pj() {
-	about 'navigate quickly to your various project directories'
-	group 'projects'
-
-	local proj="${1?${FUNCNAME[0]}: project name required}"
-	local cmd PS3 dest d
-	local -a dests
-
-	if [[ "$proj" == "open" ]]; then
-		shift
-		proj="${1}"
-		cmd="${EDITOR?}"
-	fi
-
-	# collect possible destinations to account for directories
-	# with the same name in project directories
-	IFS=':' read -ra dests <<< "${BASH_IT_PROJECT_PATHS?${FUNCNAME[0]}: project working folders must be configured}"
-	for d in "${!dests[@]}"; do
-		if [[ ! -d "${dests[d]}/${proj}" ]]; then
-			unset 'dests[d]'
-		fi
-	done
-
-	case ${#dests[@]} in
-		0)
-			_log_error "BASH_IT_PROJECT_PATHS must contain at least one existing location"
-			return 1
-			;;
-		1)
-			dest="${dests[*]}/${proj}"
-			;;
-		*)
-			PS3="Multiple project directories found. Please select one: "
-			dests+=("cancel")
-			select d in "${dests[@]}"; do
-				case $d in
-					"cancel")
-						return
-						;;
-					*)
-						dest="${d}/${proj}"
-						break
-						;;
-				esac
-			done
-			;;
-	esac
-
-	"${cmd:-cd}" "${dest}"
+cite about-plugin
+about-plugin 'quickly navigate configured paths with `pj` and `pjo`. example: "export PROJECT_PATHS=~/projects:~/work/projects"'
+
+function pj {
+about 'navigate quickly to your various project directories'
+group 'projects'
+
+
+if [ -z "$PROJECT_PATHS" ]; then
+  echo "error: PROJECT_PATHS not set"
+  return 1
+fi
+
+
+local cmd
+local dest
+local -a dests
+
+
+if [ "$1" == "open" ]; then
+  shift
+  cmd="$EDITOR"
+fi
+cmd="${cmd:-cd}"
+
+
+if [ -z "$1" ]; then
+  echo "error: no project provided"
+  return 1
+fi
+
+
+# collect possible destinations to account for directories
+# with the same name in project directories
+for i in ${PROJECT_PATHS//:/$'\n'}; do
+  if [ -d "$i"/"$1" ]; then
+    dests+=("$i/$1")
+  fi
+done
+
+
+# when multiple destinations are found, present a menu
+if [ ${#dests[@]} -eq 0 ]; then
+  echo "error: no such project '$1'"
+  return 1
+
+elif [ ${#dests[@]} -eq 1 ]; then
+  dest="${dests[0]}"
+
+elif [ ${#dests[@]} -gt 1 ]; then
+  PS3="Multiple project directories found. Please select one: "
+  dests+=("cancel")
+  select d in "${dests[@]}"; do
+    case $d in
+      "cancel")
+        return
+        ;;
+      *)
+        dest=$d
+        break
+        ;;
+    esac
+  done
+
+else
+  echo "error: please report this error"
+  return 1 # should never reach this
+
+fi
+
+
+$cmd "$dest"
 }
 
 alias pjo="pj open"
diff --git a/plugins/available/proxy.plugin.bash b/plugins/available/proxy.plugin.bash
index 985d77b4..f2458e3f 100644
--- a/plugins/available/proxy.plugin.bash
+++ b/plugins/available/proxy.plugin.bash
@@ -1,7 +1,8 @@
-# shellcheck shell=bash
+cite about-plugin
 about-plugin 'Proxy Tools'
 
-function disable-proxy() {
+disable-proxy ()
+{
 	about 'Disables proxy settings for Bash, npm and SSH'
 	group 'proxy'
 
@@ -19,17 +20,18 @@ function disable-proxy() {
 	svn-disable-proxy
 }
 
-function enable-proxy() {
+enable-proxy ()
+{
 	about 'Enables proxy settings for Bash, npm and SSH'
 	group 'proxy'
 
-	export http_proxy="${BASH_IT_HTTP_PROXY:-}"
-	export https_proxy="${BASH_IT_HTTPS_PROXY:-}"
-	export HTTP_PROXY="${http_proxy:-}"
-	export HTTPS_PROXY="${https_proxy:-}"
-	export ALL_PROXY="${http_proxy:-}"
-	export no_proxy="${BASH_IT_NO_PROXY:-}"
-	export NO_PROXY="${no_proxy:-}"
+	export http_proxy=$BASH_IT_HTTP_PROXY
+	export https_proxy=$BASH_IT_HTTPS_PROXY
+	export HTTP_PROXY=$http_proxy
+	export HTTPS_PROXY=$https_proxy
+	export ALL_PROXY=$http_proxy
+	export no_proxy=$BASH_IT_NO_PROXY
+	export NO_PROXY=$no_proxy
 	echo "Enabled proxy environment variables"
 
 	npm-enable-proxy
@@ -37,25 +39,27 @@ function enable-proxy() {
 	svn-enable-proxy
 }
 
-function enable-proxy-alt() {
+enable-proxy-alt ()
+{
 	about 'Enables alternate proxy settings for Bash, npm and SSH'
 	group 'proxy'
 
-	export http_proxy="${BASH_IT_HTTP_PROXY_ALT:-}"
-	export https_proxy="${BASH_IT_HTTPS_PROXY_ALT:-}"
-	export HTTP_PROXY="${http_proxy:-}"
-	export HTTPS_PROXY="${https_proxy:-}"
-	export ALL_PROXY="${http_proxy:-}"
-	export no_proxy="${BASH_IT_NO_PROXY:-}"
-	export NO_PROXY="${no_proxy:-}"
+	export http_proxy=$BASH_IT_HTTP_PROXY_ALT
+	export https_proxy=$BASH_IT_HTTPS_PROXY_ALT
+	export HTTP_PROXY=$http_proxy
+	export HTTPS_PROXY=$https_proxy
+	export ALL_PROXY=$http_proxy
+	export no_proxy=$BASH_IT_NO_PROXY
+	export NO_PROXY=$no_proxy
 	echo "Enabled alternate proxy environment variables"
 
-	npm-enable-proxy "${http_proxy:-}" "${https_proxy:-}"
+	npm-enable-proxy $http_proxy $https_proxy
 	ssh-enable-proxy
-	svn-enable-proxy "${http_proxy:-}"
+	svn-enable-proxy $http_proxy
 }
 
-function show-proxy() {
+show-proxy ()
+{
 	about 'Shows the proxy settings for Bash, Git, npm and SSH'
 	group 'proxy'
 
@@ -71,7 +75,8 @@ function show-proxy() {
 	ssh-show-proxy
 }
 
-function proxy-help() {
+proxy-help ()
+{
 	about 'Provides an overview of the bash-it proxy configuration'
 	group 'proxy'
 
@@ -92,7 +97,8 @@ EOF
 	bash-it-show-proxy
 }
 
-function bash-it-show-proxy() {
+bash-it-show-proxy ()
+{
 	about 'Shows the bash-it proxy settings'
 	group 'proxy'
 
@@ -104,25 +110,27 @@ function bash-it-show-proxy() {
 	env | grep -e "BASH_IT.*PROXY"
 }
 
-function npm-show-proxy() {
+npm-show-proxy ()
+{
 	about 'Shows the npm proxy settings'
 	group 'proxy'
 
-	if _command_exists npm; then
+	if $(command -v npm &> /dev/null) ; then
 		echo ""
 		echo "npm"
 		echo "==="
-		echo "npm HTTP  proxy: $(npm config get proxy)"
-		echo "npm HTTPS proxy: $(npm config get https-proxy)"
-		echo "npm proxy exceptions: $(npm config get noproxy)"
+		echo "npm HTTP  proxy: " `npm config get proxy`
+		echo "npm HTTPS proxy: " `npm config get https-proxy`
+		echo "npm proxy exceptions: " `npm config get noproxy`
 	fi
 }
 
-function npm-disable-proxy() {
+npm-disable-proxy ()
+{
 	about 'Disables npm proxy settings'
 	group 'proxy'
 
-	if _command_exists npm; then
+	if $(command -v npm &> /dev/null) ; then
 		npm config delete proxy
 		npm config delete https-proxy
 		npm config delete noproxy
@@ -130,104 +138,113 @@ function npm-disable-proxy() {
 	fi
 }
 
-function npm-enable-proxy() {
+npm-enable-proxy ()
+{
 	about 'Enables npm proxy settings'
 	group 'proxy'
 
-	local my_http_proxy="${1:-${BASH_IT_HTTP_PROXY:-}}"
-	local my_https_proxy="${2:-${BASH_IT_HTTPS_PROXY:-}}"
-	local my_no_proxy="${3:-${BASH_IT_NO_PROXY:-}}"
+	local my_http_proxy=${1:-$BASH_IT_HTTP_PROXY}
+	local my_https_proxy=${2:-$BASH_IT_HTTPS_PROXY}
+	local my_no_proxy=${3:-$BASH_IT_NO_PROXY}
 
-	if _command_exists npm; then
-		npm config set proxy "${my_http_proxy:?}" || return
-		npm config set https-proxy "${my_https_proxy:?}" || return
-		npm config set noproxy "${my_no_proxy:-}" || return
+	if $(command -v npm &> /dev/null) ; then
+		npm config set proxy $my_http_proxy
+		npm config set https-proxy $my_https_proxy
+		npm config set noproxy $my_no_proxy
 		echo "Enabled npm proxy settings"
 	fi
 }
 
-function git-global-show-proxy() {
+git-global-show-proxy ()
+{
 	about 'Shows global Git proxy settings'
 	group 'proxy'
 
-	if _command_exists git; then
+	if $(command -v git &> /dev/null) ; then
 		echo ""
 		echo "Git (Global Settings)"
 		echo "====================="
-		echo "Git (Global) HTTP  proxy: $(git config --global --get http.proxy)"
-		echo "Git (Global) HTTPS proxy: $(git config --global --get https.proxy)"
+		echo "Git (Global) HTTP  proxy: " `git config --global --get http.proxy`
+		echo "Git (Global) HTTPS proxy: " `git config --global --get https.proxy`
 	fi
 }
 
-function git-global-disable-proxy() {
+git-global-disable-proxy ()
+{
 	about 'Disables global Git proxy settings'
 	group 'proxy'
 
-	if _command_exists git; then
+	if $(command -v git &> /dev/null) ; then
 		git config --global --unset-all http.proxy
 		git config --global --unset-all https.proxy
 		echo "Disabled global Git proxy settings"
 	fi
 }
 
-function git-global-enable-proxy() {
+git-global-enable-proxy ()
+{
 	about 'Enables global Git proxy settings'
 	group 'proxy'
 
-	if _command_exists git; then
+	if $(command -v git &> /dev/null) ; then
 		git-global-disable-proxy
 
-		git config --global --add http.proxy "${BASH_IT_HTTP_PROXY:?}"
-		git config --global --add https.proxy "${BASH_IT_HTTPS_PROXY:?}"
+		git config --global --add http.proxy $BASH_IT_HTTP_PROXY
+		git config --global --add https.proxy $BASH_IT_HTTPS_PROXY
 		echo "Enabled global Git proxy settings"
 	fi
 }
 
-function git-show-proxy() {
+git-show-proxy ()
+{
 	about 'Shows current Git project proxy settings'
 	group 'proxy'
 
-	if _command_exists git; then
+	if $(command -v git &> /dev/null) ; then
 		echo "Git Project Proxy Settings"
 		echo "====================="
-		echo "Git HTTP  proxy: $(git config --get http.proxy)"
-		echo "Git HTTPS proxy: $(git config --get https.proxy)"
+		echo "Git HTTP  proxy: " `git config --get http.proxy`
+		echo "Git HTTPS proxy: " `git config --get https.proxy`
 	fi
 }
 
-function git-disable-proxy() {
+git-disable-proxy ()
+{
 	about 'Disables current Git project proxy settings'
 	group 'proxy'
 
-	if _command_exists git; then
+	if $(command -v git &> /dev/null) ; then
 		git config --unset-all http.proxy
 		git config --unset-all https.proxy
 		echo "Disabled Git project proxy settings"
 	fi
 }
 
-function git-enable-proxy() {
+git-enable-proxy ()
+{
 	about 'Enables current Git project proxy settings'
 	group 'proxy'
 
-	if _command_exists git; then
+	if $(command -v git &> /dev/null) ; then
 		git-disable-proxy
 
-		git config --add http.proxy "${BASH_IT_HTTP_PROXY:?}"
-		git config --add https.proxy "${BASH_IT_HTTPS_PROXY:?}"
+		git config --add http.proxy $BASH_IT_HTTP_PROXY
+		git config --add https.proxy $BASH_IT_HTTPS_PROXY
 		echo "Enabled Git project proxy settings"
 	fi
 }
 
-function svn-show-proxy() {
+
+svn-show-proxy ()
+{
 	about 'Shows SVN proxy settings'
 	group 'proxy'
 
-	if _command_exists svn && _command_exists python2; then
+	if $(command -v svn &> /dev/null) && $(command -v python2 &> /dev/null) ; then
 		echo ""
 		echo "SVN Proxy Settings"
 		echo "=================="
-		python2 - << END
+		python2 - <<END
 import ConfigParser, os
 config = ConfigParser.ConfigParser()
 config.read(os.path.expanduser('~/.subversion/servers'))
@@ -248,12 +265,13 @@ END
 	fi
 }
 
-function svn-disable-proxy() {
+svn-disable-proxy ()
+{
 	about 'Disables SVN proxy settings'
 	group 'proxy'
 
-	if _command_exists svn_command_exists python2; then
-		python2 - << END
+	if $(command -v svn &> /dev/null) && $(command -v python2 &> /dev/null) ; then
+		python2 - <<END
 import ConfigParser, os
 config = ConfigParser.ConfigParser()
 config.read(os.path.expanduser('~/.subversion/servers'))
@@ -276,14 +294,15 @@ END
 	fi
 }
 
-function svn-enable-proxy() {
+svn-enable-proxy ()
+{
 	about 'Enables SVN proxy settings'
 	group 'proxy'
 
-	if _command_exists svn _command_exists python2; then
-		local my_http_proxy="${1:-${BASH_IT_HTTP_PROXY:-}}"
+	if $(command -v svn &> /dev/null) && $(command -v python2 &> /dev/null) ; then
+		local my_http_proxy=${1:-$BASH_IT_HTTP_PROXY}
 
-		python2 - "${my_http_proxy:?}" "${BASH_IT_NO_PROXY:-}" << END
+		python2 - "$my_http_proxy" "$BASH_IT_NO_PROXY" <<END
 import ConfigParser, os, sys, urlparse
 pieces = urlparse.urlparse(sys.argv[1])
 host = pieces.hostname
@@ -312,11 +331,12 @@ END
 	fi
 }
 
-function ssh-show-proxy() {
+ssh-show-proxy ()
+{
 	about 'Shows SSH config proxy settings (from ~/.ssh/config)'
 	group 'proxy'
 
-	if [ -f ~/.ssh/config ]; then
+	if [ -f ~/.ssh/config ] ; then
 		echo ""
 		echo "SSH Config Enabled in ~/.ssh/config"
 		echo "==================================="
@@ -348,22 +368,25 @@ function ssh-show-proxy() {
 	fi
 }
 
-function ssh-disable-proxy() {
+ssh-disable-proxy ()
+{
 	about 'Disables SSH config proxy settings'
 	group 'proxy'
 
-	if [ -f ~/.ssh/config ]; then
-		sed -e's/^.*ProxyCommand/#	ProxyCommand/' "${BASH_IT_SED_I_PARAMETERS[@]}" ~/.ssh/config
+	if [ -f ~/.ssh/config ] ; then
+		sed -e's/^.*ProxyCommand/#	ProxyCommand/' "${BASH_IT_SED_I_PARAMETERS[@]}"  ~/.ssh/config
 		echo "Disabled SSH config proxy settings"
 	fi
 }
 
-function ssh-enable-proxy() {
+
+ssh-enable-proxy ()
+{
 	about 'Enables SSH config proxy settings'
 	group 'proxy'
 
-	if [ -f ~/.ssh/config ]; then
-		sed -e's/#	ProxyCommand/	ProxyCommand/' "${BASH_IT_SED_I_PARAMETERS[@]}" ~/.ssh/config
+	if [ -f ~/.ssh/config ] ; then
+		sed -e's/#	ProxyCommand/	ProxyCommand/' "${BASH_IT_SED_I_PARAMETERS[@]}"  ~/.ssh/config
 		echo "Enabled SSH config proxy settings"
 	fi
 }
diff --git a/plugins/available/pyenv.plugin.bash b/plugins/available/pyenv.plugin.bash
index 05d28478..9457f835 100644
--- a/plugins/available/pyenv.plugin.bash
+++ b/plugins/available/pyenv.plugin.bash
@@ -1,34 +1,13 @@
-# shellcheck shell=bash
 cite about-plugin
 about-plugin 'load pyenv, if you are using it'
 
-# https://github.com/pyenv/pyenv
+export PYENV_ROOT="$HOME/.pyenv"
+pathmunge "$PYENV_ROOT/bin"
 
-# Load after basher
-# BASH_IT_LOAD_PRIORITY: 260
+[[ `which pyenv 2>/dev/null` ]] && eval "$(pyenv init --path)"
+[[ `which pyenv 2>/dev/null` ]] && eval "$(pyenv init -)"
 
-# Don't modify the environment if we can't find the tool:
-# - Check if in $PATH already
-# - Check if installed manually to $PYENV_ROOT
-# - Check if installed manually to $HOME
-_command_exists pyenv \
-	|| [[ -n "$PYENV_ROOT" && -x "$PYENV_ROOT/bin/pyenv" ]] \
-	|| [[ -x "$HOME/.pyenv/bin/pyenv" ]] \
-	|| return 0
-
-# Set PYENV_ROOT, if not already set
-export PYENV_ROOT="${PYENV_ROOT:-$HOME/.pyenv}"
-
-# Add PYENV_ROOT/bin to PATH, if that's where it's installed
-if ! _command_exists pyenv && [[ -x "$PYENV_ROOT/bin/pyenv" ]]; then
-	pathmunge "$PYENV_ROOT/bin"
-fi
-
-# Initialize pyenv
-pathmunge "$PYENV_ROOT/shims"
-eval "$(pyenv init - bash)"
-
-# Load pyenv virtualenv if the virtualenv plugin is installed.
+#Load pyenv virtualenv if the virtualenv plugin is installed.
 if pyenv virtualenv-init - &> /dev/null; then
-	eval "$(pyenv virtualenv-init - bash)"
+  eval "$(pyenv virtualenv-init - bash)"
 fi
diff --git a/plugins/available/python.plugin.bash b/plugins/available/python.plugin.bash
index bd644e8b..77fa7dd6 100644
--- a/plugins/available/python.plugin.bash
+++ b/plugins/available/python.plugin.bash
@@ -1,32 +1,31 @@
-# shellcheck shell=bash
+cite about-plugin
 about-plugin 'alias "shttp" to SimpleHTTPServer'
 
-if _command_exists python3; then
-	alias shttp='python3 -m http.server'
-elif _command_exists python; then
-	alias shttp='python -m http.server'
+if [[ "$OSTYPE" == 'linux'* ]]
+then
+  alias shttp='python2 -m SimpleHTTPServer'
 else
-	_log_warning "Unable to load 'plugin/python' due to being unable to find a working 'python'"
-	return 1
+  alias shttp='python -m SimpleHTTPServer'
 fi
 
 function pyedit() {
-	about 'opens python module in your EDITOR'
-	param '1: python module to open'
-	example '$ pyedit requests'
-	group 'python'
+    about 'opens python module in your EDITOR'
+    param '1: python module to open'
+    example '$ pyedit requests'
+    group 'python'
 
-	xpyc="$(python -c "import os, sys; f = open(os.devnull, 'w'); sys.stderr = f; module = __import__('$1'); sys.stdout.write(module.__file__)")"
+    xpyc=`python -c "import os, sys; f = open(os.devnull, 'w'); sys.stderr = f; module = __import__('$1'); sys.stdout.write(module.__file__)"`
 
-	if [[ "$xpyc" == "" ]]; then
-		echo "Python module $1 not found"
-		return 1
-	elif [[ "$xpyc" == *__init__.py* ]]; then
-		xpydir="${xpyc%/*}"
-		echo "$EDITOR $xpydir"
-		${VISUAL:-${EDITOR:-${ALTERNATE_EDITOR:-nano}}} "$xpydir"
-	else
-		echo "$EDITOR ${xpyc%.*}.py"
-		${VISUAL:-${EDITOR:-${ALTERNATE_EDITOR:-nano}}} "${xpyc%.*}.py"
-	fi
+    if [[ "$xpyc" == "" ]]; then
+        echo "Python module $1 not found"
+        return -1
+
+    elif [[ $xpyc == *__init__.py* ]]; then
+        xpydir=`dirname $xpyc`;
+        echo "$EDITOR $xpydir";
+        $EDITOR "$xpydir";
+    else
+        echo "$EDITOR ${xpyc%.*}.py";
+        $EDITOR "${xpyc%.*}.py";
+    fi
 }
diff --git a/plugins/available/rakudobrew.plugin.bash b/plugins/available/rakudobrew.plugin.bash
new file mode 100644
index 00000000..98ff09da
--- /dev/null
+++ b/plugins/available/rakudobrew.plugin.bash
@@ -0,0 +1,9 @@
+# Load rakudobrew, if you are using it
+
+cite about-plugin
+about-plugin 'load rakudobrew, if you are using it'
+
+pathmunge "$HOME"/.rakudobrew/bin
+[ -x `which rakudobrew` ] && eval "$(rakudobrew init Bash)"
+
+#[ -d "$HOME"/.rakudobrew/plugins/ruby-build ] && pathmunge "$HOME"/.rakudobrew/plugins/ruby-build/bin
diff --git a/plugins/available/roo.plugin.bash b/plugins/available/roo.plugin.bash
new file mode 100644
index 00000000..00ea6638
--- /dev/null
+++ b/plugins/available/roo.plugin.bash
@@ -0,0 +1,9 @@
+cite about-plugin
+about-plugin 'load roo, if you are using it'
+
+# roo
+if [ -d "/opt/spring-roo" ]; then
+  export ROO_HOME="/opt/spring-roo"
+  export PATH="$PATH:$ROO_HOME/bin"
+fi
+
diff --git a/plugins/available/rustup.plugin.bash b/plugins/available/rustup.plugin.bash
new file mode 100644
index 00000000..0a32671d
--- /dev/null
+++ b/plugins/available/rustup.plugin.bash
@@ -0,0 +1,18 @@
+# plugin for rustup
+
+cite about-plugin
+about-plugin 'rustup plugin for rust'
+
+if [[ -e "${HOME}/.cargo/bin" ]] ; then
+
+  # load rustup bin dir into path if it exists
+  pathmunge "${HOME}/.cargo/bin"
+
+fi
+
+if [[ `which rustup` ]] ; then
+
+  # init rustup
+  eval "$(rustup completions bash)"
+
+fi
diff --git a/plugins/available/todo.plugin.bash b/plugins/available/todo.plugin.bash
index 6b495274..cf1479e2 100644
--- a/plugins/available/todo.plugin.bash
+++ b/plugins/available/todo.plugin.bash
@@ -1,6 +1,12 @@
-# shellcheck shell=bash
+#!/bin/bash
+cite about-plugin
 about-plugin 'Todo.txt integration'
 
 # you may override any of the exported variables below in your .bash_profile
-: "${TODOTXT_DEFAULT_ACTION:=ls}"
-export TODOTXT_DEFAULT_ACTION
+
+if [ -z "$TODOTXT_DEFAULT_ACTION" ]; then
+  # typing 't' by itself will list current todos
+  export TODOTXT_DEFAULT_ACTION=ls
+fi
+
+alias t='todo.sh'
diff --git a/plugins/available/visual-studio-code.plugin.bash b/plugins/available/visual-studio-code.plugin.bash
new file mode 100644
index 00000000..5bc20995
--- /dev/null
+++ b/plugins/available/visual-studio-code.plugin.bash
@@ -0,0 +1,12 @@
+cite about-plugin
+about-plugin 'Defines the `code` executable for Visual Studio Code on OS X'
+
+# Based on https://code.visualstudio.com/Docs/editor/setup
+if [[ `uname -s` == "Darwin" ]]; then
+  function code () {
+    about 'Starts Visual Studio Code in the provided directory'
+    group 'visual-studio-code'
+
+    VSCODE_CWD="$PWD" open -n -b "com.microsoft.VSCode" --args $* ;
+  }
+fi
diff --git a/plugins/available/xterm.plugin.bash b/plugins/available/xterm.plugin.bash
index 740460e4..b8747a25 100644
--- a/plugins/available/xterm.plugin.bash
+++ b/plugins/available/xterm.plugin.bash
@@ -30,11 +30,7 @@ precmd_xterm_title() {
 }
 
 preexec_xterm_title() {
-	local command_line="${BASH_COMMAND:-${1:-}}"
-	local directory_name short_command
-	directory_name="$(_short-dirname)"
-	short_command="$(_short-command "${command_line}")"
-	set_xterm_title "${short_command} {${directory_name}} (${SHORT_USER:-${USER}}@${SHORT_HOSTNAME:-${HOSTNAME}})"
+	set_xterm_title "$(_short-command "${1:-}") {$(_short-dirname)} (${SHORT_USER:-${USER}}@${SHORT_HOSTNAME:-${HOSTNAME}})"
 }
 
 case "${TERM:-dumb}" in
diff --git a/plugins/available/z.plugin.bash b/plugins/available/z.plugin.bash
new file mode 100644
index 00000000..66535756
--- /dev/null
+++ b/plugins/available/z.plugin.bash
@@ -0,0 +1,153 @@
+cite about-plugin
+about-plugin 'maintains a jump-list of the directories you actually use'
+about-plugin '                              z is DEPRECATED, use fasd instead'
+
+# INSTALL:
+#   * put something like this in your .bashrc:
+#     . /path/to/z.sh
+#   * cd around for a while to build up the db
+#   * PROFIT!!
+#
+# USE:
+#   * z foo     # goes to most frecent dir matching foo
+#   * z foo bar # goes to most frecent dir matching foo and bar
+#   * z -r foo  # goes to highest ranked dir matching foo
+#   * z -t foo  # goes to most recently accessed dir matching foo
+#   * z -l foo  # list all dirs matching foo (by frecency)
+
+if [ -e $BASH_IT/plugins/enabled/fasd.plugin.bash ]; then
+    printf '%s\n' 'sorry, the z plugin is incompatible with the fasd plugin. you may use either, but not both.'
+    return
+fi
+
+z() {
+ local datafile="$HOME/.z"
+ if [ "$1" = "--add" ]; then
+  # add
+  shift
+  # $HOME isn't worth matching
+  [ "$*" = "$HOME" ] && return
+  awk -v p="$*" -v t="$(date +%s)" -F"|" '
+   BEGIN { rank[p] = 1; time[p] = t }
+   $2 >= 1 {
+    if( $1 == p ) {
+     rank[$1] = $2 + 1
+     time[$1] = t
+    } else {
+     rank[$1] = $2
+     time[$1] = $3
+    }
+    count += $2
+   }
+   END {
+    if( count > 1000 ) {
+     for( i in rank ) print i "|" 0.9*rank[i] "|" time[i] # aging
+    } else for( i in rank ) print i "|" rank[i] "|" time[i]
+   }
+  ' "$datafile" 2>/dev/null > "$datafile.tmp"
+  mv -f "$datafile.tmp" "$datafile"
+ elif [ "$1" = "--complete" ]; then
+  # tab completion
+  awk -v q="$2" -F"|" '
+   BEGIN {
+    if( q == tolower(q) ) nocase = 1
+    split(substr(q,3),fnd," ")
+   }
+   {
+    if( system("test -d \"" $1 "\"") ) next
+    if( nocase ) {
+     for( i in fnd ) tolower($1) !~ tolower(fnd[i]) && $1 = ""
+     if( $1 ) print $1
+    } else {
+     for( i in fnd ) $1 !~ fnd[i] && $1 = ""
+     if( $1 ) print $1
+    }
+   }
+  ' "$datafile" 2>/dev/null
+ else
+  # list/go
+  while [ "$1" ]; do case "$1" in
+   -h) echo "z [-h][-l][-r][-t] args" >&2; return;;
+   -l) local list=1;;
+   -r) local typ="rank";;
+   -t) local typ="recent";;
+   --) while [ "$1" ]; do shift; local fnd="$fnd $1";done;;
+    *) local fnd="$fnd $1";;
+  esac; local last=$1; shift; done
+  [ "$fnd" ] || local list=1
+  # if we hit enter on a completion just go there
+  [ -d "$last" ] && cd "$last" && return
+  [ -f "$datafile" ] || return
+  local cd="$(awk -v t="$(date +%s)" -v list="$list" -v typ="$typ" -v q="$fnd" -v tmpfl="$datafile.tmp" -F"|" '
+   function frecent(rank, time) {
+    dx = t-time
+    if( dx < 3600 ) return rank*4
+    if( dx < 86400 ) return rank*2
+    if( dx < 604800 ) return rank/2
+    return rank/4
+   }
+   function output(files, toopen, override) {
+    if( list ) {
+     if( typ == "recent" ) {
+      cmd = "sort -nr >&2"
+     } else cmd = "sort -n >&2"
+     for( i in files ) if( files[i] ) printf "%-10s %s\n", files[i], i | cmd
+     if( override ) printf "%-10s %s\n", "common:", override > "/dev/stderr"
+    } else {
+     if( override ) toopen = override
+     print toopen
+    }
+   }
+   function common(matches, fnd, nc) {
+    for( i in matches ) {
+     if( matches[i] && (!short || length(i) < length(short)) ) short = i
+    }
+    if( short == "/" ) return
+    for( i in matches ) if( matches[i] && i !~ short ) x = 1
+    if( x ) return
+    if( nc ) {
+     for( i in fnd ) if( tolower(short) !~ tolower(fnd[i]) ) x = 1
+    } else for( i in fnd ) if( short !~ fnd[i] ) x = 1
+    if( !x ) return short
+   }
+   BEGIN { split(q, a, " ") }
+   {
+    if( system("test -d \"" $1 "\"") ) next
+    print $0 >> tmpfl
+    if( typ == "rank" ) {
+     f = $2
+    } else if( typ == "recent" ) {
+     f = t-$3
+    } else f = frecent($2, $3)
+    wcase[$1] = nocase[$1] = f
+    for( i in a ) {
+     if( $1 !~ a[i] ) delete wcase[$1]
+     if( tolower($1) !~ tolower(a[i]) ) delete nocase[$1]
+    }
+    if( wcase[$1] > oldf ) {
+     cx = $1
+     oldf = wcase[$1]
+    } else if( nocase[$1] > noldf ) {
+     ncx = $1
+     noldf = nocase[$1]
+    }
+   }
+   END {
+    if( cx ) {
+     output(wcase, cx, common(wcase, a, 0))
+    } else if( ncx ) output(nocase, ncx, common(nocase, a, 1))
+   }
+  ' "$datafile")"
+  if [ $? -gt 0 ]; then
+   rm -f "$datafile.tmp"
+  else
+   mv -f "$datafile.tmp" "$datafile"
+   [ "$cd" ] && cd "$cd"
+  fi
+ fi
+}
+# tab completion
+complete -C 'z --complete "$COMP_LINE"' z
+# populate directory list. avoid clobbering other PROMPT_COMMANDs.
+echo $PROMPT_COMMAND | grep -q "z --add"
+[ $? -gt 0 ] && PROMPT_COMMAND='z --add "$(pwd -P)";'"$PROMPT_COMMAND"
diff --git a/test/README.md b/test/README.md
new file mode 100644
index 00000000..281b1b6f
--- /dev/null
+++ b/test/README.md
@@ -0,0 +1,4 @@
+## Testing with [Bats](https://github.com/sstephenson/bats#installing-bats-from-source)
+```
+bats test/{lib,plugins}
+```
diff --git a/test/plugins/cmd-returned-notify.plugin.bats b/test/plugins/cmd-returned-notify.plugin.bats
index a5ae591a..04edad95 100644
--- a/test/plugins/cmd-returned-notify.plugin.bats
+++ b/test/plugins/cmd-returned-notify.plugin.bats
@@ -9,7 +9,7 @@ function local_setup_file() {
 
 @test "plugins cmd-returned-notify: notify after elapsed time" {
 	export NOTIFY_IF_COMMAND_RETURNS_AFTER=0
-	export COMMAND_DURATION_START_SECONDS="$(_shell_duration_en)"
+	export COMMAND_DURATION_START_SECONDS="${EPOCHREALTIME:-$SECONDS}"
 	sleep 1
 	run precmd_return_notification
 	assert_success
@@ -18,7 +18,7 @@ function local_setup_file() {
 
 @test "plugins cmd-returned-notify: do not notify before elapsed time" {
 	export NOTIFY_IF_COMMAND_RETURNS_AFTER=10
-	export COMMAND_DURATION_START_SECONDS="$(_shell_duration_en)"
+	export COMMAND_DURATION_START_SECONDS="${EPOCHREALTIME:-$SECONDS}"
 	sleep 1
 	run precmd_return_notification
 	assert_success
@@ -34,7 +34,7 @@ function local_setup_file() {
 @test "lib command_duration: preexec set COMMAND_DURATION_START_SECONDS" {
 	export COMMAND_DURATION_START_SECONDS=
 	assert_equal "${COMMAND_DURATION_START_SECONDS}" ""
-	NOW="$(_shell_duration_en)"
+	NOW="${EPOCHREALTIME:-$SECONDS}"
 	_command_duration_pre_exec
 	# We need to make sure to account for nanoseconds...
 	assert_equal "${COMMAND_DURATION_START_SECONDS%.*}" "${NOW%.*}"
diff --git a/themes/.nvimlog b/themes/.nvimlog
new file mode 100644
index 00000000..e69de29b
diff --git a/themes/90210/90210.theme.bash b/themes/90210/90210.theme.bash
index 6b94427a..3db3f17b 100644
--- a/themes/90210/90210.theme.bash
+++ b/themes/90210/90210.theme.bash
@@ -1,21 +1,20 @@
 # shellcheck shell=bash
 # shellcheck disable=SC2034 # Expected behavior for themes.
+# shellcheck disable=SC2154 #TODO: fix these all.
 
-SCM_THEME_PROMPT_DIRTY=" ${red?}✗"
-SCM_THEME_PROMPT_CLEAN=" ${bold_green?}✓"
+SCM_THEME_PROMPT_DIRTY=" ${red}✗"
+SCM_THEME_PROMPT_CLEAN=" ${bold_green}✓"
 SCM_THEME_PROMPT_PREFIX=" |"
-SCM_THEME_PROMPT_SUFFIX="${green?}|"
+SCM_THEME_PROMPT_SUFFIX="${green}|"
 
-GIT_THEME_PROMPT_DIRTY=" ${red?}✗"
-GIT_THEME_PROMPT_CLEAN=" ${bold_green?}✓"
-GIT_THEME_PROMPT_PREFIX=" ${green?}|"
-GIT_THEME_PROMPT_SUFFIX="${green?}|"
+GIT_THEME_PROMPT_DIRTY=" ${red}✗"
+GIT_THEME_PROMPT_CLEAN=" ${bold_green}✓"
+GIT_THEME_PROMPT_PREFIX=" ${green}|"
+GIT_THEME_PROMPT_SUFFIX="${green}|"
 
 # Nicely formatted terminal prompt
 function prompt_command() {
-	local scm_prompt_info
-	scm_prompt_info="$(scm_prompt_info)"
-	PS1="\n${bold_black?}[${blue?}\@${bold_black?}]-${bold_black?}[${green?}\u${yellow?}@${green?}\h${bold_black?}]-${bold_black?}[${purple?}\w${bold_black?}]-${scm_prompt_info?}\n${reset_color?}\$ "
+	PS1="\n${bold_black}[${blue}\@${bold_black}]-${bold_black}[${green}\u${yellow}@${green}\h${bold_black}]-${bold_black}[${purple}\w${bold_black}]-$(scm_prompt_info)\n${reset_color}\$ "
 }
 
 safe_append_prompt_command prompt_command
diff --git a/themes/agnoster/agnoster.theme.bash b/themes/agnoster/agnoster.theme.bash
index d5bac5ca..20c184f3 100644
--- a/themes/agnoster/agnoster.theme.bash
+++ b/themes/agnoster/agnoster.theme.bash
@@ -182,7 +182,7 @@ prompt_segment() {
 	# declare -p codes
 
 	if [[ $CURRENT_BG != NONE && $1 != "$CURRENT_BG" ]]; then
-		declare -a intermediate=("$(fg_color "$CURRENT_BG")" "$(bg_color "$1")")
+		declare -a intermediate=("$(fg_color $CURRENT_BG)" "$(bg_color "$1")")
 		debug "pre prompt " "$(ansi intermediate[@])"
 		PR="$PR $(ansi intermediate[@])$SEGMENT_SEPARATOR"
 		debug "post prompt " "$(ansi codes[@])"
diff --git a/themes/atomic/atomic.theme.bash b/themes/atomic/atomic.theme.bash
index c59dbdc9..03dc9e95 100644
--- a/themes/atomic/atomic.theme.bash
+++ b/themes/atomic/atomic.theme.bash
@@ -1,5 +1,6 @@
 # shellcheck shell=bash
 # shellcheck disable=SC2034 # Expected behavior for themes.
+# shellcheck disable=SC2154 #TODO: fix these all.
 
 # Atomic Bash Prompt for Bash-it
 # By lfelipe base on the theme brainy of MunifTanjim
@@ -28,48 +29,48 @@ Face="\342\230\273"
 ## Parsers ##
 #############
 
-function ____atomic_top_left_parse() {
-	local ifs_old="${IFS}"
-	local IFS="|"
+____atomic_top_left_parse() {
+	ifs_old="${IFS}"
+	IFS="|"
 	read -r -a args <<< "$@"
 	IFS="${ifs_old}"
-	if [[ -n "${args[3]:-}" ]]; then
-		_TOP_LEFT+="${args[2]?}${args[3]?}"
+	if [ -n "${args[3]}" ]; then
+		_TOP_LEFT+="${args[2]}${args[3]}"
 	fi
-	_TOP_LEFT+="${args[0]?}${args[1]:-}"
-	if [[ -n "${args[4]:-}" ]]; then
-		_TOP_LEFT+="${args[2]?}${args[4]?}"
+	_TOP_LEFT+="${args[0]}${args[1]}"
+	if [ -n "${args[4]}" ]; then
+		_TOP_LEFT+="${args[2]}${args[4]}"
 	fi
 	_TOP_LEFT+=""
 }
 
-function ____atomic_top_right_parse() {
-	local ifs_old="${IFS}"
-	local IFS="|"
+____atomic_top_right_parse() {
+	ifs_old="${IFS}"
+	IFS="|"
 	read -r -a args <<< "$@"
 	IFS="${ifs_old}"
 	_TOP_RIGHT+=" "
-	if [[ -n "${args[3]:-}" ]]; then
-		_TOP_RIGHT+="${args[2]?}${args[3]?}"
+	if [ -n "${args[3]}" ]; then
+		_TOP_RIGHT+="${args[2]}${args[3]}"
 	fi
-	_TOP_RIGHT+="${args[0]?}${args[1]:-}"
-	if [[ -n "${args[4]:-}" ]]; then
-		_TOP_RIGHT+="${args[2]?}${args[4]?}"
+	_TOP_RIGHT+="${args[0]}${args[1]}"
+	if [ -n "${args[4]}" ]; then
+		_TOP_RIGHT+="${args[2]}${args[4]}"
 	fi
 	__TOP_RIGHT_LEN=$((__TOP_RIGHT_LEN + ${#args[1]} + ${#args[3]} + ${#args[4]} + 1))
 	((__SEG_AT_RIGHT += 1))
 }
 
-function ____atomic_bottom_parse() {
-	local ifs_old="${IFS}"
-	local IFS="|"
+____atomic_bottom_parse() {
+	ifs_old="${IFS}"
+	IFS="|"
 	read -r -a args <<< "$@"
 	IFS="${ifs_old}"
-	_BOTTOM+="${args[0]?}${args[1]?${FUNCNAME[0]}}"
-	[[ ${#args[1]} -gt 0 ]] && _BOTTOM+=" "
+	_BOTTOM+="${args[0]}${args[1]}"
+	[ ${#args[1]} -gt 0 ] && _BOTTOM+=" "
 }
 
-function ____atomic_top() {
+____atomic_top() {
 	_TOP_LEFT=""
 	_TOP_RIGHT=""
 	__TOP_RIGHT_LEN=0
@@ -77,7 +78,7 @@ function ____atomic_top() {
 
 	for seg in ${___ATOMIC_TOP_LEFT}; do
 		info="$(___atomic_prompt_"${seg}")"
-		[[ -n "${info}" ]] && ____atomic_top_left_parse "${info}"
+		[ -n "${info}" ] && ____atomic_top_left_parse "${info}"
 	done
 
 	___cursor_right="\e[500C"
@@ -85,21 +86,21 @@ function ____atomic_top() {
 
 	for seg in ${___ATOMIC_TOP_RIGHT}; do
 		info="$(___atomic_prompt_"${seg}")"
-		[[ -n "${info}" ]] && ____atomic_top_right_parse "${info}"
+		[ -n "${info}" ] && ____atomic_top_right_parse "${info}"
 	done
 
-	[[ $__TOP_RIGHT_LEN -gt 0 ]] && __TOP_RIGHT_LEN=$((__TOP_RIGHT_LEN - 0))
+	[ $__TOP_RIGHT_LEN -gt 0 ] && __TOP_RIGHT_LEN=$((__TOP_RIGHT_LEN - 0))
 	___cursor_adjust="\e[${__TOP_RIGHT_LEN}D"
 	_TOP_LEFT+="${___cursor_adjust}"
 
 	printf "%s%s" "${_TOP_LEFT}" "${_TOP_RIGHT}"
 }
 
-function ____atomic_bottom() {
+____atomic_bottom() {
 	_BOTTOM=""
 	for seg in $___ATOMIC_BOTTOM; do
 		info="$(___atomic_prompt_"${seg}")"
-		[[ -n "${info}" ]] && ____atomic_bottom_parse "${info}"
+		[ -n "${info}" ] && ____atomic_bottom_parse "${info}"
 	done
 	printf "\n%s" "${_BOTTOM}"
 }
@@ -108,96 +109,95 @@ function ____atomic_bottom() {
 ## Segments ##
 ##############
 
-function ___atomic_prompt_user_info() {
-	local color="${white?}" box
-	local info="${IYellow}\u${IRed}@${IGreen}\h"
-	box="${normal?}${LineA?}\$([[ \$? != 0 ]] && echo \"${BIWhite?}[${IRed?}${SX?}${BIWhite?}]${normal?}${Line?}\")${Line?}${BIWhite?}[|${BIWhite?}]${normal?}${Line?}"
+___atomic_prompt_user_info() {
+	color=$white
+	box="${normal}${LineA}\$([[ \$? != 0 ]] && echo \"${BIWhite}[${IRed}${SX}${BIWhite}]${normal}${Line}\")${Line}${BIWhite}[|${BIWhite}]${normal}${Line}"
+	info="${IYellow}\u${IRed}@${IGreen}\h"
 
-	printf "%s|%s|%s|%s" "${color}" "${info}" "${white?}" "${box}"
+	printf "%s|%s|%s|%s" "${color}" "${info}" "${white}" "${box}"
 }
 
-function ___atomic_prompt_dir() {
-	local color="${IRed?}"
-	local box="[|]${normal}"
-	local info="\w"
-	printf "%s|%s|%s|%s" "${color}" "${info}" "${bold_white?}" "${box}"
+___atomic_prompt_dir() {
+	color=${IRed}
+	box="[|]${normal}"
+	info="\w"
+	printf "%s|%s|%s|%s" "${color}" "${info}" "${bold_white}" "${box}"
 }
 
-function ___atomic_prompt_scm() {
-	[[ "${THEME_SHOW_SCM:-}" != "true" ]] && return
-	local color="${bold_green?}" box info
-	box="${Line?}[${IWhite?}$(scm_char)] "
+___atomic_prompt_scm() {
+	[ "${THEME_SHOW_SCM}" != "true" ] && return
+	color=$bold_green
+	box="${Line}[${IWhite}$(scm_char)] "
 	info="$(scm_prompt_info)"
-	printf "%s|%s|%s|%s" "${color}" "${info}" "${bold_white?}" "${box}"
+	printf "%s|%s|%s|%s" "${color}" "${info}" "${bold_white}" "${box}"
 }
 
-function ___atomic_prompt_python() {
-	[[ "${THEME_SHOW_PYTHON:-}" != "true" ]] && return
-	local color="${bold_yellow?}"
-	local box="[|]" info
+___atomic_prompt_python() {
+	[ "${THEME_SHOW_PYTHON}" != "true" ] && return
+	color=$bold_yellow
+	box="[|]"
 	info="$(python_version_prompt)"
-	printf "%s|%s|%s|%s" "${color}" "${info}" "${bold_blue?}" "${box}"
+	printf "%s|%s|%s|%s" "${color}" "${info}" "${bold_blue}" "${box}"
 }
 
-function ___atomic_prompt_ruby() {
-	[[ "${THEME_SHOW_RUBY:-}" != "true" ]] && return
-	local color="${bold_white?}"
-	local box="[|]" info
+___atomic_prompt_ruby() {
+	[ "${THEME_SHOW_RUBY}" != "true" ] && return
+	color=$bold_white
+	box="[|]"
 	info="rb-$(ruby_version_prompt)"
-	printf "%s|%s|%s|%s" "${color}" "${info}" "${bold_red?}" "${box}"
+	printf "%s|%s|%s|%s" "${color}" "${info}" "${bold_red}" "${box}"
 }
 
-function ___atomic_prompt_todo() {
-	[[ "${THEME_SHOW_TODO:-}" != "true" ||
-		-z "$(which todo.sh)" ]] && return
-	local color="${bold_white?}"
-	local box="[|]" info
+___atomic_prompt_todo() {
+	[ "${THEME_SHOW_TODO}" != "true" ] \
+		|| [ -z "$(which todo.sh)" ] && return
+	color=$bold_white
+	box="[|]"
 	info="t:$(todo.sh ls | grep -E "TODO: [0-9]+ of ([0-9]+)" | awk '{ print $4 }')"
-	printf "%s|%s|%s|%s" "${color}" "${info}" "${bold_green?}" "${box}"
+	printf "%s|%s|%s|%s" "${color}" "${info}" "${bold_green}" "${box}"
 }
 
-function ___atomic_prompt_clock() {
-	[[ "${THEME_SHOW_CLOCK:-}" != "true" ]] && return
-	local color="${THEME_CLOCK_COLOR:-}"
-	local box="[|]" info
+___atomic_prompt_clock() {
+	[ "${THEME_SHOW_CLOCK}" != "true" ] && return
+	color=$THEME_CLOCK_COLOR
+	box="[|]"
 	info="$(date +"${THEME_CLOCK_FORMAT}")"
-	printf "%s|%s|%s|%s" "${color}" "${info}" "${bold_white?}" "${box}"
+	printf "%s|%s|%s|%s" "${color}" "${info}" "${bold_white}" "${box}"
 }
 
-function ___atomic_prompt_battery() {
-	local batp box info
+___atomic_prompt_battery() {
 	! _command_exists battery_percentage \
-		|| [[ "${THEME_SHOW_BATTERY:-}" != "true" ]] \
-		|| [[ "$(battery_percentage)" = "no" ]] && return
+		|| [ "${THEME_SHOW_BATTERY}" != "true" ] \
+		|| [ "$(battery_percentage)" = "no" ] && return
 
 	batp=$(battery_percentage)
-	if [[ "$batp" -eq 50 || "$batp" -gt 50 ]]; then
-		color="${bold_green?}"
-	elif [[ "$batp" -lt 50 && "$batp" -gt 25 ]]; then
-		color="${bold_yellow?}"
-	elif [[ "$batp" -eq 25 || "$batp" -lt 25 ]]; then
-		color="${IRed?}"
+	if [ "$batp" -eq 50 ] || [ "$batp" -gt 50 ]; then
+		color=$bold_green
+	elif [ "$batp" -lt 50 ] && [ "$batp" -gt 25 ]; then
+		color=$bold_yellow
+	elif [ "$batp" -eq 25 ] || [ "$batp" -lt 25 ]; then
+		color=$IRed
 	fi
 	box="[|]"
 	ac_adapter_connected && info="+"
 	ac_adapter_disconnected && info="-"
 	info+=$batp
-	[[ "$batp" -eq 100 || "$batp" -gt 100 ]] && info="AC"
-	printf "%s|%s|%s|%s" "${color}" "${info}" "${bold_white?}" "${box}"
+	[ "$batp" -eq 100 ] || [ "$batp" -gt 100 ] && info="AC"
+	printf "%s|%s|%s|%s" "${color}" "${info}" "${bold_white}" "${box}"
 }
 
-function ___atomic_prompt_exitcode() {
-	[[ "${THEME_SHOW_EXITCODE:-}" != "true" ]] && return
-	local color="${bold_purple?}"
-	[[ "${exitcode?}" -ne 0 ]] && printf "%s|%s" "${color}" "${exitcode}"
+___atomic_prompt_exitcode() {
+	[ "${THEME_SHOW_EXITCODE}" != "true" ] && return
+	color=$bold_purple
+	[ "$exitcode" -ne 0 ] && printf "%s|%s" "${color}" "${exitcode}"
 }
 
-function ___atomic_prompt_char() {
-	local color="${white?}"
-	local prompt_char="${__ATOMIC_PROMPT_CHAR_PS1?}"
-	if [[ "${THEME_SHOW_SUDO:-}" == "true" ]]; then
+___atomic_prompt_char() {
+	color=$white
+	prompt_char="${__ATOMIC_PROMPT_CHAR_PS1}"
+	if [ "${THEME_SHOW_SUDO}" == "true" ]; then
 		if sudo -vn 1> /dev/null 2>&1; then
-			prompt_char="${__ATOMIC_PROMPT_CHAR_PS1_SUDO?}"
+			prompt_char="${__ATOMIC_PROMPT_CHAR_PS1_SUDO}"
 		fi
 	fi
 	printf "%s|%s" "${color}" "${prompt_char}"
@@ -207,17 +207,19 @@ function ___atomic_prompt_char() {
 ## cli ##
 #########
 
-function __atomic_show() {
-	local _seg="${1?}"
+__atomic_show() {
+	typeset _seg=${1:-}
+	shift
 	export "THEME_SHOW_${_seg}"=true
 }
 
-function __atomic_hide() {
-	local _seg="${1?}"
+__atomic_hide() {
+	typeset _seg=${1:-}
+	shift
 	export "THEME_SHOW_${_seg}"=false
 }
 
-function _atomic_completion() {
+_atomic_completion() {
 	local cur _action actions segments
 	COMPREPLY=()
 	cur="${COMP_WORDS[COMP_CWORD]}"
@@ -237,26 +239,22 @@ function _atomic_completion() {
 	return 0
 }
 
-function atomic() {
-	local action="${1?}"
+atomic() {
+	typeset action=${1:-}
 	shift
-	local segs=("${@?}")
-	local func
-	case "${action}" in
+	typeset segs=${*:-}
+	typeset func
+	case $action in
 		show)
 			func=__atomic_show
 			;;
 		hide)
 			func=__atomic_hide
 			;;
-		*)
-			_log_error "${FUNCNAME[0]}: unknown action '${action}'"
-			return 1
-			;;
 	esac
-	for seg in "${segs[@]}"; do
-		seg="$(printf "%s" "${seg}" | tr '[:lower:]' '[:upper:]')"
-		"${func}" "${seg}"
+	for seg in ${segs}; do
+		seg=$(printf "%s" "${seg}" | tr '[:lower:]' '[:upper:]')
+		$func "${seg}"
 	done
 }
 
@@ -266,55 +264,55 @@ complete -F _atomic_completion atomic
 ## Variables ##
 ###############
 
-SCM_THEME_PROMPT_PREFIX=""
-SCM_THEME_PROMPT_SUFFIX=""
+export SCM_THEME_PROMPT_PREFIX=""
+export SCM_THEME_PROMPT_SUFFIX=""
 
-RBENV_THEME_PROMPT_PREFIX=""
-RBENV_THEME_PROMPT_SUFFIX=""
-RBFU_THEME_PROMPT_PREFIX=""
-RBFU_THEME_PROMPT_SUFFIX=""
-RVM_THEME_PROMPT_PREFIX=""
-RVM_THEME_PROMPT_SUFFIX=""
+export RBENV_THEME_PROMPT_PREFIX=""
+export RBENV_THEME_PROMPT_SUFFIX=""
+export RBFU_THEME_PROMPT_PREFIX=""
+export RBFU_THEME_PROMPT_SUFFIX=""
+export RVM_THEME_PROMPT_PREFIX=""
+export RVM_THEME_PROMPT_SUFFIX=""
 
-SCM_THEME_PROMPT_DIRTY=" ${bold_red}✗${normal}"
-SCM_THEME_PROMPT_CLEAN=" ${bold_green}✓${normal}"
+export SCM_THEME_PROMPT_DIRTY=" ${bold_red}✗${normal}"
+export SCM_THEME_PROMPT_CLEAN=" ${bold_green}✓${normal}"
 
-: "${THEME_SHOW_SUDO:="true"}"
-: "${THEME_SHOW_SCM:="true"}"
-: "${THEME_SHOW_RUBY:="false"}"
-: "${THEME_SHOW_PYTHON:="false"}"
-: "${THEME_SHOW_CLOCK:="true"}"
-: "${THEME_SHOW_TODO:="false"}"
-: "${THEME_SHOW_BATTERY:="true"}"
-: "${THEME_SHOW_EXITCODE:="false"}"
+THEME_SHOW_SUDO=${THEME_SHOW_SUDO:-"true"}
+THEME_SHOW_SCM=${THEME_SHOW_SCM:-"true"}
+THEME_SHOW_RUBY=${THEME_SHOW_RUBY:-"false"}
+THEME_SHOW_PYTHON=${THEME_SHOW_PYTHON:-"false"}
+THEME_SHOW_CLOCK=${THEME_SHOW_CLOCK:-"true"}
+THEME_SHOW_TODO=${THEME_SHOW_TODO:-"false"}
+THEME_SHOW_BATTERY=${THEME_SHOW_BATTERY:-"true"}
+THEME_SHOW_EXITCODE=${THEME_SHOW_EXITCODE:-"false"}
 
-: "${THEME_CLOCK_COLOR:=${BICyan?}}"
-: "${THEME_CLOCK_FORMAT:="%a %b %d - %H:%M"}"
+THEME_CLOCK_COLOR=${THEME_CLOCK_COLOR:-"${BICyan}"}
+THEME_CLOCK_FORMAT=${THEME_CLOCK_FORMAT:-"%a %b %d - %H:%M"}
 
-__ATOMIC_PROMPT_CHAR_PS1=${THEME_PROMPT_CHAR_PS1:-"${normal?}${LineB?}${bold_white?}${Circle?}"}
-__ATOMIC_PROMPT_CHAR_PS2=${THEME_PROMPT_CHAR_PS2:-"${normal?}${LineB?}${bold_white?}${Circle?}"}
+__ATOMIC_PROMPT_CHAR_PS1=${THEME_PROMPT_CHAR_PS1:-"${normal}${LineB}${bold_white}${Circle}"}
+__ATOMIC_PROMPT_CHAR_PS2=${THEME_PROMPT_CHAR_PS2:-"${normal}${LineB}${bold_white}${Circle}"}
 
-__ATOMIC_PROMPT_CHAR_PS1_SUDO=${THEME_PROMPT_CHAR_PS1_SUDO:-"${normal?}${LineB?}${bold_red?}${Face?}"}
-__ATOMIC_PROMPT_CHAR_PS2_SUDO=${THEME_PROMPT_CHAR_PS2_SUDO:-"${normal?}${LineB?}${bold_red?}${Face?}"}
+__ATOMIC_PROMPT_CHAR_PS1_SUDO=${THEME_PROMPT_CHAR_PS1_SUDO:-"${normal}${LineB}${bold_red}${Face}"}
+__ATOMIC_PROMPT_CHAR_PS2_SUDO=${THEME_PROMPT_CHAR_PS2_SUDO:-"${normal}${LineB}${bold_red}${Face}"}
 
-: "${___ATOMIC_TOP_LEFT:="user_info dir scm"}"
-: "${___ATOMIC_TOP_RIGHT:="exitcode python ruby todo clock battery"}"
-: "${___ATOMIC_BOTTOM:="char"}"
+___ATOMIC_TOP_LEFT=${___ATOMIC_TOP_LEFT:-"user_info dir scm"}
+___ATOMIC_TOP_RIGHT=${___ATOMIC_TOP_RIGHT:-"exitcode python ruby todo clock battery"}
+___ATOMIC_BOTTOM=${___ATOMIC_BOTTOM:-"char"}
 
 ############
 ## Prompt ##
 ############
 
-function __atomic_ps1() {
-	printf "%s%s%s" "$(____atomic_top)" "$(____atomic_bottom)" "${normal?}"
+__atomic_ps1() {
+	printf "%s%s%s" "$(____atomic_top)" "$(____atomic_bottom)" "${normal}"
 }
 
-function __atomic_ps2() {
-	color="${bold_white?}"
-	printf "%s%s%s" "${color}" "${__ATOMIC_PROMPT_CHAR_PS2?}  " "${normal?}"
+__atomic_ps2() {
+	color=$bold_white
+	printf "%s%s%s" "${color}" "${__ATOMIC_PROMPT_CHAR_PS2}  " "${normal}"
 }
 
-function _atomic_prompt() {
+_atomic_prompt() {
 	exitcode="$?"
 
 	PS1="$(__atomic_ps1)"
diff --git a/themes/bakke/bakke.theme.bash b/themes/bakke/bakke.theme.bash
index a3670b07..d7bfbbe8 100644
--- a/themes/bakke/bakke.theme.bash
+++ b/themes/bakke/bakke.theme.bash
@@ -1,15 +1,16 @@
 # shellcheck shell=bash
 # shellcheck disable=SC2034 # Expected behavior for themes.
+# shellcheck disable=SC2154 #TODO: fix these all.
 
-SCM_THEME_PROMPT_DIRTY=" ${red?}✗"
-SCM_THEME_PROMPT_CLEAN=" ${bold_green?}✓"
+SCM_THEME_PROMPT_DIRTY=" ${red}✗"
+SCM_THEME_PROMPT_CLEAN=" ${bold_green}✓"
 SCM_THEME_PROMPT_PREFIX=" |"
-SCM_THEME_PROMPT_SUFFIX="${green?}|"
+SCM_THEME_PROMPT_SUFFIX="${green}|"
 
-GIT_THEME_PROMPT_DIRTY=" ${red?}✗"
-GIT_THEME_PROMPT_CLEAN=" ${bold_green?}✓"
-GIT_THEME_PROMPT_PREFIX=" ${green?}|"
-GIT_THEME_PROMPT_SUFFIX="${green?}|"
+GIT_THEME_PROMPT_DIRTY=" ${red}✗"
+GIT_THEME_PROMPT_CLEAN=" ${bold_green}✓"
+GIT_THEME_PROMPT_PREFIX=" ${green}|"
+GIT_THEME_PROMPT_SUFFIX="${green}|"
 
 RVM_THEME_PROMPT_PREFIX="|"
 RVM_THEME_PROMPT_SUFFIX="|"
@@ -18,10 +19,7 @@ function prompt_command() {
 	#PS1="${bold_cyan}$(scm_char)${green}$(scm_prompt_info)${purple}$(ruby_version_prompt) ${yellow}\h ${reset_color}in ${green}\w ${reset_color}\n${green}→${reset_color} "
 	#PS1="\n${purple}\h: ${reset_color} ${green}\w\n${bold_cyan}$(scm_char)${green}$(scm_prompt_info) ${green}→${reset_color} "
 	#PS1="\n${cyan}\h: ${reset_color} ${yellow}\w\n${red}$(scm_char)${red}$(scm_prompt_info) ${green}→${reset_color} "
-	local virtualenv_prompt scm_prompt_info
-	virtualenv_prompt="$(virtualenv_prompt)"
-	scm_prompt_info="$(scm_prompt_info)"
-	PS1="\n${cyan?}\h:${virtualenv_prompt} ${reset_color?} ${yellow?}\w ${green?}${scm_prompt_info}\n${reset_color?}→ "
+	PS1="\n${cyan}\h:$(virtualenv_prompt) ${reset_color} ${yellow}\w ${green}$(scm_prompt_info)\n${reset_color}→ "
 }
 
 safe_append_prompt_command prompt_command
diff --git a/themes/barbuk/barbuk.theme.bash b/themes/barbuk/barbuk.theme.bash
index 6e6eb88a..b614d148 100644
--- a/themes/barbuk/barbuk.theme.bash
+++ b/themes/barbuk/barbuk.theme.bash
@@ -1,11 +1,8 @@
 # shellcheck shell=bash
 # shellcheck disable=SC2034 # Expected behavior for themes.
-
-# Prompt defaut configuration
-BARBUK_PROMPT=${BARBUK_PROMPT:="git-uptream-remote-logo ssh path scm python_venv ruby node terraform cloud duration exit"}
+# shellcheck disable=SC2154 #TODO: fix these all.
 
 # Theme custom glyphs
-# SCM
 SCM_GIT_CHAR_GITLAB=${BARBUK_GITLAB_CHAR:='  '}
 SCM_GIT_CHAR_BITBUCKET=${BARBUK_BITBUCKET_CHAR:='  '}
 SCM_GIT_CHAR_GITHUB=${BARBUK_GITHUB_CHAR:='  '}
@@ -13,20 +10,13 @@ SCM_GIT_CHAR_DEFAULT=${BARBUK_GIT_DEFAULT_CHAR:='  '}
 SCM_GIT_CHAR_ICON_BRANCH=${BARBUK_GIT_BRANCH_ICON:=''}
 SCM_HG_CHAR=${BARBUK_HG_CHAR:='☿ '}
 SCM_SVN_CHAR=${BARBUK_SVN_CHAR:='⑆ '}
-# Exit code
 EXIT_CODE_ICON=${BARBUK_EXIT_CODE_ICON:=' '}
-# Programming and tools
 PYTHON_VENV_CHAR=${BARBUK_PYTHON_VENV_CHAR:=' '}
-RUBY_CHAR=${BARBUK_RUBY_CHAR:=' '}
-NODE_CHAR=${BARBUK_NODE_CHAR:=' '}
-TERRAFORM_CHAR=${BARBUK_TERRAFORM_CHAR:="❲t❳ "}
-# Cloud
-AWS_PROFILE_CHAR=${BARBUK_AWS_PROFILE_CHAR:=" aws "}
-SCALEWAY_PROFILE_CHAR=${BARBUK_SCALEWAY_PROFILE_CHAR:=" scw "}
-GCLOUD_CHAR=${BARBUK_GCLOUD_CHAR:=" google "}
+COMMAND_DURATION_ICON=${BARBUK_COMMAND_DURATION_ICON:-"$bold_blue  "}
 
 # Command duration
 COMMAND_DURATION_MIN_SECONDS=${COMMAND_DURATION_MIN_SECONDS:-1}
+COMMAND_DURATION_COLOR="$normal"
 
 # Ssh user and hostname display
 SSH_INFO=${BARBUK_SSH_INFO:=true}
@@ -34,32 +24,24 @@ HOST_INFO=${BARBUK_HOST_INFO:=long}
 
 # Bash-it default glyphs customization
 SCM_NONE_CHAR=
-SCM_THEME_PROMPT_DIRTY=" ${bold_red?}✗"
-SCM_THEME_PROMPT_CLEAN=" ${bold_green?}✓"
+SCM_THEME_PROMPT_DIRTY=" ${bold_red}✗"
+SCM_THEME_PROMPT_CLEAN=" ${bold_green}✓"
 SCM_THEME_PROMPT_PREFIX="|"
-SCM_THEME_PROMPT_SUFFIX="${green?}| "
-SCM_GIT_BEHIND_CHAR="${bold_red?}↓${normal?}"
-SCM_GIT_AHEAD_CHAR="${bold_green?}↑${normal?}"
+SCM_THEME_PROMPT_SUFFIX="${green}| "
+SCM_GIT_BEHIND_CHAR="${bold_red}↓${normal}"
+SCM_GIT_AHEAD_CHAR="${bold_green}↑${normal}"
 SCM_GIT_UNTRACKED_CHAR="⌀"
-SCM_GIT_UNSTAGED_CHAR="${bold_yellow?}•${normal?}"
-SCM_GIT_STAGED_CHAR="${bold_green?}+${normal?}"
-GIT_THEME_PROMPT_DIRTY=" ${bold_red?}✗"
-GIT_THEME_PROMPT_CLEAN=" ${bold_green?}✓"
-GIT_THEME_PROMPT_PREFIX="${cyan?}"
-GIT_THEME_PROMPT_SUFFIX="${cyan?}"
-SCM_THEME_BRANCH_TRACK_PREFIX="${normal?} ⤏  ${cyan?}"
+SCM_GIT_UNSTAGED_CHAR="${bold_yellow}•${normal}"
+SCM_GIT_STAGED_CHAR="${bold_green}+${normal}"
+GIT_THEME_PROMPT_DIRTY=" ${bold_red}✗"
+GIT_THEME_PROMPT_CLEAN=" ${bold_green}✓"
+GIT_THEME_PROMPT_PREFIX="${cyan}"
+GIT_THEME_PROMPT_SUFFIX="${cyan}"
+SCM_THEME_BRANCH_TRACK_PREFIX="${normal} ⤏  ${cyan}"
 SCM_THEME_CURRENT_USER_PREFFIX='  '
 SCM_GIT_SHOW_CURRENT_USER=false
-NVM_THEME_PROMPT_PREFIX=''
-NVM_THEME_PROMPT_SUFFIX=''
-RVM_THEME_PROMPT_PREFIX=''
-RVM_THEME_PROMPT_SUFFIX=''
-RBENV_THEME_PROMPT_PREFIX=' '
-RBENV_THEME_PROMPT_SUFFIX=''
-RBFU_THEME_PROMPT_PREFIX=''
-RBFU_THEME_PROMPT_SUFFIX=''
-
-function __git-uptream-remote-logo_prompt() {
+
+function _git-uptream-remote-logo {
 	[[ "$(_git-upstream)" == "" ]] && SCM_GIT_CHAR="$SCM_GIT_CHAR_DEFAULT"
 
 	local remote remote_domain
@@ -75,72 +57,36 @@ function __git-uptream-remote-logo_prompt() {
 		bitbucket) SCM_GIT_CHAR="$SCM_GIT_CHAR_BITBUCKET" ;;
 		*) SCM_GIT_CHAR="$SCM_GIT_CHAR_DEFAULT" ;;
 	esac
-
-	echo "${purple?}$(scm_char)"
 }
 
-function git_prompt_info() {
+function git_prompt_info {
 	git_prompt_vars
-	echo -e "on $SCM_GIT_CHAR_ICON_BRANCH $SCM_PREFIX$SCM_BRANCH$SCM_STATE$SCM_GIT_AHEAD$SCM_GIT_BEHIND$SCM_GIT_STASH$SCM_SUFFIX "
+	echo -e " on $SCM_GIT_CHAR_ICON_BRANCH $SCM_PREFIX$SCM_BRANCH$SCM_STATE$SCM_GIT_AHEAD$SCM_GIT_BEHIND$SCM_GIT_STASH$SCM_SUFFIX"
 }
 
-function __exit_prompt() {
-	if [[ "$exit_code" -ne 0 ]]; then
-		echo "${purple?}${EXIT_CODE_ICON}${yellow?}${exit_code}${bold_orange?} "
+function _exit-code {
+	if [[ "$1" -ne 0 ]]; then
+		exit_code=" ${purple}${EXIT_CODE_ICON}${yellow}${exit_code}${bold_orange}"
 	else
-		echo "${bold_green}"
-	fi
-}
-
-function __aws_profile_prompt() {
-	if [[ -n "${AWS_PROFILE}" ]]; then
-		echo -n "${bold_purple?}${AWS_PROFILE_CHAR}${normal?}${AWS_PROFILE} "
-	fi
-}
-
-function __scaleway_profile_prompt() {
-	if [[ -n "${SCW_PROFILE}" ]]; then
-		echo -n "${bold_purple?}${SCALEWAY_PROFILE_CHAR}${normal?}${SCW_PROFILE} "
+		exit_code="${bold_green}"
 	fi
 }
 
-function __gcloud_prompt() {
-	local active_gcloud_account=""
+function _prompt {
+	local exit_code="$?" wrap_char=' ' dir_color=$green ssh_info='' python_venv='' host command_duration=
 
-	active_gcloud_account="$(active_gcloud_account_prompt)"
-	[[ -n "${active_gcloud_account}" ]] && echo "${bold_purple?}${GCLOUD_CHAR}${normal?}${active_gcloud_account} "
-}
+	command_duration=$(_command_duration)
 
-function __cloud_prompt() {
-	__aws_profile_prompt
-	__scaleway_profile_prompt
-	__gcloud_prompt
-}
+	_exit-code exit_code
+	_git-uptream-remote-logo
 
-function __terraform_prompt() {
-	local terraform_workspace=""
+	history -a
 
-	if [ -d .terraform ]; then
-		terraform_workspace="$(terraform_workspace_prompt)"
-		[[ -n "${terraform_workspace}" ]] && echo "${bold_purple?}${TERRAFORM_CHAR}${normal?}${terraform_workspace} "
+	# Detect root shell
+	if [ "$(whoami)" = root ]; then
+		dir_color=$red
 	fi
-}
-
-function __node_prompt() {
-	local node_version=""
-
-	node_version="$(node_version_prompt)"
-	[[ -n "${node_version}" ]] && echo "${bold_purple?}${NODE_CHAR}${normal?}${node_version} "
-}
 
-function __ruby_prompt() {
-	local ruby_version=""
-
-	ruby_version="$(ruby_version_prompt)"
-	[[ -n "${ruby_version}" ]] && echo "${bold_purple?}${RUBY_CHAR}${normal?}${ruby_version} "
-}
-
-function __ssh_prompt() {
 	# Detect ssh
 	if [[ -n "${SSH_CONNECTION}" ]] && [ "$SSH_INFO" = true ]; then
 		if [ "$HOST_INFO" = long ]; then
@@ -148,56 +94,19 @@ function __ssh_prompt() {
 		else
 			host="\h"
 		fi
-		echo "${bold_blue?}\u${bold_orange?}@${cyan?}$host ${bold_orange?}in "
+		ssh_info="${bold_blue}\u${bold_orange}@${cyan}$host ${bold_orange}in"
 	fi
-}
 
-function __python_venv_prompt() {
 	# Detect python venv
 	if [[ -n "${CONDA_DEFAULT_ENV}" ]]; then
-		echo "${bold_purple?}$PYTHON_VENV_CHAR${normal?}${CONDA_DEFAULT_ENV} "
+		python_venv="$PYTHON_VENV_CHAR${CONDA_DEFAULT_ENV} "
 	elif [[ -n "${VIRTUAL_ENV}" ]]; then
-		echo "${bold_purple?}$PYTHON_VENV_CHAR${normal?}$(basename "${VIRTUAL_ENV}") "
-	fi
-}
-
-function __path_prompt() {
-	local dir_color=${green?}
-	# Detect root shell
-	if [ "$(whoami)" = root ]; then
-		dir_color=${red?}
-	fi
-
-	echo "${dir_color}\w${normal} "
-}
-
-function __scm_prompt() {
-	scm_prompt_info
-}
-
-function __duration_prompt() {
-	[[ -n "$command_duration" ]] && echo "${command_duration} "
-}
-
-function __prompt-command() {
-	exit_code="$?"
-	command_duration=$(_command_duration)
-	local wrap_char
-
-	# Generate prompt
-	PS1="\n "
-	for segment in $BARBUK_PROMPT; do
-		local info
-		info="$(__"${segment}"_prompt)"
-		[[ -n "${info}" ]] && PS1+="${info}"
-	done
-
-	# Cut prompt when it's too long
-	if [[ ${#PS1} -gt $((COLUMNS * 2)) ]]; then
-		wrap_char="\n"
+		python_venv="$PYTHON_VENV_CHAR$(basename "${VIRTUAL_ENV}") "
 	fi
 
+	PS1="\\n${ssh_info} ${purple}$(scm_char)${python_venv}${dir_color}\\w${normal}$(scm_prompt_info)${command_duration}${exit_code}"
+	[[ ${#PS1} -gt $((COLUMNS * 2)) ]] && wrap_char="\\n"
 	PS1="${PS1}${wrap_char}❯${normal} "
 }
 
-safe_append_prompt_command __prompt-command
+safe_append_prompt_command _prompt
diff --git a/themes/base.theme.bash b/themes/base.theme.bash
index 92a56e5e..f9f5190d 100644
--- a/themes/base.theme.bash
+++ b/themes/base.theme.bash
@@ -1,20 +1,16 @@
 # shellcheck shell=bash
 # shellcheck disable=SC2034 # Expected behavior for themes.
 
-# Colors for listing files, using default color scheme.
-# To customize color scheme by theme, check out https://geoff.greer.fm/lscolors/
-export CLICOLOR LSCOLORS LS_COLORS
-
 CLOCK_CHAR_THEME_PROMPT_PREFIX=''
 CLOCK_CHAR_THEME_PROMPT_SUFFIX=''
 CLOCK_THEME_PROMPT_PREFIX=''
 CLOCK_THEME_PROMPT_SUFFIX=''
 
-THEME_PROMPT_HOST='\h'
+THEME_PROMPT_HOST='\H'
 
 SCM=
 
-: "${SCM_CHECK:=true}"
+SCM_CHECK=${SCM_CHECK:=true}
 
 SCM_THEME_PROMPT_DIRTY=' ✗'
 SCM_THEME_PROMPT_CLEAN=' ✓'
@@ -30,19 +26,17 @@ SCM_THEME_CURRENT_USER_SUFFIX=''
 SCM_THEME_CHAR_PREFIX=''
 SCM_THEME_CHAR_SUFFIX=''
 
-# Define this here so it can be used by all of the themes
-: "${THEME_CHECK_SUDO:=false}"
-: "${THEME_BATTERY_PERCENTAGE_CHECK:=true}"
+THEME_BATTERY_PERCENTAGE_CHECK=${THEME_BATTERY_PERCENTAGE_CHECK:=true}
 
-: "${SCM_GIT_SHOW_DETAILS:=true}"
-: "${SCM_GIT_SHOW_REMOTE_INFO:=auto}"
-: "${SCM_GIT_IGNORE_UNTRACKED:=false}"
-: "${SCM_GIT_SHOW_CURRENT_USER:=false}"
-: "${SCM_GIT_SHOW_MINIMAL_INFO:=false}"
-: "${SCM_GIT_SHOW_STASH_INFO:=true}"
-: "${SCM_GIT_SHOW_COMMIT_COUNT:=true}"
-: "${SCM_GIT_USE_GITSTATUS:=false}"
-: "${SCM_GIT_GITSTATUS_RAN:=false}"
+SCM_GIT_SHOW_DETAILS=${SCM_GIT_SHOW_DETAILS:=true}
+SCM_GIT_SHOW_REMOTE_INFO=${SCM_GIT_SHOW_REMOTE_INFO:=auto}
+SCM_GIT_IGNORE_UNTRACKED=${SCM_GIT_IGNORE_UNTRACKED:=false}
+SCM_GIT_SHOW_CURRENT_USER=${SCM_GIT_SHOW_CURRENT_USER:=false}
+SCM_GIT_SHOW_MINIMAL_INFO=${SCM_GIT_SHOW_MINIMAL_INFO:=false}
+SCM_GIT_SHOW_STASH_INFO=${SCM_GIT_SHOW_STASH_INFO:=true}
+SCM_GIT_SHOW_COMMIT_COUNT=${SCM_GIT_SHOW_COMMIT_COUNT:=true}
+SCM_GIT_USE_GITSTATUS=${SCM_GIT_USE_GITSTATUS:=false}
+SCM_GIT_GITSTATUS_RAN=${SCM_GIT_GITSTATUS_RAN:=false}
 
 SCM_GIT='git'
 SCM_GIT_CHAR='±'
@@ -77,9 +71,9 @@ NVM_THEME_PROMPT_SUFFIX='|'
 RVM_THEME_PROMPT_PREFIX=' |'
 RVM_THEME_PROMPT_SUFFIX='|'
 
-: "${THEME_SHOW_RUBY_PROMPT:=true}"
+THEME_SHOW_RUBY_PROMPT=${THEME_SHOW_RUBY_PROMPT:=true}
 
-: "${THEME_SHOW_USER_HOST:=false}"
+THEME_SHOW_USER_HOST=${THEME_SHOW_USER_HOST:=false}
 USER_HOST_THEME_PROMPT_PREFIX=''
 USER_HOST_THEME_PROMPT_SUFFIX=''
 
@@ -92,160 +86,154 @@ RBENV_THEME_PROMPT_SUFFIX='|'
 RBFU_THEME_PROMPT_PREFIX=' |'
 RBFU_THEME_PROMPT_SUFFIX='|'
 
-: "${GIT_EXE:=${SCM_GIT?}}"
-: "${HG_EXE:=${SCM_HG?}}"
-: "${SVN_EXE:=${SCM_SVN?}}"
-: "${P4_EXE:=${SCM_P4?}}"
+: "${GIT_EXE:=$SCM_GIT}"
+: "${P4_EXE:=$SCM_P4}"
+: "${HG_EXE:=$SCM_HG}"
+: "${SVN_EXE:=$SCM_SVN}"
 
 function _bash_it_appearance_scm_init() {
-	GIT_EXE="$(type -P "${SCM_GIT:-git}" || true)"
-	HG_EXE="$(type -P "${SCM_HG:-hg}" || true)"
-	SVN_EXE="$(type -P "${SCM_SVN:-svn}" || true)"
-	P4_EXE="$(type -P "${SCM_P4:-p4}" || true)"
+	GIT_EXE="$(type -P $SCM_GIT || true)"
+	P4_EXE="$(type -P $SCM_P4 || true)"
+	HG_EXE="$(type -P $SCM_HG || true)"
+	SVN_EXE="$(type -P $SCM_SVN || true)"
 
 	# Check for broken SVN exe that is caused by some versions of Xcode.
 	# See https://github.com/Bash-it/bash-it/issues/1612 for more details.
-	if [[ -x "${SVN_EXE-}" && -x "${SVN_EXE%/svn}/xcrun" ]]; then
-		if ! "${SVN_EXE}" --version > /dev/null 2>&1; then
+	if [[ -x "$SVN_EXE" && -x "${SVN_EXE%/*}/xcrun" ]]; then
+		if ! "$SVN_EXE" --version > /dev/null 2>&1; then
 			# Unset the SVN exe variable so that SVN commands are avoided.
 			SVN_EXE=""
 		fi
 	fi
-	return 0
-}
-_bash_it_library_finalize_hook+=('_bash_it_appearance_scm_init')
-
-function scm() {
-	if [[ "${SCM_CHECK:-true}" == "false" ]]; then
-		SCM="${SCM_NONE-NONE}"
-	elif [[ -x "${GIT_EXE-}" ]] && _bash-it-find-in-ancestor '.git' > /dev/null; then
-		SCM="${SCM_GIT?}"
-	elif [[ -x "${HG_EXE-}" ]] && _bash-it-find-in-ancestor '.hg' > /dev/null; then
-		SCM="${SCM_HG?}"
-	elif [[ -x "${SVN_EXE-}" ]] && _bash-it-find-in-ancestor '.svn' > /dev/null; then
-		SCM="${SCM_SVN?}"
-	elif [[ -x "${P4_EXE-}" && -n "$(p4 set P4CLIENT 2> /dev/null)" ]]; then
-		SCM="${SCM_P4?}"
+}
+_bash_it_appearance_scm_init
+
+function scm {
+	if [[ "$SCM_CHECK" = false ]]; then
+		SCM=$SCM_NONE
+	elif [[ -f .git/HEAD ]] && [[ -x "$GIT_EXE" ]]; then
+		SCM=$SCM_GIT
+	elif [[ -d .hg ]] && [[ -x "$HG_EXE" ]]; then
+		SCM=$SCM_HG
+	elif [[ -d .svn ]] && [[ -x "$SVN_EXE" ]]; then
+		SCM=$SCM_SVN
+	elif [[ -x "$GIT_EXE" ]] && [[ -n "$(git rev-parse --is-inside-work-tree 2> /dev/null)" ]]; then
+		SCM=$SCM_GIT
+	elif [[ -x "$HG_EXE" ]] && [[ -n "$(hg root 2> /dev/null)" ]]; then
+		SCM=$SCM_HG
+	elif [[ -x "$SVN_EXE" ]] && [[ -n "$(svn info --show-item wc-root 2> /dev/null)" ]]; then
+		SCM=$SCM_SVN
+	elif [[ -x "$P4_EXE" ]] && [[ -n "$(p4 set P4CLIENT 2> /dev/null)" ]]; then
+		SCM=$SCM_P4
 	else
-		SCM="${SCM_NONE-NONE}"
+		SCM=$SCM_NONE
 	fi
 }
 
-function scm_prompt() {
-	local format="${SCM_PROMPT_FORMAT-"[%s%s]"}"
-	local scm_char scm_prompt_info
-	scm_char="$(scm_char)"
-	scm_prompt_info="$(scm_prompt_info)"
+scm_prompt() {
+	local CHAR
+	CHAR="$(scm_char)"
+	local format=${SCM_PROMPT_FORMAT:-'[%s%s]'}
 
-	if [[ "${scm_char}" != "${SCM_NONE_CHAR:-}" ]]; then
+	if [[ "${CHAR}" != "$SCM_NONE_CHAR" ]]; then
 		# shellcheck disable=2059
-		printf "${format}" "${scm_char}" "${scm_prompt_info}"
+		printf "$format\n" "$CHAR" "$(scm_prompt_info)"
 	fi
 }
 
-function scm_prompt_char() {
-	if [[ -z "${SCM:-}" ]]; then
-		scm
+function scm_prompt_char {
+	if [[ -z $SCM ]]; then scm; fi
+	if [[ $SCM == "$SCM_GIT" ]]; then
+		SCM_CHAR=$SCM_GIT_CHAR
+	elif [[ $SCM == "$SCM_P4" ]]; then
+		SCM_CHAR=$SCM_P4_CHAR
+	elif [[ $SCM == "$SCM_HG" ]]; then
+		SCM_CHAR=$SCM_HG_CHAR
+	elif [[ $SCM == "$SCM_SVN" ]]; then
+		SCM_CHAR=$SCM_SVN_CHAR
+	else
+		SCM_CHAR=$SCM_NONE_CHAR
 	fi
-
-	case ${SCM?} in
-		"${SCM_GIT?}")
-			SCM_CHAR="${SCM_GIT_CHAR?}"
-			;;
-		"${SCM_HG?}")
-			SCM_CHAR="${SCM_HG_CHAR?}"
-			;;
-		"${SCM_SVN?}")
-			SCM_CHAR="${SCM_SVN_CHAR?}"
-			;;
-		"${SCM_P4?}")
-			SCM_CHAR="${SCM_P4_CHAR?}"
-			;;
-		*)
-			SCM_CHAR="${SCM_NONE_CHAR:-}"
-			;;
-	esac
 }
 
-function scm_prompt_vars() {
+function scm_prompt_vars {
 	scm
 	scm_prompt_char
 	SCM_DIRTY=0
 	SCM_STATE=''
-
-	local prompt_vars="${SCM}_prompt_vars"
-	_is_function "${prompt_vars}" && "${prompt_vars}"
+	[[ $SCM == "$SCM_GIT" ]] && git_prompt_vars && return
+	[[ $SCM == "$SCM_P4" ]] && p4_prompt_vars && return
+	[[ $SCM == "$SCM_HG" ]] && hg_prompt_vars && return
+	[[ $SCM == "$SCM_SVN" ]] && svn_prompt_vars && return
 }
 
-function scm_prompt_info() {
+function scm_prompt_info {
 	scm
 	scm_prompt_char
 	scm_prompt_info_common
 }
 
-function scm_prompt_char_info() {
+function scm_prompt_char_info {
 	scm_prompt_char
-	echo -ne "${SCM_THEME_CHAR_PREFIX-}${SCM_CHAR?}${SCM_THEME_CHAR_SUFFIX-}"
+	echo -ne "${SCM_THEME_CHAR_PREFIX}${SCM_CHAR}${SCM_THEME_CHAR_SUFFIX}"
 	scm_prompt_info_common
 }
 
-function scm_prompt_info_common() {
-	local prompt_info
+function scm_prompt_info_common {
 	SCM_DIRTY=0
 	SCM_STATE=''
 
-	case ${SCM?} in
-		"${SCM_GIT?}")
-			if [[ ${SCM_GIT_SHOW_MINIMAL_INFO:-false} == "true" ]]; then
-				# user requests minimal git status information
-				prompt_info="${SCM}_prompt_minimal_info"
-			else
-				# more detailed git status
-				prompt_info="${SCM}_prompt_info"
-			fi
-			;;
-		*)
-			# TODO: consider adding minimal status information for hg and svn
-			prompt_info="${SCM}_prompt_info"
-			;;
-	esac
-	_is_function "${prompt_info}" && "${prompt_info}"
+	if [[ ${SCM} == "${SCM_GIT}" ]]; then
+		if [[ ${SCM_GIT_SHOW_MINIMAL_INFO} == true ]]; then
+			# user requests minimal git status information
+			git_prompt_minimal_info
+		else
+			# more detailed git status
+			git_prompt_info
+		fi
+		return
+	fi
+
+	# TODO: consider adding minimal status information for hg and svn
+	{ [[ ${SCM} == "${SCM_P4}" ]] && p4_prompt_info && return; } || true
+	{ [[ ${SCM} == "${SCM_HG}" ]] && hg_prompt_info && return; } || true
+	{ [[ ${SCM} == "${SCM_SVN}" ]] && svn_prompt_info && return; } || true
 }
 
-function terraform_workspace_prompt() {
+function terraform_workspace_prompt {
 	if _command_exists terraform; then
-		if [[ -d .terraform ]]; then
-			terraform workspace show 2> /dev/null
+		if [ -d .terraform ]; then
+			echo -e "$(terraform workspace show 2> /dev/null)"
 		fi
 	fi
 }
 
-function active_gcloud_account_prompt() {
+function active_gcloud_account_prompt {
 	if _command_exists gcloud; then
-		gcloud config list account --format "value(core.account)" 2> /dev/null
+		echo -e "$(gcloud config list account --format "value(core.account)" 2> /dev/null)"
 	fi
 }
 
-function git_prompt_minimal_info() {
-	SCM_STATE="${SCM_THEME_PROMPT_CLEAN?}"
+function git_prompt_minimal_info {
+	SCM_STATE=${SCM_THEME_PROMPT_CLEAN}
 
 	_git-hide-status && return
 
-	SCM_BRANCH="${SCM_THEME_BRANCH_PREFIX-}\$(_git-friendly-ref)"
+	SCM_BRANCH="${SCM_THEME_BRANCH_PREFIX}\$(_git-friendly-ref)"
 
 	if [[ -n "$(_git-status | tail -n1)" ]]; then
 		SCM_DIRTY=1
-		SCM_STATE="${SCM_THEME_PROMPT_DIRTY?}"
+		SCM_STATE=${SCM_THEME_PROMPT_DIRTY}
 	fi
 
 	# Output the git prompt
-	SCM_PREFIX="${SCM_THEME_PROMPT_PREFIX-}"
-	SCM_SUFFIX="${SCM_THEME_PROMPT_SUFFIX-}"
-	echo -ne "${SCM_PREFIX}${SCM_BRANCH}${SCM_STATE}${SCM_SUFFIX}"
+	SCM_PREFIX=${SCM_THEME_PROMPT_PREFIX}
+	SCM_SUFFIX=${SCM_THEME_PROMPT_SUFFIX}
+	echo -e "${SCM_PREFIX}${SCM_BRANCH}${SCM_STATE}${SCM_SUFFIX}"
 }
 
-function git_prompt_vars() {
-	if [[ "${SCM_GIT_USE_GITSTATUS:-false}" != "false" ]] && _command_exists gitstatus_query && gitstatus_query && [[ "${VCS_STATUS_RESULT:-}" == "ok-sync" ]]; then
+function git_prompt_vars {
+	if ${SCM_GIT_USE_GITSTATUS} && _command_exists gitstatus_query && gitstatus_query && [[ "${VCS_STATUS_RESULT}" == "ok-sync" ]]; then
 		# we can use faster gitstatus
 		# use this variable in githelpers and below to choose gitstatus output
 		SCM_GIT_GITSTATUS_RAN=true
@@ -261,174 +249,190 @@ function git_prompt_vars() {
 
 		local detached_prefix
 		if _git-tag &> /dev/null; then
-			detached_prefix="${SCM_THEME_TAG_PREFIX}"
+			detached_prefix=${SCM_THEME_TAG_PREFIX}
 		else
-			detached_prefix="${SCM_THEME_DETACHED_PREFIX}"
+			detached_prefix=${SCM_THEME_DETACHED_PREFIX}
 		fi
 		SCM_BRANCH="${detached_prefix}\$(_git-friendly-ref)"
 	fi
 
-	if [[ "${SCM_GIT_GITSTATUS_RAN:-}" == "true" ]]; then
-		commits_behind="${VCS_STATUS_COMMITS_BEHIND?}"
-		commits_ahead="${VCS_STATUS_COMMITS_AHEAD?}"
+	if [[ "${SCM_GIT_GITSTATUS_RAN}" == "true" ]]; then
+		commits_behind=${VCS_STATUS_COMMITS_BEHIND}
+		commits_ahead=${VCS_STATUS_COMMITS_AHEAD}
 	else
 		IFS=$'\t' read -r commits_behind commits_ahead <<< "$(_git-upstream-behind-ahead)"
 	fi
 	if [[ "${commits_ahead}" -gt 0 ]]; then
 		SCM_BRANCH+="${SCM_GIT_AHEAD_BEHIND_PREFIX_CHAR}${SCM_GIT_AHEAD_CHAR}"
-		[[ "${SCM_GIT_SHOW_COMMIT_COUNT}" == "true" ]] && SCM_BRANCH+="${commits_ahead}"
+		[[ "${SCM_GIT_SHOW_COMMIT_COUNT}" = "true" ]] && SCM_BRANCH+="${commits_ahead}"
 	fi
 	if [[ "${commits_behind}" -gt 0 ]]; then
 		SCM_BRANCH+="${SCM_GIT_AHEAD_BEHIND_PREFIX_CHAR}${SCM_GIT_BEHIND_CHAR}"
-		[[ "${SCM_GIT_SHOW_COMMIT_COUNT}" == "true" ]] && SCM_BRANCH+="${commits_behind}"
+		[[ "${SCM_GIT_SHOW_COMMIT_COUNT}" = "true" ]] && SCM_BRANCH+="${commits_behind}"
 	fi
 
-	if [[ "${SCM_GIT_SHOW_STASH_INFO}" == "true" ]]; then
+	if [[ "${SCM_GIT_SHOW_STASH_INFO}" = "true" ]]; then
 		local stash_count
 		if [[ "${SCM_GIT_GITSTATUS_RAN}" == "true" ]]; then
-			stash_count="${VCS_STATUS_STASHES?}"
+			stash_count=${VCS_STATUS_STASHES}
 		else
 			stash_count="$(git stash list 2> /dev/null | wc -l | tr -d ' ')"
 		fi
 		[[ "${stash_count}" -gt 0 ]] && SCM_BRANCH+=" ${SCM_GIT_STASH_CHAR_PREFIX}${stash_count}${SCM_GIT_STASH_CHAR_SUFFIX}"
 	fi
 
-	SCM_STATE="${GIT_THEME_PROMPT_CLEAN:-${SCM_THEME_PROMPT_CLEAN:-}}"
+	SCM_STATE=${GIT_THEME_PROMPT_CLEAN:-$SCM_THEME_PROMPT_CLEAN}
 	if ! _git-hide-status; then
-		if [[ "${SCM_GIT_GITSTATUS_RAN:-}" == "true" ]]; then
-			untracked_count="${VCS_STATUS_NUM_UNTRACKED?}"
-			unstaged_count="${VCS_STATUS_NUM_UNSTAGED?}"
-			staged_count="${VCS_STATUS_NUM_STAGED?}"
+		if [[ "${SCM_GIT_GITSTATUS_RAN}" == "true" ]]; then
+			untracked_count=${VCS_STATUS_NUM_UNTRACKED}
+			unstaged_count=${VCS_STATUS_NUM_UNSTAGED}
+			staged_count=${VCS_STATUS_NUM_STAGED}
 		else
-			IFS=$'\t' read -r untracked_count unstaged_count staged_count < <(_git-status-counts)
+			IFS=$'\t' read -r untracked_count unstaged_count staged_count <<< "$(_git-status-counts)"
 		fi
 		if [[ "${untracked_count}" -gt 0 || "${unstaged_count}" -gt 0 || "${staged_count}" -gt 0 ]]; then
 			SCM_DIRTY=1
-			if [[ "${SCM_GIT_SHOW_DETAILS}" == "true" ]]; then
+			if [[ "${SCM_GIT_SHOW_DETAILS}" = "true" ]]; then
 				[[ "${staged_count}" -gt 0 ]] && SCM_BRANCH+=" ${SCM_GIT_STAGED_CHAR}${staged_count}" && SCM_DIRTY=3
 				[[ "${unstaged_count}" -gt 0 ]] && SCM_BRANCH+=" ${SCM_GIT_UNSTAGED_CHAR}${unstaged_count}" && SCM_DIRTY=2
 				[[ "${untracked_count}" -gt 0 ]] && SCM_BRANCH+=" ${SCM_GIT_UNTRACKED_CHAR}${untracked_count}" && SCM_DIRTY=1
 			fi
-			SCM_STATE="${GIT_THEME_PROMPT_DIRTY:-${SCM_THEME_PROMPT_DIRTY?}}"
+			SCM_STATE=${GIT_THEME_PROMPT_DIRTY:-$SCM_THEME_PROMPT_DIRTY}
 		fi
 	fi
 
 	# no if for gitstatus here, user extraction is not supported by it
 	[[ "${SCM_GIT_SHOW_CURRENT_USER}" == "true" ]] && SCM_BRANCH+="$(git_user_info)"
 
-	SCM_PREFIX="${GIT_THEME_PROMPT_PREFIX:-${SCM_THEME_PROMPT_PREFIX-}}"
-	SCM_SUFFIX="${GIT_THEME_PROMPT_SUFFIX:-${SCM_THEME_PROMPT_SUFFIX-}}"
+	SCM_PREFIX=${GIT_THEME_PROMPT_PREFIX:-$SCM_THEME_PROMPT_PREFIX}
+	SCM_SUFFIX=${GIT_THEME_PROMPT_SUFFIX:-$SCM_THEME_PROMPT_SUFFIX}
 
-	SCM_CHANGE=$(_git-short-sha 2> /dev/null || true)
+	SCM_CHANGE=$(_git-short-sha 2> /dev/null || echo "")
 }
 
-function p4_prompt_vars() {
-	local opened_count non_default_changes default_count \
-		add_file_count edit_file_count delete_file_count
-
+function p4_prompt_vars {
 	IFS=$'\t' read -r \
 		opened_count non_default_changes default_count \
 		add_file_count edit_file_count delete_file_count \
-		< <(_p4-opened-counts)
+		<<< "$(_p4-opened-counts)"
 	if [[ "${opened_count}" -gt 0 ]]; then
 		SCM_DIRTY=1
-		SCM_STATE="${SCM_THEME_PROMPT_DIRTY?}"
-		[[ "${opened_count}" -gt 0 ]] && SCM_BRANCH+=" ${SCM_P4_OPENED_CHAR?}${opened_count}"
-		[[ "${non_default_changes}" -gt 0 ]] && SCM_BRANCH+=" ${SCM_P4_CHANGES_CHAR?}${non_default_changes}"
-		[[ "${default_count}" -gt 0 ]] && SCM_BRANCH+=" ${SCM_P4_DEFAULT_CHAR?}${default_count}"
+		SCM_STATE=${SCM_THEME_PROMPT_DIRTY}
+		[[ "${opened_count}" -gt 0 ]] && SCM_BRANCH+=" ${SCM_P4_OPENED_CHAR}${opened_count}"
+		[[ "${non_default_changes}" -gt 0 ]] && SCM_BRANCH+=" ${SCM_P4_CHANGES_CHAR}${non_default_changes}"
+		[[ "${default_count}" -gt 0 ]] && SCM_BRANCH+=" ${SCM_P4_DEFAULT_CHAR}${default_count}"
 	else
 		SCM_DIRTY=0
-		SCM_STATE="${SCM_THEME_PROMPT_CLEAN?}"
+		SCM_STATE=${SCM_THEME_PROMPT_DIRTY}
 	fi
 
-	SCM_PREFIX="${P4_THEME_PROMPT_PREFIX:-${SCM_THEME_PROMPT_PREFIX-}}"
-	SCM_SUFFIX="${P4_THEME_PROMPT_SUFFIX:-${SCM_THEME_PROMPT_SUFFIX-}}"
+	SCM_PREFIX=${P4_THEME_PROMPT_PREFIX:-$SCM_THEME_PROMPT_PREFIX}
+	SCM_SUFFIX=${P4_THEME_PROMPT_SUFFIX:-$SCM_THEME_PROMPT_SUFFIX}
 }
 
-function svn_prompt_vars() {
-	if [[ -n "$(svn status | head -c1 2> /dev/null)" ]]; then
+function svn_prompt_vars {
+	if [[ -n $(svn status | head -c1 2> /dev/null) ]]; then
 		SCM_DIRTY=1
-		SCM_STATE="${SVN_THEME_PROMPT_DIRTY:-${SCM_THEME_PROMPT_DIRTY?}}"
+		SCM_STATE=${SVN_THEME_PROMPT_DIRTY:-$SCM_THEME_PROMPT_DIRTY}
 	else
 		SCM_DIRTY=0
-		SCM_STATE="${SVN_THEME_PROMPT_CLEAN:-${SCM_THEME_PROMPT_CLEAN?}}"
-	fi
-	SCM_PREFIX="${SVN_THEME_PROMPT_PREFIX:-${SCM_THEME_PROMPT_PREFIX-}}"
-	SCM_SUFFIX="${SVN_THEME_PROMPT_SUFFIX:-${SCM_THEME_PROMPT_SUFFIX-}}"
-	SCM_BRANCH="$(svn info --show-item=url 2> /dev/null | awk -F/ '{ for (i=0; i<=NF; i++) { if ($i == "branches" || $i == "tags" ) { print $(i+1); break }; if ($i == "trunk") { print $i; break } } }')" || return
-	SCM_CHANGE="$(svn info --show-item=revision 2> /dev/null)"
+		SCM_STATE=${SVN_THEME_PROMPT_CLEAN:-$SCM_THEME_PROMPT_CLEAN}
+	fi
+	SCM_PREFIX=${SVN_THEME_PROMPT_PREFIX:-$SCM_THEME_PROMPT_PREFIX}
+	SCM_SUFFIX=${SVN_THEME_PROMPT_SUFFIX:-$SCM_THEME_PROMPT_SUFFIX}
+	SCM_BRANCH=$(svn info --show-item=url 2> /dev/null | awk -F/ '{ for (i=0; i<=NF; i++) { if ($i == "branches" || $i == "tags" ) { print $(i+1); break }; if ($i == "trunk") { print $i; break } } }') || return
+	SCM_CHANGE=$(svn info --show-item=revision 2> /dev/null)
+}
+
+# this functions returns absolute location of .hg directory if one exists
+# It starts in the current directory and moves its way up until it hits /.
+# If we get to / then no Mercurial repository was found.
+# Example:
+# - lets say we cd into ~/Projects/Foo/Bar
+# - .hg is located in ~/Projects/Foo/.hg
+# - get_hg_root starts at ~/Projects/Foo/Bar and sees that there is no .hg directory, so then it goes into ~/Projects/Foo
+function get_hg_root {
+	local CURRENT_DIR="${PWD}"
+
+	while [[ "${CURRENT_DIR:-/}" != "/" ]]; do
+		if [[ -d "$CURRENT_DIR/.hg" ]]; then
+			echo "$CURRENT_DIR/.hg"
+			return
+		fi
+
+		CURRENT_DIR="${CURRENT_DIR%/*}"
+	done
 }
 
-function hg_prompt_vars() {
-	local hg_root bookmark
+function hg_prompt_vars {
 	if [[ -n $(hg status 2> /dev/null) ]]; then
 		SCM_DIRTY=1
-		SCM_STATE="${HG_THEME_PROMPT_DIRTY:-${SCM_THEME_PROMPT_DIRTY?}}"
+		SCM_STATE=${HG_THEME_PROMPT_DIRTY:-$SCM_THEME_PROMPT_DIRTY}
 	else
 		SCM_DIRTY=0
-		SCM_STATE="${HG_THEME_PROMPT_CLEAN:-${SCM_THEME_PROMPT_CLEAN?}}"
+		SCM_STATE=${HG_THEME_PROMPT_CLEAN:-$SCM_THEME_PROMPT_CLEAN}
 	fi
-	SCM_PREFIX="${HG_THEME_PROMPT_PREFIX:-${SCM_THEME_PROMPT_PREFIX-}}"
-	SCM_SUFFIX="${HG_THEME_PROMPT_SUFFIX:-${SCM_THEME_PROMPT_SUFFIX-}}"
+	SCM_PREFIX=${HG_THEME_PROMPT_PREFIX:-$SCM_THEME_PROMPT_PREFIX}
+	SCM_SUFFIX=${HG_THEME_PROMPT_SUFFIX:-$SCM_THEME_PROMPT_SUFFIX}
 
-	hg_root="$(_bash-it-find-in-ancestor ".hg")/.hg"
+	HG_ROOT=$(get_hg_root)
 
-	if [[ -f "$hg_root/branch" ]]; then
+	if [ -f "$HG_ROOT/branch" ]; then
 		# Mercurial holds it's current branch in .hg/branch file
-		SCM_BRANCH=$(< "${hg_root}/branch")
-		bookmark="${hg_root}/bookmarks.current"
-		[[ -f "${bookmark}" ]] && SCM_BRANCH+=:$(< "${bookmark}")
+		SCM_BRANCH=$(< "${HG_ROOT}/branch")
+		local bookmark=${HG_ROOT}/bookmarks.current
+		[[ -f ${bookmark} ]] && SCM_BRANCH+=:$(< "${bookmark}")
 	else
 		SCM_BRANCH=$(hg summary 2> /dev/null | grep branch: | awk '{print $2}')
 	fi
 
-	if [[ -f "$hg_root/dirstate" ]]; then
+	if [ -f "$HG_ROOT/dirstate" ]; then
 		# Mercurial holds various information about the working directory in .hg/dirstate file. More on http://mercurial.selenic.com/wiki/DirState
-		SCM_CHANGE=$(hexdump -vn 10 -e '1/1 "%02x"' "$hg_root/dirstate" | cut -c-12)
+		SCM_CHANGE=$(hexdump -vn 10 -e '1/1 "%02x"' "$HG_ROOT/dirstate" | cut -c-12)
 	else
 		SCM_CHANGE=$(hg summary 2> /dev/null | grep parent: | awk '{print $2}')
 	fi
 }
 
-function nvm_version_prompt() {
+function nvm_version_prompt {
 	local node
 	if _is_function nvm; then
 		node=$(nvm current 2> /dev/null)
 		[[ "${node}" == "system" ]] && return
-		echo -ne "${NVM_THEME_PROMPT_PREFIX-}${node}${NVM_THEME_PROMPT_SUFFIX-}"
+		echo -e "${NVM_THEME_PROMPT_PREFIX}${node}${NVM_THEME_PROMPT_SUFFIX}"
 	fi
 }
 
-function node_version_prompt() {
-	nvm_version_prompt
+function node_version_prompt {
+	echo -e "$(nvm_version_prompt)"
 }
 
-function rvm_version_prompt() {
-	if _command_exists rvm; then
-		rvm="$(rvm-prompt)" || return
-		if [[ -n "$rvm" ]]; then
-			echo -ne "${RVM_THEME_PROMPT_PREFIX-}${rvm}${RVM_THEME_PROMPT_SUFFIX-}"
+function rvm_version_prompt {
+	if which rvm &> /dev/null; then
+		rvm=$(rvm-prompt) || return
+		if [ -n "$rvm" ]; then
+			echo -e "$RVM_THEME_PROMPT_PREFIX$rvm$RVM_THEME_PROMPT_SUFFIX"
 		fi
 	fi
 }
 
-function rbenv_version_prompt() {
-	if _command_exists rbenv; then
+function rbenv_version_prompt {
+	if which rbenv &> /dev/null; then
 		rbenv=$(rbenv version-name) || return
 		rbenv commands | grep -q gemset && gemset=$(rbenv gemset active 2> /dev/null) && rbenv="$rbenv@${gemset%% *}"
-		if [[ "$rbenv" != "system" ]]; then
-			echo -ne "${RBENV_THEME_PROMPT_PREFIX-}${rbenv}${RBENV_THEME_PROMPT_SUFFIX-}"
+		if [ "$rbenv" != "system" ]; then
+			echo -e "$RBENV_THEME_PROMPT_PREFIX$rbenv$RBENV_THEME_PROMPT_SUFFIX"
 		fi
 	fi
 }
 
-function rbfu_version_prompt() {
-	if [[ -n "${RBFU_RUBY_VERSION:-}" ]]; then
-		echo -ne "${RBFU_THEME_PROMPT_PREFIX-}${RBFU_RUBY_VERSION}${RBFU_THEME_PROMPT_SUFFIX-}"
+function rbfu_version_prompt {
+	if [[ $RBFU_RUBY_VERSION ]]; then
+		echo -e "${RBFU_THEME_PROMPT_PREFIX}${RBFU_RUBY_VERSION}${RBFU_THEME_PROMPT_SUFFIX}"
 	fi
 }
 
-function chruby_version_prompt() {
+function chruby_version_prompt {
 	if _is_function chruby; then
 		if _is_function chruby_auto; then
 			chruby_auto
@@ -439,147 +443,183 @@ function chruby_version_prompt() {
 		if ! chruby | grep -q '\*'; then
 			ruby_version="${ruby_version} (system)"
 		fi
-		echo -ne "${CHRUBY_THEME_PROMPT_PREFIX-}${ruby_version}${CHRUBY_THEME_PROMPT_SUFFIX-}"
+		echo -e "${CHRUBY_THEME_PROMPT_PREFIX}${ruby_version}${CHRUBY_THEME_PROMPT_SUFFIX}"
 	fi
 }
 
-function ruby_version_prompt() {
-	if [[ "${THEME_SHOW_RUBY_PROMPT:-}" == "true" ]]; then
-		rbfu_version_prompt
-		rbenv_version_prompt
-		rvm_version_prompt
-		chruby_version_prompt
+function ruby_version_prompt {
+	if [[ "${THEME_SHOW_RUBY_PROMPT}" = "true" ]]; then
+		echo -e "$(rbfu_version_prompt)$(rbenv_version_prompt)$(rvm_version_prompt)$(chruby_version_prompt)"
 	fi
 }
 
-function k8s_context_prompt() {
-	kubectl config current-context 2> /dev/null
+function k8s_context_prompt {
+	echo -e "$(kubectl config current-context 2> /dev/null)"
 }
 
-function k8s_namespace_prompt() {
-	kubectl config view --minify --output 'jsonpath={..namespace}' 2> /dev/null
+function k8s_namespace_prompt {
+	echo -e "$(kubectl config view --minify --output 'jsonpath={..namespace}' 2> /dev/null)"
 }
 
-function virtualenv_prompt() {
-	local virtualenv
-	if [[ -n "${VIRTUAL_ENV:-}" ]]; then
-		virtualenv="${VIRTUAL_ENV##*/}"
-		echo -ne "${VIRTUALENV_THEME_PROMPT_PREFIX-}${virtualenv}${VIRTUALENV_THEME_PROMPT_SUFFIX-}"
+function virtualenv_prompt {
+	if [[ -n "$VIRTUAL_ENV" ]]; then
+		virtualenv=$(basename "$VIRTUAL_ENV")
+		echo -e "$VIRTUALENV_THEME_PROMPT_PREFIX$virtualenv$VIRTUALENV_THEME_PROMPT_SUFFIX"
 	fi
 }
 
-function condaenv_prompt() {
-	if [[ -n "${CONDA_DEFAULT_ENV:-}" ]]; then
-		echo -ne "${CONDAENV_THEME_PROMPT_PREFIX-}${CONDA_DEFAULT_ENV}${CONDAENV_THEME_PROMPT_SUFFIX-}"
+function condaenv_prompt {
+	if [[ $CONDA_DEFAULT_ENV ]]; then
+		echo -e "${CONDAENV_THEME_PROMPT_PREFIX}${CONDA_DEFAULT_ENV}${CONDAENV_THEME_PROMPT_SUFFIX}"
 	fi
 }
 
-function py_interp_prompt() {
-	local py_version
-	py_version="$(python --version 2>&1 | awk 'NR==1{print "py-"$2;}')" || return
-	echo -ne "${PYTHON_THEME_PROMPT_PREFIX-}${py_version}${PYTHON_THEME_PROMPT_SUFFIX-}"
+function py_interp_prompt {
+	py_version=$(python --version 2>&1 | awk 'NR==1{print "py-"$2;}') || return
+	echo -e "${PYTHON_THEME_PROMPT_PREFIX}${py_version}${PYTHON_THEME_PROMPT_SUFFIX}"
 }
 
-function python_version_prompt() {
-	virtualenv_prompt
-	condaenv_prompt
-	py_interp_prompt
+function python_version_prompt {
+	echo -e "$(virtualenv_prompt)$(condaenv_prompt)$(py_interp_prompt)"
 }
 
-function git_user_info() {
-	local current_user
+function git_user_info {
 	# support two or more initials, set by 'git pair' plugin
-	current_user="$(git config user.initials | sed 's% %+%')"
+	SCM_CURRENT_USER=$(git config user.initials | sed 's% %+%')
 	# if `user.initials` weren't set, attempt to extract initials from `user.name`
-	[[ -z "${current_user}" ]] && current_user=$(printf "%s" "$(for word in $(git config user.name | PERLIO=:utf8 perl -pe '$_=lc'); do printf "%s" "${word:0:1}"; done)")
-	[[ -n "${current_user}" ]] && printf "%s" "${SCM_THEME_CURRENT_USER_PREFFIX-}${current_user}${SCM_THEME_CURRENT_USER_SUFFIX-}"
+	[[ -z "${SCM_CURRENT_USER}" ]] && SCM_CURRENT_USER=$(printf "%s" "$(for word in $(git config user.name | PERLIO=:utf8 perl -pe '$_=lc'); do printf "%s" "${word:0:1}"; done)")
+	[[ -n "${SCM_CURRENT_USER}" ]] && printf "%s" "$SCM_THEME_CURRENT_USER_PREFFIX$SCM_CURRENT_USER$SCM_THEME_CURRENT_USER_SUFFIX"
 }
 
-function clock_char() {
-	local clock_char clock_char_color show_clock_char
-	clock_char="${THEME_CLOCK_CHAR:-⌚}"
-	clock_char_color="${THEME_CLOCK_CHAR_COLOR:-${normal:-}}"
-	show_clock_char="${THEME_SHOW_CLOCK_CHAR:-"true"}"
+function clock_char {
+	CLOCK_CHAR=${THEME_CLOCK_CHAR:-"⌚"}
+	CLOCK_CHAR_COLOR=${THEME_CLOCK_CHAR_COLOR:-"$normal"}
+	SHOW_CLOCK_CHAR=${THEME_SHOW_CLOCK_CHAR:-"true"}
 
-	if [[ "${show_clock_char}" == "true" ]]; then
-		echo -ne "${clock_char_color}${CLOCK_CHAR_THEME_PROMPT_PREFIX-}${clock_char}${CLOCK_CHAR_THEME_PROMPT_SUFFIX-}"
+	if [[ "${SHOW_CLOCK_CHAR}" = "true" ]]; then
+		echo -e "${CLOCK_CHAR_COLOR}${CLOCK_CHAR_THEME_PROMPT_PREFIX}${CLOCK_CHAR}${CLOCK_CHAR_THEME_PROMPT_SUFFIX}"
 	fi
 }
 
-function clock_prompt() {
-	local clock_color="${THEME_CLOCK_COLOR:-${normal?}}"
-	local clock_format="${THEME_CLOCK_FORMAT:-"%H:%M:%S"}"
-	local show_clock="${THEME_SHOW_CLOCK:-${THEME_CLOCK_CHECK:-true}}"
-	local clock_string="\D{${clock_format}}"
+function clock_prompt {
+	CLOCK_COLOR=${THEME_CLOCK_COLOR:-"$normal"}
+	CLOCK_FORMAT=${THEME_CLOCK_FORMAT:-"%H:%M:%S"}
+	[ -z "$THEME_SHOW_CLOCK" ] && THEME_SHOW_CLOCK=${THEME_CLOCK_CHECK:-"true"}
+	SHOW_CLOCK=$THEME_SHOW_CLOCK
 
-	if [[ "${show_clock}" == "true" ]]; then
-		echo -ne "${clock_color}${CLOCK_THEME_PROMPT_PREFIX-}${clock_string}${CLOCK_THEME_PROMPT_SUFFIX-}"
+	if [[ "${SHOW_CLOCK}" = "true" ]]; then
+		CLOCK_STRING=$(date +"${CLOCK_FORMAT}")
+		echo -e "${CLOCK_COLOR}${CLOCK_THEME_PROMPT_PREFIX}${CLOCK_STRING}${CLOCK_THEME_PROMPT_SUFFIX}"
 	fi
 }
 
-function user_host_prompt() {
-	if [[ "${THEME_SHOW_USER_HOST:-false}" == "true" ]]; then
-		echo -ne "${USER_HOST_THEME_PROMPT_PREFIX-}\u@${THEME_PROMPT_HOST:-\h}${USER_HOST_THEME_PROMPT_SUFFIX-}"
+function user_host_prompt {
+	if [[ "${THEME_SHOW_USER_HOST}" = "true" ]]; then
+		echo -e "${USER_HOST_THEME_PROMPT_PREFIX}\u@\h${USER_HOST_THEME_PROMPT_SUFFIX}"
 	fi
 }
 
 # backwards-compatibility
-function git_prompt_info() {
+function git_prompt_info {
 	_git-hide-status && return
 	git_prompt_vars
-	echo -ne "${SCM_PREFIX?}${SCM_BRANCH?}${SCM_STATE?}${SCM_SUFFIX?}"
+	echo -e "${SCM_PREFIX}${SCM_BRANCH}${SCM_STATE}${SCM_SUFFIX}"
 }
 
 function p4_prompt_info() {
 	p4_prompt_vars
-	echo -ne "${SCM_PREFIX?}${SCM_BRANCH?}:${SCM_CHANGE?}${SCM_STATE?}${SCM_SUFFIX?}"
+	echo -e "${SCM_PREFIX}${SCM_BRANCH}:${SCM_CHANGE}${SCM_STATE}${SCM_SUFFIX}"
 }
 
-function svn_prompt_info() {
+function svn_prompt_info {
 	svn_prompt_vars
-	echo -ne "${SCM_PREFIX?}${SCM_BRANCH?}${SCM_STATE?}${SCM_SUFFIX?}"
+	echo -e "${SCM_PREFIX}${SCM_BRANCH}${SCM_STATE}${SCM_SUFFIX}"
 }
 
 function hg_prompt_info() {
 	hg_prompt_vars
-	echo -ne "${SCM_PREFIX?}${SCM_BRANCH?}:${SCM_CHANGE#*:}${SCM_STATE?}${SCM_SUFFIX?}"
+	echo -e "${SCM_PREFIX}${SCM_BRANCH}:${SCM_CHANGE#*:}${SCM_STATE}${SCM_SUFFIX}"
 }
 
-function scm_char() {
+function scm_char {
 	scm_prompt_char
-	echo -ne "${SCM_THEME_CHAR_PREFIX?}${SCM_CHAR?}${SCM_THEME_CHAR_SUFFIX?}"
+	echo -e "${SCM_THEME_CHAR_PREFIX}${SCM_CHAR}${SCM_THEME_CHAR_SUFFIX}"
 }
 
-function prompt_char() {
+function prompt_char {
 	scm_char
 }
 
-function battery_char() {
-	# The battery_char function depends on the presence of the battery_percentage function.
-	if [[ "${THEME_BATTERY_PERCENTAGE_CHECK}" == true ]] && _command_exists battery_percentage; then
-		echo -ne "${bold_red?}$(battery_percentage)%"
-	else
-		false
+function battery_char {
+	if [[ "${THEME_BATTERY_PERCENTAGE_CHECK}" = true ]]; then
+		echo -e "${bold_red:-}$(battery_percentage)%"
 	fi
 }
 
 if ! _command_exists battery_charge; then
 	# if user has installed battery plugin, skip this...
 	function battery_charge() {
-		: # no op
+		# no op
+		echo -n
 	}
 fi
 
-function aws_profile() {
-	if [[ -n "${AWS_DEFAULT_PROFILE:-}" ]]; then
-		echo -ne "${AWS_DEFAULT_PROFILE}"
+# The battery_char function depends on the presence of the battery_percentage function.
+# If battery_percentage is not defined, then define battery_char as a no-op.
+if ! _command_exists battery_percentage; then
+	function battery_char() {
+		# no op
+		echo -n
+	}
+fi
+
+function aws_profile {
+	if [[ $AWS_DEFAULT_PROFILE ]]; then
+		echo -e "${AWS_DEFAULT_PROFILE}"
+	else
+		echo -e "default"
+	fi
+}
+
+function __check_precmd_conflict() {
+	local f
+	for f in "${precmd_functions[@]}"; do
+		if [[ "${f}" == "${1}" ]]; then
+			return 0
+		fi
+	done
+	return 1
+}
+
+function safe_append_prompt_command {
+	local prompt_re
+
+	if [ "${__bp_imported:-missing}" == "defined" ]; then
+		# We are using bash-preexec
+		if ! __check_precmd_conflict "${1}"; then
+			precmd_functions+=("${1}")
+		fi
 	else
-		echo -ne "default"
+		# Set OS dependent exact match regular expression
+		if [[ ${OSTYPE} == darwin* ]]; then
+			# macOS
+			prompt_re="[[:<:]]${1}[[:>:]]"
+		else
+			# Linux, FreeBSD, etc.
+			prompt_re="\<${1}\>"
+		fi
+
+		if [[ ${PROMPT_COMMAND[*]:-} =~ ${prompt_re} ]]; then
+			return
+		elif [[ -z ${PROMPT_COMMAND} ]]; then
+			PROMPT_COMMAND="${1}"
+		else
+			PROMPT_COMMAND="${1};${PROMPT_COMMAND}"
+		fi
 	fi
 }
 
 function _save-and-reload-history() {
-	local autosave="${1:-${HISTORY_AUTOSAVE:-0}}"
-	[[ ${autosave} -eq 1 ]] && local HISTCONTROL="${HISTCONTROL:-}${HISTCONTROL:+:}autoshare"
-	_bash-it-history-auto-save && _bash-it-history-auto-load
+	local autosave=${1:-0}
+	[[ $autosave -eq 1 ]] && history -a && history -c && history -r
 }
diff --git a/themes/bira/bira.theme.bash b/themes/bira/bira.theme.bash
index f30d8d5d..7db03000 100644
--- a/themes/bira/bira.theme.bash
+++ b/themes/bira/bira.theme.bash
@@ -1,26 +1,24 @@
 # shellcheck shell=bash
 # shellcheck disable=SC2034 # Expected behavior for themes.
+# shellcheck disable=SC2154 #TODO: fix these all.
 
-SCM_THEME_PROMPT_PREFIX=" ${yellow?}‹"
-SCM_THEME_PROMPT_SUFFIX="›${reset_color?}"
+SCM_THEME_PROMPT_PREFIX=" ${yellow}‹"
+SCM_THEME_PROMPT_SUFFIX="›${reset_color}"
 
-VIRTUALENV_THEME_PROMPT_PREFIX=" ${cyan?}‹"
-VIRTUALENV_THEME_PROMPT_SUFFIX="›${reset_color?}"
+VIRTUALENV_THEME_PROMPT_PREFIX=" ${cyan}‹"
+VIRTUALENV_THEME_PROMPT_SUFFIX="›${reset_color}"
 
 bold="\[\e[1m\]"
 
-if [[ ${UID} -eq 0 ]]; then
-	user_host="${bold_red?}\u@\h${normal?}${reset_color?}"
+if [ ${UID} -eq 0 ]; then
+	user_host="${bold_red}\u@\h${normal}${reset_color}"
 else
-	user_host="${bold_green?}\u@\h${normal?}${reset_color?}"
+	user_host="${bold_green}\u@\h${normal}${reset_color}"
 fi
 
 function prompt_command() {
-	local current_dir=" ${bold_blue?}\w${normal?}${reset_color?}"
-	local virtualenv_prompt scm_prompt_info
-	virtualenv_prompt="$(virtualenv_prompt)"
-	scm_prompt_info="$(scm_prompt_info)"
-	PS1="╭─${user_host?}${current_dir}${virtualenv_prompt}${scm_prompt_info}\n╰─${bold?}\\$ ${normal?}"
+	local current_dir=" ${bold_blue}\w${normal}${reset_color}"
+	PS1="╭─${user_host}${current_dir}$(virtualenv_prompt)$(scm_prompt_info)\n╰─${bold}\\$ ${normal}"
 }
 
 safe_append_prompt_command prompt_command
diff --git a/themes/bobby-python/bobby-python.theme.bash b/themes/bobby-python/bobby-python.theme.bash
index 5a46b258..ebb3eab0 100644
--- a/themes/bobby-python/bobby-python.theme.bash
+++ b/themes/bobby-python/bobby-python.theme.bash
@@ -1,26 +1,27 @@
 # shellcheck shell=bash
 # shellcheck disable=SC2034 # Expected behavior for themes.
+# shellcheck disable=SC2154 #TODO: fix these all.
 
-SCM_THEME_PROMPT_DIRTY=" ${red?}✗"
-SCM_THEME_PROMPT_CLEAN=" ${bold_green?}✓"
+SCM_THEME_PROMPT_DIRTY=" ${red}✗"
+SCM_THEME_PROMPT_CLEAN=" ${bold_green}✓"
 SCM_THEME_PROMPT_PREFIX=" |"
-SCM_THEME_PROMPT_SUFFIX="${green?}|"
+SCM_THEME_PROMPT_SUFFIX="${green}|"
 
-GIT_THEME_PROMPT_DIRTY=" ${red?}✗"
-GIT_THEME_PROMPT_CLEAN=" ${bold_green?}✓"
-GIT_THEME_PROMPT_PREFIX=" ${green?}|"
-GIT_THEME_PROMPT_SUFFIX="${green?}|"
+GIT_THEME_PROMPT_DIRTY=" ${red}✗"
+GIT_THEME_PROMPT_CLEAN=" ${bold_green}✓"
+GIT_THEME_PROMPT_PREFIX=" ${green}|"
+GIT_THEME_PROMPT_SUFFIX="${green}|"
 
 CONDAENV_THEME_PROMPT_SUFFIX="|"
 
 function prompt_command() {
-	PS1="\n${yellow?}$(python_version_prompt) " # Name of virtual env followed by python version
-	PS1+="${purple?}\h "
-	PS1+="${reset_color?}in "
-	PS1+="${green?}\w\n"
-	PS1+="${bold_cyan?}$(scm_char)"
-	PS1+="${green?}$(scm_prompt_info) "
-	PS1+="${green?}→${reset_color?} "
+	PS1="\n${yellow}$(python_version_prompt) " # Name of virtual env followed by python version
+	PS1+="${purple}\h "
+	PS1+="${reset_color}in "
+	PS1+="${green}\w\n"
+	PS1+="${bold_cyan}$(scm_char)"
+	PS1+="${green}$(scm_prompt_info) "
+	PS1+="${green}→${reset_color} "
 }
 
 safe_append_prompt_command prompt_command
diff --git a/themes/bobby/bobby.theme.bash b/themes/bobby/bobby.theme.bash
index 08f54c41..98d2cd8d 100644
--- a/themes/bobby/bobby.theme.bash
+++ b/themes/bobby/bobby.theme.bash
@@ -1,40 +1,41 @@
 # shellcheck shell=bash
 # shellcheck disable=SC2034 # Expected behavior for themes.
+# shellcheck disable=SC2154 #TODO: fix these all.
 
-SCM_THEME_PROMPT_DIRTY=" ${red?}✗"
-SCM_THEME_PROMPT_CLEAN=" ${bold_green?}✓"
-SCM_THEME_PROMPT_PREFIX=" ${green?}|"
-SCM_THEME_PROMPT_SUFFIX="${green?}|"
+SCM_THEME_PROMPT_DIRTY=" ${red}✗"
+SCM_THEME_PROMPT_CLEAN=" ${bold_green}✓"
+SCM_THEME_PROMPT_PREFIX=" ${green}|"
+SCM_THEME_PROMPT_SUFFIX="${green}|"
 
-GIT_THEME_PROMPT_DIRTY=" ${red?}✗"
-GIT_THEME_PROMPT_CLEAN=" ${bold_green?}✓"
-GIT_THEME_PROMPT_PREFIX=" ${green?}|"
-GIT_THEME_PROMPT_SUFFIX="${green?}|"
+GIT_THEME_PROMPT_DIRTY=" ${red}✗"
+GIT_THEME_PROMPT_CLEAN=" ${bold_green}✓"
+GIT_THEME_PROMPT_PREFIX=" ${green}|"
+GIT_THEME_PROMPT_SUFFIX="${green}|"
 
 RVM_THEME_PROMPT_PREFIX="|"
 RVM_THEME_PROMPT_SUFFIX="|"
 
-function __bobby_clock() {
+__bobby_clock() {
 	printf '%s' "$(clock_prompt) "
 
-	if [[ "${THEME_SHOW_CLOCK_CHAR:-}" == "true" ]]; then
+	if [ "${THEME_SHOW_CLOCK_CHAR}" == "true" ]; then
 		printf '%s' "$(clock_char) "
 	fi
 }
 
 function prompt_command() {
 	PS1="\n$(battery_char) $(__bobby_clock)"
-	PS1+="${yellow?}$(ruby_version_prompt) "
-	PS1+="${purple?}\h "
-	PS1+="${reset_color?}in "
-	PS1+="${green?}\w\n"
-	PS1+="${bold_cyan?}$(scm_prompt_char_info) "
-	PS1+="${green?}→${reset_color?} "
+	PS1+="${yellow}$(ruby_version_prompt) "
+	PS1+="${purple}\h "
+	PS1+="${reset_color}in "
+	PS1+="${green}\w\n"
+	PS1+="${bold_cyan}$(scm_prompt_char_info) "
+	PS1+="${green}→${reset_color} "
 }
 
-: "${THEME_SHOW_CLOCK_CHAR:="true"}"
-: "${THEME_CLOCK_CHAR_COLOR:=${red?}}"
-: "${THEME_CLOCK_COLOR:=${bold_cyan?}}"
-: "${THEME_CLOCK_FORMAT:="%Y-%m-%d %H:%M:%S"}"
+THEME_SHOW_CLOCK_CHAR=${THEME_SHOW_CLOCK_CHAR:-"true"}
+THEME_CLOCK_CHAR_COLOR=${THEME_CLOCK_CHAR_COLOR:-"$red"}
+THEME_CLOCK_COLOR=${THEME_CLOCK_COLOR:-"$bold_cyan"}
+THEME_CLOCK_FORMAT=${THEME_CLOCK_FORMAT:-"%Y-%m-%d %H:%M:%S"}
 
 safe_append_prompt_command prompt_command
diff --git a/themes/brainy/README.md b/themes/brainy/README.md
new file mode 100644
index 00000000..dc6eaecd
--- /dev/null
+++ b/themes/brainy/README.md
@@ -0,0 +1,123 @@
+# Brainy theme
+
+Simple colorful terminal prompt theme (inspired by a number of themes).
+
+## Features
+
+### Prompt Segments
+
+- Username & Hostname
+- Current Directory
+- SCM Information
+- Battery Charge
+- Clock
+- [Todo.txt](https://github.com/ginatrapani/todo.txt-cli) status
+- Ruby Environment
+- Python Environment
+- Exit Code
+
+### Others
+
+- Indicator for cached `sudo` credential
+- Indicator for ssh login
+- `brainy` command for showing/hiding various prompt segments on-the-fly
+
+## Configuration
+
+Various prompt segments can be shown/hidden or modified according to your choice. There are two ways for doing that:
+
+1. On-the-fly using `brainy` command
+2. Theme Environment Variables
+
+### On-the-fly using `brainy` command
+
+This theme provides a command for showing/hiding prompt segments.
+
+`brainy show <segment>`
+
+`brainy hide <segment>`
+
+Tab-completion for this command is enabled by default.
+
+Configuration specified by this command will only be applied to current and subsequent child shells.
+
+### Theme Environment Variables
+
+This is used for permanent settings that apply to all terminal sessions. You have to define the value of specific theme variables in your `bashrc` (or equivalent) file.
+
+The name of the variables are listed below along with their default values.
+
+#### User Information
+
+Indicator for cached `sudo` credential (see `sudo` manpage for more information):
+
+`THEME_SHOW_SUDO=true`
+
+#### SCM Information
+
+Information about SCM repository status:
+
+`THEME_SHOW_SCM=true`
+
+#### Ruby Environment
+
+Ruby environment version information:
+
+`THEME_SHOW_RUBY=false`
+
+#### Python Environment
+
+Python environment version information:
+
+`THEME_SHOW_PYTHON=false`
+
+#### ToDo.txt status
+
+[Todo.txt](https://github.com/ginatrapani/todo.txt-cli) status:
+
+`THEME_SHOW_TODO=false`
+
+#### Clock
+
+`THEME_SHOW_CLOCK=true`
+
+`THEME_CLOCK_COLOR=$bold_cyan`
+
+Format of the clock (see `date` manpage for more information):
+
+`THEME_CLOCK_FORMAT="%H:%M:%S"`
+
+#### Battery Charge
+
+Battery charge percentage:
+
+`THEME_SHOW_BATTERY=false`
+
+#### Exit Code
+
+Exit code of the last command:
+
+`THEME_SHOW_EXITCODE=true`
+
+## Prompt Segments Order
+
+Currently available prompt segments are:
+
+- battery
+- char
+- clock
+- dir
+- exitcode
+- python
+- ruby
+- scm
+- todo
+- user_info
+
+Three environment variables can be defined to rearrange the segments order. The default values are:
+
+`___BRAINY_TOP_LEFT="user_info dir scm"`
+
+`___BRAINY_TOP_RIGHT="python ruby todo clock battery"`
+
+`___BRAINY_BOTTOM="exitcode char"`
diff --git a/themes/brunton/brunton.theme.bash b/themes/brunton/brunton.theme.bash
index 04dcbb3e..166fcc84 100644
--- a/themes/brunton/brunton.theme.bash
+++ b/themes/brunton/brunton.theme.bash
@@ -1,31 +1,28 @@
 # shellcheck shell=bash
 # shellcheck disable=SC2034 # Expected behavior for themes.
+# shellcheck disable=SC2154 #TODO: fix these all.
 
 SCM_THEME_PROMPT_PREFIX=""
 SCM_THEME_PROMPT_SUFFIX=""
 
-SCM_THEME_PROMPT_DIRTY=" ${bold_red?}✗${normal?}"
-SCM_THEME_PROMPT_CLEAN=" ${bold_green?}✓${normal?}"
-SCM_GIT_CHAR="${bold_green?}±${normal?}"
-SCM_SVN_CHAR="${bold_cyan?}⑆${normal?}"
-SCM_HG_CHAR="${bold_red?}☿${normal?}"
+SCM_THEME_PROMPT_DIRTY=" ${bold_red}✗${normal}"
+SCM_THEME_PROMPT_CLEAN=" ${bold_green}✓${normal}"
+SCM_GIT_CHAR="${bold_green}±${normal}"
+SCM_SVN_CHAR="${bold_cyan}⑆${normal}"
+SCM_HG_CHAR="${bold_red}☿${normal}"
 
-function is_vim_shell() {
-	if [[ -n "${VIMRUNTIME:-}" ]]; then
-		echo "[${cyan?}vim shell${normal?}]"
+is_vim_shell() {
+	if [ -n "$VIMRUNTIME" ]; then
+		echo "[${cyan}vim shell${normal}]"
 	fi
 }
 
-function prompt() {
-	local SCM_PROMPT_FORMAT=' %s (%s)' clock_prompt battery_charge scm_prompt is_vim_shell
-	clock_prompt="$(clock_prompt)"
-	battery_charge="$(battery_charge)"
-	scm_prompt="$(scm_prompt)"
-	is_vim_shell="$(is_vim_shell)"
-	PS1="${white?}${background_blue?} \u${normal?}${background_blue?}@${red?}${background_blue?}\h ${clock_prompt} ${reset_color?}${normal?} ${battery_charge}\n${bold_black?}${background_white?} \w ${normal?}${scm_prompt}${is_vim_shell}\n${white?}>${normal?} "
+prompt() {
+	SCM_PROMPT_FORMAT=' %s (%s)'
+	PS1="${white}${background_blue} \u${normal}${background_blue}@${red}${background_blue}\h $(clock_prompt) ${reset_color}${normal} $(battery_charge)\n${bold_black}${background_white} \w ${normal}$(scm_prompt)$(is_vim_shell)\n${white}>${normal} "
 }
 
-: "${THEME_CLOCK_COLOR:=${blue?}${background_white?}}"
-: "${THEME_CLOCK_FORMAT:=" %H:%M:%S"}"
+THEME_CLOCK_COLOR=${THEME_CLOCK_COLOR:-"$blue$background_white"}
+THEME_CLOCK_FORMAT=${THEME_CLOCK_FORMAT:-" %H:%M:%S"}
 
 safe_append_prompt_command prompt
diff --git a/themes/candy/candy.theme.bash b/themes/candy/candy.theme.bash
index 69633bd9..7753e934 100644
--- a/themes/candy/candy.theme.bash
+++ b/themes/candy/candy.theme.bash
@@ -1,14 +1,12 @@
 # shellcheck shell=bash
 # shellcheck disable=SC2034 # Expected behavior for themes.
+# shellcheck disable=SC2154 #TODO: fix these all.
 
 function prompt_command() {
-	local clock_prompt scm_prompt_info
-	clock_prompt="$(clock_prompt)"
-	scm_prompt_info="$(scm_prompt_info)"
-	PS1="${green?}\u@\h ${clock_prompt} ${reset_color?}${white?}\w${reset_color?}${scm_prompt_info}${blue?} →${bold_blue?} ${reset_color?} ${normal?}"
+	PS1="${green}\u@\h $(clock_prompt) ${reset_color}${white}\w${reset_color}$(scm_prompt_info)${blue} →${bold_blue} ${reset_color} ${normal}"
 }
 
-: "${THEME_CLOCK_COLOR:=${blue?}}"
-: "${THEME_CLOCK_FORMAT:="%I:%M:%S"}"
+THEME_CLOCK_COLOR=${THEME_CLOCK_COLOR:-"$blue"}
+THEME_CLOCK_FORMAT=${THEME_CLOCK_FORMAT:-"%I:%M:%S"}
 
 safe_append_prompt_command prompt_command
diff --git a/themes/codeword/codeword.theme.bash b/themes/codeword/codeword.theme.bash
index d52403c1..beab6a4a 100644
--- a/themes/codeword/codeword.theme.bash
+++ b/themes/codeword/codeword.theme.bash
@@ -1,23 +1,23 @@
 # shellcheck shell=bash
 
-SCM_THEME_PROMPT_PREFIX="${SCM_THEME_PROMPT_SUFFIX:-}"
-SCM_THEME_PROMPT_DIRTY="${bold_red?} ✗${normal?}"
-SCM_THEME_PROMPT_CLEAN="${bold_green?} ✓${normal?}"
-SCM_GIT_CHAR="${green?}±${normal?}"
+SCM_THEME_PROMPT_PREFIX=${SCM_THEME_PROMPT_SUFFIX}
+SCM_THEME_PROMPT_DIRTY="${bold_red} ✗${normal}"
+SCM_THEME_PROMPT_CLEAN="${bold_green} ✓${normal}"
+SCM_GIT_CHAR="${green}±${normal}"
 
-function mark_prompt() {
-    echo "${green?}\$${normal?}"
+mark_prompt() {
+    echo "${green}\$${normal}"
 }
 
-function user_host_path_prompt() {
-    ps_user="${green?}\u${normal?}";
-    ps_host="${blue?}\H${normal?}";
-    ps_path="${yellow?}\w${normal?}";
-    echo "${ps_user?}@${ps_host?}:${ps_path?}"
+user_host_path_prompt() {
+    ps_user="${green}\u${normal}";
+    ps_host="${blue}\H${normal}";
+    ps_path="${yellow}\w${normal}";
+    echo "$ps_user@$ps_host:$ps_path"
 }
 
-function prompt() {
-  local SCM_PROMPT_FORMAT=' [%s%s]'
+prompt() {
+  SCM_PROMPT_FORMAT=' [%s%s]'
   PS1="$(user_host_path_prompt)$(virtualenv_prompt)$(scm_prompt) $(mark_prompt) "
 }
 
diff --git a/themes/colors.theme.bash b/themes/colors.theme.bash
new file mode 100644
index 00000000..d5044d05
--- /dev/null
+++ b/themes/colors.theme.bash
@@ -0,0 +1,272 @@
+# shellcheck shell=bash
+# shellcheck disable=SC2005
+# shellcheck disable=SC2034
+
+function __ {
+  echo "$@"
+}
+
+function __make_ansi {
+  next=$1; shift
+  echo "\[\e[$(__$next $@)m\]"
+}
+
+function __make_echo {
+  next=$1; shift
+  echo "\033[$(__$next $@)m"
+}
+
+
+function __reset {
+  next=$1; shift
+  out="$(__$next $@)"
+  echo "0${out:+;${out}}"
+}
+
+function __bold {
+  next=$1; shift
+  out="$(__$next $@)"
+  echo "${out:+${out};}1"
+}
+
+function __faint {
+  next=$1; shift
+  out="$(__$next $@)"
+  echo "${out:+${out};}2"
+}
+
+function __italic {
+  next=$1; shift
+  out="$(__$next $@)"
+  echo "${out:+${out};}3"
+}
+
+function __underline {
+  next=$1; shift
+  out="$(__$next $@)"
+  echo "${out:+${out};}4"
+}
+
+function __negative {
+  next=$1; shift
+  out="$(__$next $@)"
+  echo "${out:+${out};}7"
+}
+
+function __crossed {
+  next=$1; shift
+  out="$(__$next $@)"
+  echo "${out:+${out};}8"
+}
+
+
+function __color_normal_fg {
+  echo "3$1"
+}
+
+function __color_normal_bg {
+  echo "4$1"
+}
+
+function __color_bright_fg {
+  echo "9$1"
+}
+
+function __color_bright_bg {
+  echo "10$1"
+}
+
+
+function __color_black   {
+  echo "0"
+}
+
+function __color_red   {
+  echo "1"
+}
+
+function __color_green   {
+  echo "2"
+}
+
+function __color_yellow  {
+  echo "3"
+}
+
+function __color_blue  {
+  echo "4"
+}
+
+function __color_magenta {
+  echo "5"
+}
+
+function __color_cyan  {
+  echo "6"
+}
+
+function __color_white   {
+  echo "7"
+}
+
+function __color_rgb {
+  r=$1 && g=$2 && b=$3
+  [[ $r == $g && $g == $b ]] && echo $(( $r / 11 + 232 )) && return # gray range above 232
+  echo "8;5;$(( ($r * 36  + $b * 6 + $g) / 51 + 16 ))"
+}
+
+function __color {
+  color=$1; shift
+  case "$1" in
+    fg|bg) side="$1"; shift ;;
+    *) side=fg;;
+  esac
+  case "$1" in
+    normal|bright) mode="$1"; shift;;
+    *) mode=normal;;
+  esac
+  [[ $color == "rgb" ]] && rgb="$1 $2 $3"; shift 3
+
+  next=$1; shift
+  out="$(__$next $@)"
+  echo "$(__color_${mode}_${side} $(__color_${color} $rgb))${out:+;${out}}"
+}
+
+
+function __black   {
+  echo "$(__color black $@)"
+}
+
+function __red   {
+  echo "$(__color red $@)"
+}
+
+function __green   {
+  echo "$(__color green $@)"
+}
+
+function __yellow  {
+  echo "$(__color yellow $@)"
+}
+
+function __blue  {
+  echo "$(__color blue $@)"
+}
+
+function __magenta {
+  echo "$(__color magenta $@)"
+}
+
+function __cyan  {
+  echo "$(__color cyan $@)"
+}
+
+function __white   {
+  echo "$(__color white $@)"
+}
+
+function __rgb {
+  echo "$(__color rgb $@)"
+}
+
+
+function __color_parse {
+  next=$1; shift
+  echo "$(__$next $@)"
+}
+
+function color {
+  echo "$(__color_parse make_ansi $@)"
+}
+
+function echo_color {
+  echo "$(__color_parse make_echo $@)"
+}
+
+
+black="\[\e[0;30m\]"
+red="\[\e[0;31m\]"
+green="\[\e[0;32m\]"
+yellow="\[\e[0;33m\]"
+blue="\[\e[0;34m\]"
+purple="\[\e[0;35m\]"
+cyan="\[\e[0;36m\]"
+white="\[\e[0;37m\]"
+orange="\[\e[0;91m\]"
+
+bold_black="\[\e[30;1m\]"
+bold_red="\[\e[31;1m\]"
+bold_green="\[\e[32;1m\]"
+bold_yellow="\[\e[33;1m\]"
+bold_blue="\[\e[34;1m\]"
+bold_purple="\[\e[35;1m\]"
+bold_cyan="\[\e[36;1m\]"
+bold_white="\[\e[37;1m\]"
+bold_orange="\[\e[91;1m\]"
+
+underline_black="\[\e[30;4m\]"
+underline_red="\[\e[31;4m\]"
+underline_green="\[\e[32;4m\]"
+underline_yellow="\[\e[33;4m\]"
+underline_blue="\[\e[34;4m\]"
+underline_purple="\[\e[35;4m\]"
+underline_cyan="\[\e[36;4m\]"
+underline_white="\[\e[37;4m\]"
+underline_orange="\[\e[91;4m\]"
+
+background_black="\[\e[40m\]"
+background_red="\[\e[41m\]"
+background_green="\[\e[42m\]"
+background_yellow="\[\e[43m\]"
+background_blue="\[\e[44m\]"
+background_purple="\[\e[45m\]"
+background_cyan="\[\e[46m\]"
+background_white="\[\e[47;1m\]"
+background_orange="\[\e[101m\]"
+
+normal="\[\e[0m\]"
+reset_color="\[\e[39m\]"
+
+# These colors are meant to be used with `echo -e`
+echo_black="\033[0;30m"
+echo_red="\033[0;31m"
+echo_green="\033[0;32m"
+echo_yellow="\033[0;33m"
+echo_blue="\033[0;34m"
+echo_purple="\033[0;35m"
+echo_cyan="\033[0;36m"
+echo_white="\033[0;37;1m"
+echo_orange="\033[0;91m"
+
+echo_bold_black="\033[30;1m"
+echo_bold_red="\033[31;1m"
+echo_bold_green="\033[32;1m"
+echo_bold_yellow="\033[33;1m"
+echo_bold_blue="\033[34;1m"
+echo_bold_purple="\033[35;1m"
+echo_bold_cyan="\033[36;1m"
+echo_bold_white="\033[37;1m"
+echo_bold_orange="\033[91;1m"
+
+echo_underline_black="\033[30;4m"
+echo_underline_red="\033[31;4m"
+echo_underline_green="\033[32;4m"
+echo_underline_yellow="\033[33;4m"
+echo_underline_blue="\033[34;4m"
+echo_underline_purple="\033[35;4m"
+echo_underline_cyan="\033[36;4m"
+echo_underline_white="\033[37;4m"
+echo_underline_orange="\033[91;4m"
+
+echo_background_black="\033[40m"
+echo_background_red="\033[41m"
+echo_background_green="\033[42m"
+echo_background_yellow="\033[43m"
+echo_background_blue="\033[44m"
+echo_background_purple="\033[45m"
+echo_background_cyan="\033[46m"
+echo_background_white="\033[47;1m"
+echo_background_orange="\033[101m"
+
+echo_normal="\033[0m"
+echo_reset_color="\033[39m"
diff --git a/themes/command_duration.theme.bash b/themes/command_duration.theme.bash
new file mode 100644
index 00000000..cf91785c
--- /dev/null
+++ b/themes/command_duration.theme.bash
@@ -0,0 +1,69 @@
+# shellcheck shell=bash
+
+if [ -z "$BASH_IT_COMMAND_DURATION" ] || [ "$BASH_IT_COMMAND_DURATION" != true ]; then
+	_command_duration() {
+		echo -n
+	}
+	return
+fi
+
+# Define tmp dir and file
+COMMAND_DURATION_TMPDIR="${TMPDIR:-/tmp}"
+COMMAND_DURATION_FILE="${COMMAND_DURATION_FILE:-$COMMAND_DURATION_TMPDIR/bashit_theme_execution_$BASHPID}"
+
+COMMAND_DURATION_ICON=${COMMAND_DURATION_ICON:-'  '}
+COMMAND_DURATION_MIN_SECONDS=${COMMAND_DURATION_MIN_SECONDS:-'1'}
+
+trap _command_duration_delete_temp_file EXIT HUP INT TERM
+
+_command_duration_delete_temp_file() {
+	if [[ -f "$COMMAND_DURATION_FILE" ]]; then
+		rm -f "$COMMAND_DURATION_FILE"
+	fi
+}
+
+_command_duration_pre_exec() {
+	date +%s.%1N > "$COMMAND_DURATION_FILE"
+}
+
+_command_duration() {
+	local command_duration command_start current_time
+	local minutes seconds deciseconds
+	local command_start_sseconds current_time_seconds command_start_deciseconds current_time_deciseconds
+	current_time=$(date +%s.%1N)
+
+	if [[ -f "$COMMAND_DURATION_FILE" ]]; then
+		command_start=$(< "$COMMAND_DURATION_FILE")
+		command_start_sseconds=${command_start%.*}
+		current_time_seconds=${current_time%.*}
+
+		command_start_deciseconds=$((10#${command_start#*.}))
+		current_time_deciseconds=$((10#${current_time#*.}))
+
+		# seconds
+		command_duration=$((current_time_seconds - command_start_sseconds))
+
+		if ((current_time_deciseconds >= command_start_deciseconds)); then
+			deciseconds=$(((current_time_deciseconds - command_start_deciseconds)))
+		else
+			((command_duration -= 1))
+			deciseconds=$((10 - ((command_start_deciseconds - current_time_deciseconds))))
+		fi
+		command rm "$COMMAND_DURATION_FILE"
+	else
+		command_duration=0
+	fi
+
+	if ((command_duration > 0)); then
+		minutes=$((command_duration / 60))
+		seconds=$((command_duration % 60))
+	fi
+
+	if ((minutes > 0)); then
+		printf "%s%s%dm %ds" "$COMMAND_DURATION_ICON" "$COMMAND_DURATION_COLOR" "$minutes" "$seconds"
+	elif ((seconds >= COMMAND_DURATION_MIN_SECONDS)); then
+		printf "%s%s%d.%01ds" "$COMMAND_DURATION_ICON" "$COMMAND_DURATION_COLOR" "$seconds" "$deciseconds"
+	fi
+}
+
+preexec_functions+=(_command_duration_pre_exec)
diff --git a/themes/doubletime_multiline/doubletime_multiline.theme.bash b/themes/doubletime_multiline/doubletime_multiline.theme.bash
index f2dfe43a..18213571 100644
--- a/themes/doubletime_multiline/doubletime_multiline.theme.bash
+++ b/themes/doubletime_multiline/doubletime_multiline.theme.bash
@@ -8,7 +8,7 @@ function prompt_setter() {
   PS1="
 $(clock_prompt) $(scm_char) [$THEME_PROMPT_HOST_COLOR\u@${THEME_PROMPT_HOST}$reset_color] $(virtualenv_prompt)$(ruby_version_prompt)
 \w
-$(scm_prompt)$reset_color $ "
+$(doubletime_scm_prompt)$reset_color $ "
   PS2='> '
   PS4='+ '
 }
diff --git a/themes/doubletime_multiline_pyonly/doubletime_multiline_pyonly.theme.bash b/themes/doubletime_multiline_pyonly/doubletime_multiline_pyonly.theme.bash
index 0fe0eff4..9bc4c334 100644
--- a/themes/doubletime_multiline_pyonly/doubletime_multiline_pyonly.theme.bash
+++ b/themes/doubletime_multiline_pyonly/doubletime_multiline_pyonly.theme.bash
@@ -8,7 +8,7 @@ function prompt_setter() {
   PS1="
 $(clock_prompt) $(scm_char) [$THEME_PROMPT_HOST_COLOR\u@${THEME_PROMPT_HOST}$reset_color] $(virtualenv_prompt)
 \w
-$(scm_prompt)$reset_color $ "
+$(doubletime_scm_prompt)$reset_color $ "
   PS2='> '
   PS4='+ '
 }
diff --git a/themes/easy/easy.theme.bash b/themes/easy/easy.theme.bash
index 3cb171d7..7e2e3389 100644
--- a/themes/easy/easy.theme.bash
+++ b/themes/easy/easy.theme.bash
@@ -1,22 +1,21 @@
 # shellcheck shell=bash
 # shellcheck disable=SC2034 # Expected behavior for themes.
+# shellcheck disable=SC2154 #TODO: fix these all.
 
-SCM_THEME_PROMPT_PREFIX="${bold_green?}[ ${normal?}"
-SCM_THEME_PROMPT_SUFFIX="${bold_green?} ] "
-SCM_THEME_PROMPT_DIRTY=" ${red?}✗"
-SCM_THEME_PROMPT_CLEAN=" ${bold_green?}✓"
+SCM_THEME_PROMPT_PREFIX="${bold_green}[ ${normal}"
+SCM_THEME_PROMPT_SUFFIX="${bold_green} ] "
+SCM_THEME_PROMPT_DIRTY=" ${red}✗"
+SCM_THEME_PROMPT_CLEAN=" ${bold_green}✓"
 
-function prompt_command() {
-	local scm_prompt_info
-	if [ "${USER:-${LOGNAME?}}" = root ]; then
-		cursor_color="${bold_red?}"
-		user_color="${green?}"
+prompt_command() {
+	if [ "$(whoami)" = root ]; then
+		cursor_color="${bold_red}"
+		user_color="${green}"
 	else
-		cursor_color="${bold_green?}"
-		user_color="${white?}"
+		cursor_color="${bold_green}"
+		user_color="${white}"
 	fi
-	scm_prompt_info="$(scm_prompt_info)"
-	PS1="${user_color}\u${normal?}@${white?}\h ${bold_black?}\w\n${reset_color?}${scm_prompt_info}${cursor_color}❯ ${normal?}"
+	PS1="${user_color}\u${normal}@${white}\h ${bold_black}\w\n${reset_color}$(scm_prompt_info)${cursor_color}❯ ${normal}"
 }
 
 safe_append_prompt_command prompt_command
diff --git a/themes/essential/essential.theme.bash b/themes/essential/essential.theme.bash
index 05e84314..ae988733 100644
--- a/themes/essential/essential.theme.bash
+++ b/themes/essential/essential.theme.bash
@@ -1,93 +1,96 @@
-# shellcheck shell=bash
+#!/usr/bin/env bash
+
+# https://github.com/koalaman/shellcheck/wiki/Sc2154
+# shellcheck disable=SC2154
 
 function _user-prompt() {
-	local -r user='\u'
-
-	if [[ "${EUID}" -eq 0 ]]; then
-		# Privileged users:
-		local -r user_color="${bold_red?}"
-	else
-		# Standard users:
-		local -r user_color="${bold_green?}"
-	fi
-
-	# Print the current user's name (colored according to their current EUID):
-	printf '%b%s%b' "${user_color}" "${user}" "${normal?}"
+  local -r user='\\u'
+
+  if [[ "${EUID}" -eq 0 ]]; then
+    # Privileged users:
+    local -r user_color="${bold_red}"
+  else
+    # Standard users:
+    local -r user_color="${bold_green}"
+  fi
+
+  # Print the current user's name (colored according to their current EUID):
+  echo -e "${user_color}${user}${normal}"
 }
 
 function _host-prompt() {
-	local -r host='\h'
-
-	# Check whether or not $SSH_TTY is set:
-	if [[ -z "${SSH_TTY:-}" ]]; then
-		# For local hosts, set the host's prompt color to blue:
-		local -r host_color="${bold_blue?}"
-	else
-		# For remote hosts, set the host's prompt color to red:
-		local -r host_color="${bold_red?}"
-	fi
-
-	# Print the current hostname (colored according to $SSH_TTY's status):
-	printf '%b%s%b' "${host_color}" "${host}" "${normal?}"
+  local -r host='\\h'
+
+  # Check whether or not $SSH_TTY is set:
+  if [[ -z "${SSH_TTY}" ]]; then
+    # For local hosts, set the host's prompt color to blue:
+    local -r host_color="${bold_blue}"
+  else
+    # For remote hosts, set the host's prompt color to red:
+    local -r host_color="${bold_red}"
+  fi
+
+  # Print the current hostname (colored according to $SSH_TTY's status):
+  echo -e "${host_color}${host}${normal}"
 }
 
 function _user-at-host-prompt() {
-	# Concatenate the user and host prompts into: user@host:
-	_user-prompt
-	printf '%b@' "${bold_white?}"
-	_host-prompt
+  # Concatenate the user and host prompts into: user@host:
+  echo -e "$(_user-prompt)${bold_white}@$(_host-prompt)"
 }
 
 function _exit-status-prompt() {
-	local -r prompt_string="${1}"
-	local -r exit_status="${2}"
-
-	# Check the exit status of the last command captured by $exit_status:
-	if [[ "${exit_status}" -eq 0 ]]; then
-		# For commands that return an exit status of zero, set the exit status's
-		# notifier to green:
-		local -r exit_status_color="${bold_green?}"
-	else
-		# For commands that return a non-zero exit status, set the exit status's
-		# notifier to red:
-		local -r exit_status_color="${bold_red?}"
-	fi
-
-	if [[ "${prompt_string}" -eq 1 ]]; then
-		# $PS1:
-		printf '%b +%b' "${exit_status_color}" "${normal?} "
-	elif [[ "${prompt_string}" -eq 2 ]]; then
-		# $PS2:
-		printf '%b |%b' "${exit_status_color}" "${normal?} "
-	else
-		# Default:
-		printf '%b ?%b' "${exit_status_color}" "${normal?} "
-	fi
+  local -r prompt_string="${1}"
+  local -r exit_status="${2}"
+
+  # Check the exit status of the last command captured by $exit_status:
+  if [[ "${exit_status}" -eq 0 ]]; then
+    # For commands that return an exit status of zero, set the exit status's
+    # notifier to green:
+    local -r exit_status_color="${bold_green}"
+  else
+    # For commands that return a non-zero exit status, set the exit status's
+    # notifier to red:
+    local -r exit_status_color="${bold_red}"
+  fi
+
+  echo -ne "${exit_status_color}"
+  if [[ "${prompt_string}" -eq 1 ]]; then
+    # $PS1:
+    echo -e " +${normal} "
+  elif [[ "${prompt_string}" -eq 2 ]]; then
+    # $PS2:
+    echo -e " |${normal} "
+  else
+    # Default:
+    echo -e " ?${normal} "
+  fi
 }
 
 function _ps1() {
-	local -r time='\t'
-	local -r pwd='\w'
+  local -r time='\\t'
 
-	printf '%b%s ' "${bold_white?}" "${time}"
-	_user-at-host-prompt
-	printf '%b:%b%s\n' "${bold_white?}" "${normal?}" "${pwd}"
-	_exit-status-prompt 1 "${exit_status}"
+  echo -ne "${bold_white}${time} "
+  echo -ne "$(_user-at-host-prompt)"
+  echo -e "${bold_white}:${normal}${PWD}"
+  echo -e "$(_exit-status-prompt 1 "${exit_status}")"
 }
 
 function _ps2() {
-	_exit-status-prompt 2 "${exit_status}"
+  echo -e "$(_exit-status-prompt 2 "${exit_status}")"
 }
 
 function prompt_command() {
-	# Capture the exit status of the last command:
-	local -r exit_status="${?}"
+  # Capture the exit status of the last command:
+  local -r exit_status="${?}"
 
-	# Build the $PS1 prompt:
-	PS1="$(_ps1)"
+  # Build the $PS1 prompt:
+  PS1="$(_ps1)"
 
-	# Build the $PS2 prompt:
-	PS2="$(_ps2)"
+  # Build the $PS2 prompt:
+  PS2="$(_ps2)"
 }
 
 safe_append_prompt_command prompt_command
+
+# vim: sw=2 ts=2 et:
diff --git a/themes/githelpers.theme.bash b/themes/githelpers.theme.bash
index 719effec..ba089392 100644
--- a/themes/githelpers.theme.bash
+++ b/themes/githelpers.theme.bash
@@ -1,106 +1,99 @@
-# shellcheck shell=bash
+#!/usr/bin/env bash
 
-function _git-symbolic-ref() {
-	git symbolic-ref -q HEAD 2> /dev/null
+function _git-symbolic-ref {
+ git symbolic-ref -q HEAD 2> /dev/null
 }
 
 # When on a branch, this is often the same as _git-commit-description,
 # but this can be different when two branches are pointing to the
 # same commit. _git-branch is used to explicitly choose the checked-out
 # branch.
-function _git-branch() {
-	if [[ "${SCM_GIT_GITSTATUS_RAN:-}" == "true" ]]; then
-		if [[ -n "${VCS_STATUS_LOCAL_BRANCH:-}" ]]; then
-			echo "${VCS_STATUS_LOCAL_BRANCH}"
-		else
-			return 1
-		fi
-	else
-		git symbolic-ref -q --short HEAD 2> /dev/null || return 1
-	fi
+function _git-branch {
+  if [[ "${SCM_GIT_GITSTATUS_RAN}" == "true" ]]; then
+    test -n "${VCS_STATUS_LOCAL_BRANCH}" && echo "${VCS_STATUS_LOCAL_BRANCH}" || return 1
+  else
+    git symbolic-ref -q --short HEAD 2> /dev/null || return 1
+  fi
 }
 
-function _git-tag() {
-	if [[ "${SCM_GIT_GITSTATUS_RAN:-}" == "true" ]]; then
-		if [[ -n "${VCS_STATUS_TAG:-}" ]]; then
-			echo "${VCS_STATUS_TAG}"
-		fi
-	else
-		git describe --tags --exact-match 2> /dev/null
-	fi
+function _git-tag {
+  if [[ "${SCM_GIT_GITSTATUS_RAN}" == "true" ]]; then
+    test -n "${VCS_STATUS_TAG}" && echo "${VCS_STATUS_TAG}"
+  else
+    git describe --tags --exact-match 2> /dev/null
+  fi
 }
 
-function _git-commit-description() {
-	git describe --contains --all 2> /dev/null
+function _git-commit-description {
+  git describe --contains --all 2> /dev/null
 }
 
-function _git-short-sha() {
-	if [[ "${SCM_GIT_GITSTATUS_RAN:-}" == "true" ]]; then
-		echo "${VCS_STATUS_COMMIT:0:7}"
-	else
-		git rev-parse --short HEAD
-	fi
+function _git-short-sha {
+  if [[ "${SCM_GIT_GITSTATUS_RAN}" == "true" ]]; then
+    echo ${VCS_STATUS_COMMIT:0:7}
+  else
+    git rev-parse --short HEAD
+  fi
 }
 
 # Try the checked-out branch first to avoid collision with branches pointing to the same ref.
-function _git-friendly-ref() {
-	if [[ "${SCM_GIT_GITSTATUS_RAN:-}" == "true" ]]; then
-		_git-branch || _git-tag || _git-short-sha # there is no tag based describe output in gitstatus
-	else
-		_git-branch || _git-tag || _git-commit-description || _git-short-sha
-	fi
+function _git-friendly-ref {
+  if [[ "${SCM_GIT_GITSTATUS_RAN}" == "true" ]]; then
+    _git-branch || _git-tag || _git-short-sha # there is no tag based describe output in gitstatus
+  else
+    _git-branch || _git-tag || _git-commit-description || _git-short-sha
+  fi
 }
 
-function _git-num-remotes() {
-	git remote | wc -l
+function _git-num-remotes {
+  git remote | wc -l
 }
 
-function _git-upstream() {
-	local ref
-	ref="$(_git-symbolic-ref)" || return 1
-	git for-each-ref --format="%(upstream:short)" "${ref}"
+function _git-upstream {
+  local ref
+  ref="$(_git-symbolic-ref)" || return 1
+  git for-each-ref --format="%(upstream:short)" "${ref}"
 }
 
-function _git-upstream-remote() {
-	local upstream branch
-	upstream="$(_git-upstream)" || return 1
+function _git-upstream-remote {
+  local upstream
+  upstream="$(_git-upstream)" || return 1
 
-	branch="$(_git-upstream-branch)" || return 1
-	echo "${upstream%"/${branch}"}"
+  local branch
+  branch="$(_git-upstream-branch)" || return 1
+  echo "${upstream%"/${branch}"}"
 }
 
-function _git-upstream-branch() {
-	local ref
-	ref="$(_git-symbolic-ref)" || return 1
+function _git-upstream-branch {
+  local ref
+  ref="$(_git-symbolic-ref)" || return 1
 
-	# git versions < 2.13.0 do not support "strip" for upstream format
-	# regex replacement gives the wrong result for any remotes with slashes in the name,
-	# so only use when the strip format fails.
-	git for-each-ref --format="%(upstream:strip=3)" "${ref}" 2> /dev/null || git for-each-ref --format="%(upstream)" "${ref}" | sed -e "s/.*\/.*\/.*\///"
+  # git versions < 2.13.0 do not support "strip" for upstream format
+  # regex replacement gives the wrong result for any remotes with slashes in the name,
+  # so only use when the strip format fails.
+  git for-each-ref --format="%(upstream:strip=3)" "${ref}" 2> /dev/null || git for-each-ref --format="%(upstream)" "${ref}" | sed -e "s/.*\/.*\/.*\///"
 }
 
-function _git-upstream-behind-ahead() {
-	git rev-list --left-right --count "$(_git-upstream)...HEAD" 2> /dev/null
+function _git-upstream-behind-ahead {
+  git rev-list --left-right --count "$(_git-upstream)...HEAD" 2> /dev/null
 }
 
-function _git-upstream-branch-gone() {
-	[[ "$(git status -s -b | sed -e 's/.* //')" == "[gone]" ]]
+function _git-upstream-branch-gone {
+  [[ "$(git status -s -b | sed -e 's/.* //')" == "[gone]" ]]
 }
 
-function _git-hide-status() {
-	[[ "$(git config --get bash-it.hide-status)" == "1" ]]
+function _git-hide-status {
+  [[ "$(git config --get bash-it.hide-status)" == "1" ]]
 }
 
-function _git-status() {
-	local git_status_flags=
-	if [[ "${SCM_GIT_IGNORE_UNTRACKED:-}" == "true" ]]; then
-		git_status_flags='-uno'
-	fi
-	git status --porcelain "${git_status_flags:---}" 2> /dev/null
+function _git-status {
+  local git_status_flags=
+  [[ "${SCM_GIT_IGNORE_UNTRACKED}" = "true" ]] && git_status_flags='-uno' || true
+  git status --porcelain ${git_status_flags} 2> /dev/null
 }
 
-function _git-status-counts() {
-	_git-status | awk '
+function _git-status-counts {
+  _git-status | awk '
   BEGIN {
     untracked=0;
     unstaged=0;
@@ -123,51 +116,85 @@ function _git-status-counts() {
   }'
 }
 
-function _git-remote-info() {
-	local same_branch_name="" branch_prefix
-	# prompt handling only, reimplement because patching the routine below gets ugly
-	if [[ "${SCM_GIT_GITSTATUS_RAN:-}" == "true" ]]; then
-		[[ "${VCS_STATUS_REMOTE_NAME?}" == "" ]] && return
-		[[ "${VCS_STATUS_LOCAL_BRANCH?}" == "${VCS_STATUS_REMOTE_BRANCH?}" ]] && same_branch_name=true
-		# no multiple remote support in gitstatusd
-		if [[ "${SCM_GIT_SHOW_REMOTE_INFO:-}" == "true" || "${SCM_GIT_SHOW_REMOTE_INFO:-}" == "auto" ]]; then
-			if [[ ${same_branch_name:-} != "true" ]]; then
-				remote_info="${VCS_STATUS_REMOTE_NAME?}/${VCS_STATUS_REMOTE_BRANCH?}"
-			else
-				remote_info="${VCS_STATUS_REMOTE_NAME?}"
-			fi
-		elif [[ ${same_branch_name:-} != "true" ]]; then
-			remote_info="${VCS_STATUS_REMOTE_BRANCH?}"
-		fi
-		if [[ -n "${remote_info:-}" ]]; then
-			# no support for gone remote branches in gitstatusd
-			branch_prefix="${SCM_THEME_BRANCH_TRACK_PREFIX:-}"
-			echo "${branch_prefix}${remote_info:-}"
-		fi
-	else
-		[[ "$(_git-upstream)" == "" ]] && return
-
-		[[ "$(_git-branch)" == "$(_git-upstream-branch)" ]] && same_branch_name=true
-		if [[ ("${SCM_GIT_SHOW_REMOTE_INFO}" == "auto" && "$(_git-num-remotes)" -ge 2) ||
-		"${SCM_GIT_SHOW_REMOTE_INFO}" == "true" ]]; then
-			if [[ ${same_branch_name:-} != "true" ]]; then
-				# shellcheck disable=SC2016
-				remote_info='$(_git-upstream)'
-			else
-				remote_info="$(_git-upstream-remote)"
-			fi
-		elif [[ ${same_branch_name:-} != "true" ]]; then
-			# shellcheck disable=SC2016
-			remote_info='$(_git-upstream-branch)'
-		fi
-		if [[ -n "${remote_info:-}" ]]; then
-			local branch_prefix
-			if _git-upstream-branch-gone; then
-				branch_prefix="${SCM_THEME_BRANCH_GONE_PREFIX:-}"
-			else
-				branch_prefix="${SCM_THEME_BRANCH_TRACK_PREFIX:-}"
-			fi
-			echo "${branch_prefix}${remote_info:-}"
-		fi
-	fi
+function _git-remote-info {
+
+  # prompt handling only, reimplement because patching the routine below gets ugly
+  if [[ "${SCM_GIT_GITSTATUS_RAN}" == "true" ]]; then
+    [[ "${VCS_STATUS_REMOTE_NAME}" == "" ]] && return
+    [[ "${VCS_STATUS_LOCAL_BRANCH}" == "${VCS_STATUS_REMOTE_BRANCH}" ]] && local same_branch_name=true
+    local same_branch_name=
+    [[ "${VCS_STATUS_LOCAL_BRANCH}" == "${VCS_STATUS_REMOTE_BRANCH}" ]] && same_branch_name=true
+    # no multiple remote support in gitstatusd
+    if [[ "${SCM_GIT_SHOW_REMOTE_INFO}" = "true" || "${SCM_GIT_SHOW_REMOTE_INFO}" = "auto" ]]; then
+      if [[ "${same_branch_name}" != "true" ]]; then
+        remote_info="${VCS_STATUS_REMOTE_NAME}/${VCS_STATUS_REMOTE_BRANCH}"
+      else
+        remote_info="${VCS_STATUS_REMOTE_NAME}"
+      fi
+    elif [[ ${same_branch_name} != "true" ]]; then
+      remote_info="${VCS_STATUS_REMOTE_BRANCH}"
+    fi
+    if [[ -n "${remote_info}" ]];then
+      # no support for gone remote branches in gitstatusd
+      local branch_prefix="${SCM_THEME_BRANCH_TRACK_PREFIX}"
+      echo "${branch_prefix}${remote_info}"
+    fi
+  else
+    [[ "$(_git-upstream)" == "" ]] && return
+
+    [[ "$(_git-branch)" == "$(_git-upstream-branch)" ]] && local same_branch_name=true
+    local same_branch_name=
+    [[ "$(_git-branch)" == "$(_git-upstream-branch)" ]] && same_branch_name=true
+    if [[ ("${SCM_GIT_SHOW_REMOTE_INFO}" = "auto" && "$(_git-num-remotes)" -ge 2) ||
+           "${SCM_GIT_SHOW_REMOTE_INFO}" = "true" ]]; then
+      if [[ "${same_branch_name}" != "true" ]]; then
+        remote_info="\$(_git-upstream)"
+      else
+        remote_info="$(_git-upstream-remote)"
+      fi
+    elif [[ ${same_branch_name} != "true" ]]; then
+      remote_info="\$(_git-upstream-branch)"
+    fi
+    if [[ -n "${remote_info}" ]];then
+      local branch_prefix
+      if _git-upstream-branch-gone; then
+        branch_prefix="${SCM_THEME_BRANCH_GONE_PREFIX}"
+      else
+        branch_prefix="${SCM_THEME_BRANCH_TRACK_PREFIX}"
+      fi
+      echo "${branch_prefix}${remote_info}"
+    fi
+  fi
+}
+
+# Unused by bash-it, present for API compatibility
+function git_status_summary {
+  awk '
+  BEGIN {
+    untracked=0;
+    unstaged=0;
+    staged=0;
+  }
+  {
+    if (!after_first && $0 ~ /^##.+/) {
+      print $0
+      seen_header = 1
+    } else if ($0 ~ /^\?\? .+/) {
+      untracked += 1
+    } else {
+      if ($0 ~ /^.[^ ] .+/) {
+        unstaged += 1
+      }
+      if ($0 ~ /^[^ ]. .+/) {
+        staged += 1
+      }
+    }
+    after_first = 1
+  }
+  END {
+    if (!seen_header) {
+      print
+    }
+    print untracked "\t" unstaged "\t" staged
+  }'
 }
diff --git a/themes/gitline/powerline.base.bash b/themes/gitline/powerline.base.bash
index 7f6f3130..4f6b17b0 100644
--- a/themes/gitline/powerline.base.bash
+++ b/themes/gitline/powerline.base.bash
@@ -1,3 +1,5 @@
+# Sudo check after every command
+THEME_CHECK_SUDO=${THEME_CHECK_SUDO:=true}
 
 #To set color for foreground and background
 function set_color {
diff --git a/themes/norbu/norbu.theme.bash b/themes/norbu/norbu.theme.bash
index def58d81..184c13c9 100644
--- a/themes/norbu/norbu.theme.bash
+++ b/themes/norbu/norbu.theme.bash
@@ -1,23 +1,21 @@
-# shellcheck shell=bash
-# shellcheck disable=SC2034 # Expected behavior for themes.
+#!/usr/bin/env bash
 
-function set_prompt_symbol() {
-	if [[ $1 -eq 0 ]]; then
-		prompt_symbol=">_"
-	else
-		prompt_symbol="${orange?}>_${normal?}"
-	fi
+function set_prompt_symbol () {
+    if test $1 -eq 0 ; then
+	PROMPT_SYMBOL=">_"
+    else
+	PROMPT_SYMBOL="${orange}>_${normal}"
+    fi
 }
-
 function prompt_command() {
-	local ret_val="$?" prompt_symbol scm_prompt_info
-	if [[ -n "${VIRTUAL_ENV:-}" ]]; then
-		PYTHON_VIRTUALENV="${bold_yellow?}[${VIRTUAL_ENV##*/}]"
-	fi
+    set_prompt_symbol $?
+    if test -z "$VIRTUAL_ENV" ; then
+	PYTHON_VIRTUALENV=""
+    else
+	PYTHON_VIRTUALENV="${bold_yellow}[`basename \"$VIRTUAL_ENV\"`]"
+    fi
 
-	scm_prompt_info="$(scm_prompt_info)"
-	set_prompt_symbol "${ret_val}"
-	PS1="${bold_orange?}${PYTHON_VIRTUALENV:-}${reset_color?}${bold_green?}[\w]${bold_blue?}[${scm_prompt_info}]${normal?} \n${prompt_symbol} "
+    PS1="${bold_orange}${PYTHON_VIRTUALENV}${reset_color}${bold_green}[\w]${bold_blue}\[$(scm_prompt_info)\]${normal} \n${PROMPT_SYMBOL} "
 }
 
 # scm themeing
diff --git a/themes/nwinkler_random_colors/README.md b/themes/nwinkler_random_colors/README.md
new file mode 100644
index 00000000..80620efb
--- /dev/null
+++ b/themes/nwinkler_random_colors/README.md
@@ -0,0 +1,29 @@
+# Nwinkler Random Color Theme
+
+## Description
+
+The *Nwinkler Random Color* Theme is based on the [nwinkler theme](https://github.com/Bash-it/bash-it/wiki/Themes#nwinkler), but it randomizes the colors for:
+
+* time
+* username
+* hostname
+* path
+
+The random colors are chosen the first time this theme is used and saved to the `~/.nwinkler_random_colors` file. So, the next time you connect to the same machine, you will get the same colors.
+
+To force new random colors to be selected, run the command:
+
+```sh
+randomize_nwinkler
+```
+
+## Screenshot
+
+Here it is in action:
+
+![alt text](screenshot.png "Nwinkler Random Color Theme in Action!")
+
+## Usage Scenario
+
+This theme is especially useful when connecting to many different machines and switching between them often. Yes, the hostname *is* present in the prompt. But I argue that it's a lot faster to get a "feel" of what machine you are currently on because of the custom colors on that machine's prompt than by reading the hostname.
+
diff --git a/themes/nwinkler_random_colors/screenshot.png b/themes/nwinkler_random_colors/screenshot.png
new file mode 100644
index 0000000000000000000000000000000000000000..e8cc75d8948f04a0466206de558c2a19930ed310
GIT binary patch
literal 43510
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
B+g|_x

literal 0
HcmV?d00001

diff --git a/themes/p4helpers.theme.bash b/themes/p4helpers.theme.bash
index 30b520cc..27a777ac 100644
--- a/themes/p4helpers.theme.bash
+++ b/themes/p4helpers.theme.bash
@@ -1,18 +1,18 @@
-# shellcheck shell=bash
+#!/usr/bin/env bash
 
 function _p4-opened {
-	timeout 2.0s p4 opened -s 2> /dev/null
+  timeout 2.0s p4 opened -s 2> /dev/null
 }
 
 function _p4-opened-counts {
-	# Return the following counts seperated by tabs:
-	#  - count of opened files
-	#  - count of pending changesets (other than defaults)
-	#  - count of files in the default changeset
-	#  - count of opened files in add mode
-	#  - count of opened files in edit mode
-	#  - count of opened files in delete mode
-	_p4-opened | awk '
+  # Return the following counts seperated by tabs:
+  #  - count of opened files
+  #  - count of pending changesets (other than defaults)
+  #  - count of files in the default changeset
+  #  - count of opened files in add mode
+  #  - count of opened files in edit mode
+  #  - count of opened files in delete mode
+  _p4-opened | awk '
   BEGIN {
     opened=0;
     type_array["edit"]=0;
diff --git a/themes/parrot/parrot.theme.bash b/themes/parrot/parrot.theme.bash
index 251eb942..a0d259dd 100644
--- a/themes/parrot/parrot.theme.bash
+++ b/themes/parrot/parrot.theme.bash
@@ -2,7 +2,7 @@
 
 # git branch parser
 function parse_git_branch() {
-    echo -e "\[\033[1;34m\]$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/')\[\033[0m\]"
+    echo -e "\033[1;34m$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/')\033[0m"
 }
 
 function parse_git_branch_no_color() {
diff --git a/themes/pete/pete.theme.bash b/themes/pete/pete.theme.bash
index e55ad6eb..d29553f8 100644
--- a/themes/pete/pete.theme.bash
+++ b/themes/pete/pete.theme.bash
@@ -1,16 +1,11 @@
 # shellcheck shell=bash
-# shellcheck disable=SC2034 # Expected behavior for themes.
 
-function prompt_setter() {
-	local clock_prompt scm_char scm_prompt_info ruby_version_prompt
-	clock_prompt="$(clock_prompt)"
-	scm_char="$(scm_char)"
-	scm_prompt_info="$(scm_prompt_info)"
-	ruby_version_prompt="$(ruby_version_prompt)"
-	_save-and-reload-history 1 # Save history
-	PS1="(${clock_prompt}) ${scm_char} [${blue?}\u${reset_color?}@${green?}\H${reset_color?}] ${yellow?}\w${reset_color?}${scm_prompt_info}${ruby_version_prompt} ${reset_color?} "
-	PS2='> '
-	PS4='+ '
+prompt_setter() {
+  # Save history
+  _save-and-reload-history 1
+  PS1="($(clock_prompt)) $(scm_char) [$blue\u$reset_color@$green\H$reset_color] $yellow\w${reset_color}$(scm_prompt_info)$(ruby_version_prompt) $reset_color "
+  PS2='> '
+  PS4='+ '
 }
 
 safe_append_prompt_command prompt_setter
diff --git a/themes/powerline-multiline/README.md b/themes/powerline-multiline/README.md
new file mode 100644
index 00000000..af84b4e8
--- /dev/null
+++ b/themes/powerline-multiline/README.md
@@ -0,0 +1,59 @@
+# Powerline Multiline Theme
+
+A colorful multiline theme, where the first line shows information about your shell session (divided into two parts, left and right), and the second one is where the shell commands are introduced.
+
+**IMPORTANT:** This theme requires that [a font with the Powerline symbols](https://github.com/powerline/fonts) needs to be used in your terminal emulator, otherwise the prompt won't be displayed correctly, i.e. some of the additional icons and characters will be missing. Please follow your operating system's instructions to install one of the fonts from the above link and select it in your terminal emulator.
+
+## Provided Information
+
+* Current path
+* Current username and hostname
+* Current time
+* An indicator when connected by SSH
+* An indicator when `sudo` has the credentials cached (see the `sudo` manpage for more info about this)
+* An indicator when the current shell is inside the Vim editor
+* Battery charging status (depends on the [../../plugins/available/battery.plugin.bash](battery plugin))
+* SCM Repository status (e.g. Git, SVN)
+* The current Python environment (Virtualenv, venv, and Conda are supported) in use
+* The current Ruby environment (rvm and rbenv are supported) in use
+* Last command exit code (only shown when the exit code is greater than 0)
+
+## Configuration
+
+This theme is pretty configurable, all the configuration is done by setting environment variables.
+
+### User Information
+
+By default, the username and hostname are shown on the right hand side, but you can change this behavior by setting the value of the following variable:
+
+    POWERLINE_PROMPT_USER_INFO_MODE="sudo"
+
+For now, the only supported value is `sudo`, which hides the username and hostname, and shows an indicator when `sudo` has the credentials cached. Other values have no effect at this time.
+
+### Clock Format
+
+By default, the current time is shown on the right hand side, you can change the format using the following variable:
+
+    THEME_CLOCK_FORMAT="%H:%M:%S"
+
+The time/date is printed by the `date` command, so refer to its man page to change the format.
+
+### Segment Order
+
+The contents of both prompt sides can be "reordered", all the "segments" (every piece of information) can take any place. The currently available segments are:
+
+* battery
+* clock
+* cwd
+* in_vim
+* python_venv
+* ruby
+* scm
+* user_info
+
+Two variables can be defined to set the order of the prompt segments:
+
+    POWERLINE_LEFT_PROMPT="scm python_venv ruby cwd"
+    POWERLINE_RIGHT_PROMPT="in_vim clock battery user_info"
+
+The example values above are the current default values, but if you want to remove anything from the prompt, simply remove the "string" that represents the segment from the corresponding variable.
diff --git a/themes/powerline-naked/README.md b/themes/powerline-naked/README.md
new file mode 100644
index 00000000..9ee38271
--- /dev/null
+++ b/themes/powerline-naked/README.md
@@ -0,0 +1,58 @@
+# Powerline Theme
+
+A colorful theme, where shows a lot information about your shell session.
+
+**IMPORTANT:** This theme requires that [a font with the Powerline symbols](https://github.com/powerline/fonts) needs to be used in your terminal emulator, otherwise the prompt won't be displayed correctly, i.e. some of the additional icons and characters will be missing. Please follow your operating system's instructions to install one of the fonts from the above link and select it in your terminal emulator.
+
+## Provided Information
+
+* Current path
+* Current username and hostname
+* Current time
+* An indicator when connected by SSH
+* An indicator when `sudo` has the credentials cached (see the `sudo` manpage for more info about this)
+* An indicator when the current shell is inside the Vim editor
+* Battery charging status (depends on the [../../plugins/available/battery.plugin.bash](battery plugin))
+* SCM Repository status (e.g. Git, SVN)
+* The current Python environment (Virtualenv, venv, and Conda are supported) in use
+* The current Ruby environment (rvm and rbenv are supported) in use
+* Last command exit code (only shown when the exit code is greater than 0)
+
+## Configuration
+
+This theme is pretty configurable, all the configuration is done by setting environment variables.
+
+### User Information
+
+By default, the username and hostname are shown, but you can change this behavior by setting the value of the following variable:
+
+    POWERLINE_PROMPT_USER_INFO_MODE="sudo"
+
+For now, the only supported value is `sudo`, which hides the username and hostname, and shows an indicator when `sudo` has the credentials cached. Other values have no effect at this time.
+
+### Clock Format
+
+You can change the format using the following variable:
+
+    THEME_CLOCK_FORMAT="%H:%M:%S"
+
+The time/date is printed by the `date` command, so refer to its man page to change the format.
+
+### Segment Order
+
+The contents of the prompt can be "reordered", all the "segments" (every piece of information) can take any place. The currently available segments are:
+
+* battery
+* clock
+* cwd
+* in_vim
+* python_venv
+* ruby
+* scm
+* user_info
+
+A variables can be defined to set the order of the prompt segments:
+
+    POWERLINE_PROMPT="user_info scm python_venv ruby cwd"
+
+The example values above are the current default values, but if you want to remove anything from the prompt, simply remove the "string" that represents the segment from the variable.
diff --git a/themes/powerline-plain/README.md b/themes/powerline-plain/README.md
new file mode 100644
index 00000000..6347d991
--- /dev/null
+++ b/themes/powerline-plain/README.md
@@ -0,0 +1,56 @@
+# Powerline Theme
+
+A colorful theme, where shows a lot information about your shell session.
+
+## Provided Information
+
+* Current path
+* Current username and hostname
+* Current time
+* An indicator when connected by SSH
+* An indicator when `sudo` has the credentials cached (see the `sudo` manpage for more info about this)
+* An indicator when the current shell is inside the Vim editor
+* Battery charging status (depends on the [../../plugins/available/battery.plugin.bash](battery plugin))
+* SCM Repository status (e.g. Git, SVN)
+* The current Python environment (Virtualenv, venv, and Conda are supported) in use
+* The current Ruby environment (rvm and rbenv are supported) in use
+* Last command exit code (only shown when the exit code is greater than 0)
+
+## Configuration
+
+This theme is pretty configurable, all the configuration is done by setting environment variables.
+
+### User Information
+
+By default, the username and hostname are shown, but you can change this behavior by setting the value of the following variable:
+
+    POWERLINE_PROMPT_USER_INFO_MODE="sudo"
+
+For now, the only supported value is `sudo`, which hides the username and hostname, and shows an indicator when `sudo` has the credentials cached. Other values have no effect at this time.
+
+### Clock Format
+
+You can change the format using the following variable:
+
+    THEME_CLOCK_FORMAT="%H:%M:%S"
+
+The time/date is printed by the `date` command, so refer to its man page to change the format.
+
+### Segment Order
+
+The contents of the prompt can be "reordered", all the "segments" (every piece of information) can take any place. The currently available segments are:
+
+* battery
+* clock
+* cwd
+* in_vim
+* python_venv
+* ruby
+* scm
+* user_info
+
+A variables can be defined to set the order of the prompt segments:
+
+    POWERLINE_PROMPT="user_info scm python_venv ruby cwd"
+
+The example values above are the current default values, but if you want to remove anything from the prompt, simply remove the "string" that represents the segment from the variable.
diff --git a/themes/powerline-plain/powerline-plain.base.bash b/themes/powerline-plain/powerline-plain.base.bash
index ce91ef89..03a857f1 100644
--- a/themes/powerline-plain/powerline-plain.base.bash
+++ b/themes/powerline-plain/powerline-plain.base.bash
@@ -52,7 +52,7 @@ function __powerline_prompt_command {
     LEFT_PROMPT+=" "
   fi
 
-  PS1="${LEFT_PROMPT}${PROMPT_AFTER}"
+  PS1="${LEFT_PROMPT}${PROMPT_AFTER}\n\$ "
 
   ## cleanup ##
   unset LAST_SEGMENT_COLOR \
diff --git a/themes/powerline-plain/powerline-plain.theme.bash b/themes/powerline-plain/powerline-plain.theme.bash
index 6ff68e8f..36369633 100644
--- a/themes/powerline-plain/powerline-plain.theme.bash
+++ b/themes/powerline-plain/powerline-plain.theme.bash
@@ -2,7 +2,10 @@
 
 . "$BASH_IT/themes/powerline-plain/powerline-plain.base.bash"
 
-USER_INFO_SSH_CHAR=${POWERLINE_USER_INFO_SSH_CHAR:="⌁ "}
+# • 🐍 Python
+# • 💻 Twitch
+# • 🔊 Soundeffects
+USER_INFO_SSH_CHAR=${POWERLINE_USER_INFO_SSH_CHAR:="💻 "}
 USER_INFO_THEME_PROMPT_COLOR=${POWERLINE_USER_INFO_COLOR:=32}
 USER_INFO_THEME_PROMPT_COLOR_SUDO=${POWERLINE_USER_INFO_COLOR_SUDO:=202}
 
@@ -14,13 +17,13 @@ POWERLINE_COMPACT_AFTER_LAST_SEGMENT=${POWERLINE_COMPACT_AFTER_LAST_SEGMENT:=${P
 POWERLINE_COMPACT_PROMPT=${POWERLINE_COMPACT_PROMPT:=${POWERLINE_COMPACT}}
 POWERLINE_PROMPT_AFTER=${POWERLINE_PROMPT_AFTER:-""}
 
-PYTHON_VENV_CHAR=${POWERLINE_PYTHON_VENV_CHAR:="ⓔ "}
-CONDA_PYTHON_VENV_CHAR=${POWERLINE_CONDA_PYTHON_VENV_CHAR:="ⓔ "}
+PYTHON_VENV_CHAR=${POWERLINE_PYTHON_VENV_CHAR:="🐍 "}
+CONDA_PYTHON_VENV_CHAR=${POWERLINE_CONDA_PYTHON_VENV_CHAR:="🐍 "}
 PYTHON_VENV_THEME_PROMPT_COLOR=${POWERLINE_PYTHON_VENV_COLOR:=35}
 
 SCM_NONE_CHAR=""
-SCM_GIT_CHAR=${POWERLINE_SCM_GIT_CHAR:="⎇  "}
-SCM_HG_CHAR=${POWERLINE_SCM_HG_CHAR:="☿ "}
+SCM_GIT_CHAR=${POWERLINE_SCM_GIT_CHAR:=" "}
+SCM_HG_CHAR=${POWERLINE_SCM_HG_CHAR:=" "}
 SCM_THEME_PROMPT_CLEAN=""
 SCM_THEME_PROMPT_DIRTY=""
 SCM_THEME_PROMPT_CLEAN_COLOR=${POWERLINE_SCM_CLEAN_COLOR:=25}
@@ -47,9 +50,6 @@ TERRAFORM_CHAR=${POWERLINE_TERRAFORM_CHAR:="❲t❳ "}
 KUBERNETES_CONTEXT_THEME_CHAR=${POWERLINE_KUBERNETES_CONTEXT_CHAR:="⎈ "}
 KUBERNETES_CONTEXT_THEME_PROMPT_COLOR=${POWERLINE_KUBERNETES_CONTEXT_COLOR:=26}
 
-KUBERNETES_NAMESPACE_THEME_CHAR=${POWERLINE_KUBERNETES_NAMESPACE_CHAR:="⎈ "}
-KUBERNETES_NAMESPACE_THEME_PROMPT_COLOR=${POWERLINE_KUBERNETES_NAMESPACE_COLOR:=60}
-
 AWS_PROFILE_CHAR=${POWERLINE_AWS_PROFILE_CHAR:="❲aws❳ "}
 AWS_PROFILE_PROMPT_COLOR=${POWERLINE_AWS_PROFILE_COLOR:=208}
 
@@ -89,6 +89,7 @@ COMMAND_NUMBER_THEME_PROMPT_CHAR=${POWERLINE_COMMAND_NUMBER_CHAR:="#"}
 GCLOUD_THEME_PROMPT_COLOR=${POWERLINE_GCLOUD_COLOR:=161}
 GCLOUD_CHAR=${POWERLINE_GCLOUD_CHAR:="❲G❳ "}
 
-POWERLINE_PROMPT=${POWERLINE_PROMPT:="user_info scm python_venv ruby node cwd"}
+#POWERLINE_PROMPT=${POWERLINE_PROMPT:="user_info scm python_venv ruby node cwd"}
+POWERLINE_PROMPT=${POWERLINE_PROMPT:="user_info scm python_venv ruby cwd"}
 
 safe_append_prompt_command __powerline_prompt_command
diff --git a/themes/powerline/README.md b/themes/powerline/README.md
new file mode 100644
index 00000000..9ee38271
--- /dev/null
+++ b/themes/powerline/README.md
@@ -0,0 +1,58 @@
+# Powerline Theme
+
+A colorful theme, where shows a lot information about your shell session.
+
+**IMPORTANT:** This theme requires that [a font with the Powerline symbols](https://github.com/powerline/fonts) needs to be used in your terminal emulator, otherwise the prompt won't be displayed correctly, i.e. some of the additional icons and characters will be missing. Please follow your operating system's instructions to install one of the fonts from the above link and select it in your terminal emulator.
+
+## Provided Information
+
+* Current path
+* Current username and hostname
+* Current time
+* An indicator when connected by SSH
+* An indicator when `sudo` has the credentials cached (see the `sudo` manpage for more info about this)
+* An indicator when the current shell is inside the Vim editor
+* Battery charging status (depends on the [../../plugins/available/battery.plugin.bash](battery plugin))
+* SCM Repository status (e.g. Git, SVN)
+* The current Python environment (Virtualenv, venv, and Conda are supported) in use
+* The current Ruby environment (rvm and rbenv are supported) in use
+* Last command exit code (only shown when the exit code is greater than 0)
+
+## Configuration
+
+This theme is pretty configurable, all the configuration is done by setting environment variables.
+
+### User Information
+
+By default, the username and hostname are shown, but you can change this behavior by setting the value of the following variable:
+
+    POWERLINE_PROMPT_USER_INFO_MODE="sudo"
+
+For now, the only supported value is `sudo`, which hides the username and hostname, and shows an indicator when `sudo` has the credentials cached. Other values have no effect at this time.
+
+### Clock Format
+
+You can change the format using the following variable:
+
+    THEME_CLOCK_FORMAT="%H:%M:%S"
+
+The time/date is printed by the `date` command, so refer to its man page to change the format.
+
+### Segment Order
+
+The contents of the prompt can be "reordered", all the "segments" (every piece of information) can take any place. The currently available segments are:
+
+* battery
+* clock
+* cwd
+* in_vim
+* python_venv
+* ruby
+* scm
+* user_info
+
+A variables can be defined to set the order of the prompt segments:
+
+    POWERLINE_PROMPT="user_info scm python_venv ruby cwd"
+
+The example values above are the current default values, but if you want to remove anything from the prompt, simply remove the "string" that represents the segment from the variable.
diff --git a/themes/powerline/powerline.base.bash b/themes/powerline/powerline.base.bash
index 84469e87..7da15cfd 100644
--- a/themes/powerline/powerline.base.bash
+++ b/themes/powerline/powerline.base.bash
@@ -1,12 +1,16 @@
 # shellcheck shell=bash
 # shellcheck disable=SC2034 # Expected behavior for themes.
+# shellcheck disable=SC2154 #TODO: fix these all.
+
+# Define this here so it can be used by all of the Powerline themes
+THEME_CHECK_SUDO=${THEME_CHECK_SUDO:=true}
 
 function set_color() {
-	local fg='' bg=''
-	if [[ "${1:-}" != "-" ]]; then
+	set +u
+	if [[ "${1}" != "-" ]]; then
 		fg="38;5;${1}"
 	fi
-	if [[ "${2:-}" != "-" ]]; then
+	if [[ "${2}" != "-" ]]; then
 		bg="48;5;${2}"
 		[[ -n "${fg}" ]] && bg=";${bg}"
 	fi
@@ -95,13 +99,14 @@ function __powerline_k8s_namespace_prompt() {
 }
 
 function __powerline_python_venv_prompt() {
+	set +u
 	local python_venv=""
 
-	if [[ -n "${CONDA_DEFAULT_ENV:-}" ]]; then
+	if [[ -n "${CONDA_DEFAULT_ENV}" ]]; then
 		python_venv="${CONDA_DEFAULT_ENV}"
 		PYTHON_VENV_CHAR=${CONDA_PYTHON_VENV_CHAR}
-	elif [[ -n "${VIRTUAL_ENV:-}" ]]; then
-		python_venv="${VIRTUAL_ENV##*/}"
+	elif [[ -n "${VIRTUAL_ENV}" ]]; then
+		python_venv=$(basename "${VIRTUAL_ENV}")
 	fi
 
 	[[ -n "${python_venv}" ]] && echo "${PYTHON_VENV_CHAR}${python_venv}|${PYTHON_VENV_THEME_PROMPT_COLOR}"
@@ -132,7 +137,7 @@ function __powerline_scm_prompt() {
 		elif [[ "${SCM_SVN_CHAR}" == "${SCM_CHAR}" ]]; then
 			scm_prompt+="${SCM_CHAR}${SCM_BRANCH}${SCM_STATE}"
 		fi
-		echo "${scm_prompt?}|${color}"
+		echo "$(eval "echo ${scm_prompt}")${scm}|${color}"
 	fi
 }
 
@@ -238,12 +243,12 @@ function __powerline_left_segment() {
 		# Since the previous segment wasn't the last segment, add padding, if needed
 		#
 		if [[ "${POWERLINE_COMPACT_BEFORE_SEPARATOR}" -eq 0 ]]; then
-			LEFT_PROMPT+="$(set_color - "${LAST_SEGMENT_COLOR}") ${normal?}"
+			LEFT_PROMPT+="$(set_color - "${LAST_SEGMENT_COLOR}") ${normal}"
 		fi
 		if [[ "${LAST_SEGMENT_COLOR}" -eq "${params[1]}" ]]; then
-			LEFT_PROMPT+="$(set_color - "${LAST_SEGMENT_COLOR}")${POWERLINE_LEFT_SEPARATOR_SOFT}${normal?}"
+			LEFT_PROMPT+="$(set_color - "${LAST_SEGMENT_COLOR}")${POWERLINE_LEFT_SEPARATOR_SOFT}${normal}"
 		else
-			LEFT_PROMPT+="$(set_color "${LAST_SEGMENT_COLOR}" "${params[1]}")${POWERLINE_LEFT_SEPARATOR}${normal?}"
+			LEFT_PROMPT+="$(set_color "${LAST_SEGMENT_COLOR}" "${params[1]}")${POWERLINE_LEFT_SEPARATOR}${normal}"
 		fi
 	fi
 
@@ -253,7 +258,7 @@ function __powerline_left_segment() {
 }
 
 function __powerline_left_last_segment_padding() {
-	LEFT_PROMPT+="$(set_color - "${LAST_SEGMENT_COLOR}") ${normal?}"
+	LEFT_PROMPT+="$(set_color - "${LAST_SEGMENT_COLOR}") ${normal}"
 }
 
 function __powerline_last_status_prompt() {
@@ -280,9 +285,9 @@ function __powerline_prompt_command() {
 		[[ -n "${info}" ]] && __powerline_left_segment "${info}"
 	done
 
-	[[ "${last_status}" -ne 0 ]] && __powerline_left_segment "$(__powerline_last_status_prompt "${last_status}")"
+	[[ "${last_status}" -ne 0 ]] && __powerline_left_segment "$(__powerline_last_status_prompt ${last_status})"
 
-	if [[ -n "${LEFT_PROMPT}" ]] && [[ "${POWERLINE_COMPACT_AFTER_LAST_SEGMENT:-}" -eq 0 ]]; then
+	if [[ -n "${LEFT_PROMPT}" ]] && [[ "${POWERLINE_COMPACT_AFTER_LAST_SEGMENT}" -eq 0 ]]; then
 		__powerline_left_last_segment_padding
 	fi
 
@@ -291,11 +296,11 @@ function __powerline_prompt_command() {
 	prompt_color="$(set_color "${LAST_SEGMENT_COLOR}" -)"
 	if [[ -n "${LEFT_PROMPT}" ]] && [[ -n "${POWERLINE_LEFT_LAST_SEGMENT_PROMPT_CHAR}" ]]; then
 		LEFT_PROMPT+="$(set_color - "${LAST_SEGMENT_COLOR}")${POWERLINE_LEFT_LAST_SEGMENT_PROMPT_CHAR}"
-		prompt_color="${normal?}"
+		prompt_color="${normal}"
 	fi
-	[[ -n "${LEFT_PROMPT}" ]] && LEFT_PROMPT+="${prompt_color}${separator_char}${normal?}"
+	[[ -n "${LEFT_PROMPT}" ]] && LEFT_PROMPT+="${prompt_color}${separator_char}${normal}"
 
-	if [[ "${POWERLINE_COMPACT_PROMPT:-}" -eq 0 ]]; then
+	if [[ "${POWERLINE_COMPACT_PROMPT}" -eq 0 ]]; then
 		LEFT_PROMPT+=" "
 	fi
 
diff --git a/themes/pure/pure.theme.bash b/themes/pure/pure.theme.bash
index 4dd59e02..99476f4a 100644
--- a/themes/pure/pure.theme.bash
+++ b/themes/pure/pure.theme.bash
@@ -1,37 +1,41 @@
 # shellcheck shell=bash
 # shellcheck disable=SC2034 # Expected behavior for themes.
+# shellcheck disable=SC2154 #TODO: fix these all.
 
 # scm theming
 SCM_THEME_PROMPT_PREFIX="|"
 SCM_THEME_PROMPT_SUFFIX=""
 
-SCM_THEME_PROMPT_DIRTY=" ${bold_red?}✗${normal?}"
-SCM_THEME_PROMPT_CLEAN=" ${green?}✓${normal?}"
-SCM_GIT_CHAR="${green?}±${normal?}"
-SCM_SVN_CHAR="${bold_cyan?}⑆${normal?}"
-SCM_HG_CHAR="${bold_red?}☿${normal?}"
+SCM_THEME_PROMPT_DIRTY=" ${bold_red}✗${normal}"
+SCM_THEME_PROMPT_CLEAN=" ${green}✓${normal}"
+SCM_GIT_CHAR="${green}±${normal}"
+SCM_SVN_CHAR="${bold_cyan}⑆${normal}"
+SCM_HG_CHAR="${bold_red}☿${normal}"
 
 VIRTUALENV_THEME_PROMPT_PREFIX="("
 VIRTUALENV_THEME_PROMPT_SUFFIX=")"
 
-function pure_prompt() {
-	local ps_host="${bold_blue?}\h${normal?}"
-	local ps_user="${green?}\u${normal?}"
-	local ps_user_mark="${green?} \$ ${normal?}"
-	local ps_root="${red?}\u${red?}"
-	local ps_root_mark="${red?} \$ ${normal?}"
-	local ps_path="${yellow?}\w${normal?}"
-	local virtualenv_prompt scm_prompt
-	virtualenv_prompt="$(virtualenv_prompt)"
-	scm_prompt="$(scm_prompt)"
+### TODO: openSUSE has already colors enabled, check if those differs from stock
+# LS colors, made with http://geoff.greer.fm/lscolors/
+# export LSCOLORS="Gxfxcxdxbxegedabagacad"
+# export LS_COLORS='no=00:fi=00:di=01;34:ln=00;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=41;33;01:ex=00;32:*.cmd=00;32:*.exe=01;32:*.com=01;32:*.bat=01;32:*.btm=01;32:*.dll=01;32:*.tar=00;31:*.tbz=00;31:*.tgz=00;31:*.rpm=00;31:*.deb=00;31:*.arj=00;31:*.taz=00;31:*.lzh=00;31:*.lzma=00;31:*.zip=00;31:*.zoo=00;31:*.z=00;31:*.Z=00;31:*.gz=00;31:*.bz2=00;31:*.tb2=00;31:*.tz2=00;31:*.tbz2=00;31:*.avi=01;35:*.bmp=01;35:*.fli=01;35:*.gif=01;35:*.jpg=01;35:*.jpeg=01;35:*.mng=01;35:*.mov=01;35:*.mpg=01;35:*.pcx=01;35:*.pbm=01;35:*.pgm=01;35:*.png=01;35:*.ppm=01;35:*.tga=01;35:*.tif=01;35:*.xbm=01;35:*.xpm=01;35:*.dl=01;35:*.gl=01;35:*.wmv=01;35:*.aiff=00;32:*.au=00;32:*.mid=00;32:*.mp3=00;32:*.ogg=00;32:*.voc=00;32:*.wav=00;32:'
+
+pure_prompt() {
+	ps_host="${bold_blue}\h${normal}"
+	ps_user="${green}\u${normal}"
+	ps_user_mark="${green} $ ${normal}"
+	ps_root="${red}\u${red}"
+	ps_root_mark="${red} # ${normal}"
+	ps_path="${yellow}\w${normal}"
 	# make it work
-	case "${EUID:-$UID}" in
+	case $(id -u) in
 		0)
-			ps_user_mark="${ps_root_mark}"
-			ps_user="${ps_root}"
+			PS1="$(virtualenv_prompt)$ps_root@$ps_host$(scm_prompt):$ps_path$ps_root_mark"
+			;;
+		*)
+			PS1="$(virtualenv_prompt)$ps_user@$ps_host$(scm_prompt):$ps_path$ps_user_mark"
 			;;
 	esac
-	PS1="${virtualenv_prompt}${ps_user}@${ps_host}${scm_prompt}:${ps_path}${ps_user_mark}"
 }
 
 safe_append_prompt_command pure_prompt
diff --git a/themes/purity/purity.theme.bash b/themes/purity/purity.theme.bash
index 0fc6c4cf..22a3fbfb 100644
--- a/themes/purity/purity.theme.bash
+++ b/themes/purity/purity.theme.bash
@@ -1,44 +1,36 @@
 # shellcheck shell=bash
 # shellcheck disable=SC2034 # Expected behavior for themes.
+# shellcheck disable=SC2154 #TODO: fix these all.
 
-SCM_THEME_PROMPT_DIRTY=" ${bold_red?}⊘${normal?}"
-SCM_THEME_PROMPT_CLEAN=" ${bold_green?}✓${normal?}"
-SCM_THEME_PROMPT_PREFIX="${reset_color?}( "
-SCM_THEME_PROMPT_SUFFIX=" ${reset_color?})"
+SCM_THEME_PROMPT_DIRTY=" ${bold_red}⊘${normal}"
+SCM_THEME_PROMPT_CLEAN=" ${bold_green}✓${normal}"
+SCM_THEME_PROMPT_PREFIX="${reset_color}( "
+SCM_THEME_PROMPT_SUFFIX=" ${reset_color})"
 
-GIT_THEME_PROMPT_DIRTY=" ${bold_red?}⊘${normal?}"
-GIT_THEME_PROMPT_CLEAN=" ${bold_green?}✓${normal?}"
-GIT_THEME_PROMPT_PREFIX="${reset_color?}( "
-GIT_THEME_PROMPT_SUFFIX=" ${reset_color?})"
+GIT_THEME_PROMPT_DIRTY=" ${bold_red}⊘${normal}"
+GIT_THEME_PROMPT_CLEAN=" ${bold_green}✓${normal}"
+GIT_THEME_PROMPT_PREFIX="${reset_color}( "
+GIT_THEME_PROMPT_SUFFIX=" ${reset_color})"
 
-STATUS_THEME_PROMPT_BAD="${bold_red?}❯${reset_color?}${normal?} "
-STATUS_THEME_PROMPT_OK="${bold_green?}❯${reset_color?}${normal?} "
-: "${PURITY_THEME_PROMPT_COLOR:=$blue}"
+STATUS_THEME_PROMPT_BAD="${bold_red}❯${reset_color}${normal} "
+STATUS_THEME_PROMPT_OK="${bold_green}❯${reset_color}${normal} "
+PURITY_THEME_PROMPT_COLOR="${PURITY_THEME_PROMPT_COLOR:=$blue}"
 
-function venv_prompt() {
+venv_prompt() {
 	python_venv=""
 	# Detect python venv
-	if [[ -n "${CONDA_DEFAULT_ENV:-}" ]]; then
-		python_venv="(${PYTHON_VENV_CHAR}${CONDA_DEFAULT_ENV}) "
+	if [[ -n "${CONDA_DEFAULT_ENV}" ]]; then
+		python_venv="($PYTHON_VENV_CHAR${CONDA_DEFAULT_ENV}) "
 	elif [[ -n "${VIRTUAL_ENV}" ]]; then
-		python_venv="(${PYTHON_VENV_CHAR}${VIRTUAL_ENV##*/}) "
+		python_venv="($PYTHON_VENV_CHAR$(basename "${VIRTUAL_ENV}")) "
 	fi
 	[[ -n "${python_venv}" ]] && echo "${python_venv}"
 }
 
 function prompt_command() {
-	local retval="$?" ret_status python_venv scm_prompt_info venv_prompt
-	case "${retval}" in
-		0)
-			ret_status="$STATUS_THEME_PROMPT_OK"
-			;;
-		*)
-			ret_status="$STATUS_THEME_PROMPT_BAD"
-			;;
-	esac
-	scm_prompt_info="$(scm_prompt_info)"
-	venv_prompt="$(venv_prompt)"
-	PS1="\n${PURITY_THEME_PROMPT_COLOR}\w ${scm_prompt_info}\n${ret_status}${venv_prompt}"
+	local retval=$? ret_status
+	ret_status="$([ $retval -eq 0 ] && echo -e "$STATUS_THEME_PROMPT_OK" || echo -e "$STATUS_THEME_PROMPT_BAD")"
+	PS1="\n${PURITY_THEME_PROMPT_COLOR}\w $(scm_prompt_info)\n${ret_status}$(venv_prompt)"
 }
 
 safe_append_prompt_command prompt_command
diff --git a/themes/rjorgenson/rjorgenson.theme.bash b/themes/rjorgenson/rjorgenson.theme.bash
index 6e73c4a2..71d29e78 100644
--- a/themes/rjorgenson/rjorgenson.theme.bash
+++ b/themes/rjorgenson/rjorgenson.theme.bash
@@ -1,5 +1,3 @@
-# shellcheck shell=bash
-
 # port of zork theme
 
 # set colors for use throughout the prompt
@@ -52,7 +50,7 @@ function is_integer() { # helper function for todo-txt-count
 
 todo_txt_count() {
     if `hash todo.sh 2>&-`; then # is todo.sh installed
-        count=`todo.sh ls | grep -E "TODO: [0-9]+ of ([0-9]+) tasks shown" | awk '{ print $4 }'`
+        count=`todo.sh ls | egrep "TODO: [0-9]+ of ([0-9]+) tasks shown" | awk '{ print $4 }'`
         if is_integer $count; then # did we get a sane answer back
             echo "${BRACKET_COLOR}[${STRING_COLOR}T:$count${BRACKET_COLOR}]$normal"
         fi
-- 
2.41.0

